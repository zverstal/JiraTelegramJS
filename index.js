require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const { DateTime } = require('luxon');
const bot = new Bot(process.env.BOT_API_KEY);
const db = new sqlite3.Database('tasks.db');
const cron = require('node-cron');

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É-–≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'yyyy-MM-dd HH:mm:ss'.
 */
function getMoscowTimestamp() {
    const moscowTime = DateTime.now().setZone('Europe/Moscow');
    return moscowTime.toFormat('yyyy-MM-dd HH:mm:ss');
}

/**
 * –°–æ–∑–¥–∞—ë–º (–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ) —Ç–∞–±–ª–∏—Ü –≤ –ë–î.
 * –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è archived, archivedDate –≤ tasks.
 */
db.run(`
  CREATE TABLE IF NOT EXISTS tasks (
    id TEXT PRIMARY KEY,
    title TEXT,
    priority TEXT,
    department TEXT,
    issueType TEXT,
    resolution TEXT,
    assignee TEXT,
    dateAdded DATETIME,
    lastSent DATETIME,
    source TEXT,
    archived INTEGER DEFAULT 0,
    archivedDate DATETIME
  )
`);

db.run(`
  CREATE TABLE IF NOT EXISTS user_actions (
    username TEXT,
    taskId TEXT,
    action TEXT,
    timestamp DATETIME,
    FOREIGN KEY(taskId) REFERENCES tasks(id)
)
`);

db.run(`
  CREATE TABLE IF NOT EXISTS task_comments (
    taskId TEXT,
    lastCommentId TEXT,
    timestamp DATETIME,
    FOREIGN KEY(taskId) REFERENCES tasks(id)
)
`);

/**
 * –ö–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Telegram –Ω–∏–∫ -> –§–ò–û), –ø–ª—é—Å –ª–æ–≥–∏–Ω—ã –≤ Jira.
 */
const userMappings = {
    "lipchinski": {
        name: "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
        sxl: "d.selivanov",
        betone: "dms"
    },
    "pr0spal": {
        name: "–ï–≤–≥–µ–Ω–∏–π –®—É—à–∫–æ–≤",
        sxl: "e.shushkov",
        betone: "es"
    },
    "fdhsudgjdgkdfg": {
        name: "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
        sxl: "d.maslov",
        betone: "dam"
    },
    "EuroKaufman": {
        name: "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤",
        sxl: "d.baratov",
        betone: "db"
    },
    "Nikolay_Gonchar": {
        name: "–ù–∏–∫–æ–ª–∞–π –ì–æ–Ω—á–∞—Ä",
        sxl: "n.gonchar",
        betone: "ng"
    },
    "KIRILlKxX": {
        name: "–ö–∏—Ä–∏–ª–ª –ê—Ç–∞–Ω–∏–∑—è–æ–≤",
        sxl: "k.ataniyazov",
        betone: "ka"
    },
    "marysh353": {
        name: "–î–∞–Ω–∏–∏–ª –ú–∞—Ä—ã—à–µ–≤",
        sxl: "d.maryshev",
        betone: "dma"
    }
};

/**
 * –ú–∞–ø–∏–º assignee –∏–∑ Jira (–Ω–∞–ø—Ä–∏–º–µ—Ä, d.selivanov / dms) –Ω–∞ –§–ò–û.
 */
function mapAssigneeToName(assigneeFromJira) {
    for (const key in userMappings) {
        const mapObj = userMappings[key];
        if (mapObj.sxl === assigneeFromJira || mapObj.betone === assigneeFromJira) {
            return mapObj.name;
        }
    }
    return ''; // –ù–µ –Ω–∞—à–ª–∏
}

/**
 * –ú–∞–ø–∏–º Telegram username (–Ω–∞–ø—Ä–∏–º–µ—Ä, lipchinski) -> –§–ò–û ("–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤").
 */
function mapTelegramUserToName(tlgUsername) {
    if (!tlgUsername) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    if (userMappings[tlgUsername]) {
        return userMappings[tlgUsername].name;
    }
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
}

/**
 * –≠–º–æ–¥–∂–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
 */
function getPriorityEmoji(priority) {
    const emojis = {
        Blocker: 'üö®',
        High: 'üî¥',
        Medium: 'üü°',
        Low: 'üü¢'
    };
    return emojis[priority] || '';
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ö–æ–¥–∏—Ç –≤ 2 –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (sxl, betone) –∑–∞ –∑–∞–¥–∞—á–∞–º–∏.
 */
async function fetchAndStoreJiraTasks() {
    await fetchAndStoreTasksFromJira(
        'sxl',
        'https://jira.sxl.team/rest/api/2/search',
        process.env.JIRA_PAT_SXL
    );
    await fetchAndStoreTasksFromJira(
        'betone',
        'https://jira.betone.team/rest/api/2/search',
        process.env.JIRA_PAT_BETONE
    );
}

/**
 * –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ (Open, Under review, Waiting..., Done),
 * —Å—Ç–∞–≤–∏–º archived=0 –¥–ª—è –ø—Ä–∏—à–µ–¥—à–∏—Ö.
 * –û—Å—Ç–∞–ª—å–Ω—ã–µ (–Ω–µ –ø—Ä–∏—à–µ–¥—à–∏–µ) ‚Äì –ø–æ–º–µ—á–∞–µ–º archived=1, archivedDate=now.
 *
 * –í–ê–ñ–ù–û: –ò—Å–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—è department:
 *  - –î–ª—è 'sxl' –±–µ—Ä—ë–º fields.customfield_10500?.value
 *  - –î–ª—è 'betone' –±–µ—Ä—ë–º fields.customfield_10504?.value
 *  - –ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –ø–æ–ª—è –Ω–∞ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –≤–∞—à–∏—Ö Jira.
 */
async function fetchAndStoreTasksFromJira(source, url, pat) {
    try {
        console.log(`Fetching tasks from ${source} Jira...`);

        const jql = `
            project = SUPPORT
            AND status in ("Open", "Under review", "Waiting for support", "Waiting for Developers approval", "Done")
        `;
        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            },
            params: { jql }
        });

        const fetchedIssues = response.data.issues || [];
        const fetchedTaskIds = fetchedIssues.map(issue => issue.key);

        // –û–±–Ω–æ–≤–ª—è–µ–º / –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Jira
        for (const issue of fetchedIssues) {
            const fields = issue.fields;

            // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è department –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç source
            let department = '–ù–µ —É–∫–∞–∑–∞–Ω';
            if (source === 'sxl') {
                // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è SXL –∏—Å–ø–æ–ª—å–∑—É–µ–º customfield_10500
                department = fields.customfield_10500?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
            } else if (source === 'betone') {
                // –î–ª—è BetOne –∏—Å–ø–æ–ª—å–∑—É–µ–º customfield_10504
                department = fields.customfield_10504?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
            }

            const resolution = fields.resolution?.name || '';
            const assigneeKey = fields.assignee?.name || '';  // –Ω–∞–ø—Ä–∏–º–µ—Ä "d.selivanov"
            const assigneeName = mapAssigneeToName(assigneeKey);

            const taskData = {
                id: issue.key,
                title: fields.summary,
                priority: fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                issueType: fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                department,
                resolution,
                assignee: assigneeName,
                source
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∞ –≤ –ë–î
            const existingTask = await new Promise((resolve, reject) => {
                db.get('SELECT * FROM tasks WHERE id = ?', [taskData.id], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });

            if (existingTask) {
                // UPDATE
                db.run(
                    `UPDATE tasks
                     SET title = ?,
                         priority = ?,
                         issueType = ?,
                         department = ?,
                         resolution = ?,
                         assignee = ?,
                         source = ?,
                         archived = 0 -- —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                     WHERE id = ?`,
                    [
                        taskData.title,
                        taskData.priority,
                        taskData.issueType,
                        taskData.department,
                        taskData.resolution,
                        taskData.assignee,
                        taskData.source,
                        taskData.id
                    ]
                );
            } else {
                // INSERT
                db.run(
                    `INSERT INTO tasks
                     (id, title, priority, issueType, department, resolution, assignee, dateAdded, lastSent, source, archived, archivedDate)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, 0, NULL)`,
                    [
                        taskData.id,
                        taskData.title,
                        taskData.priority,
                        taskData.issueType,
                        taskData.department,
                        taskData.resolution,
                        taskData.assignee,
                        getMoscowTimestamp(),
                        taskData.source
                    ]
                );
            }
        }

        // –ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø—Ä–∏—à–ª–∏ –∏–∑ Jira (–Ω–µ –≤ fetchedTaskIds) ‚Äî –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
        if (fetchedTaskIds.length > 0) {
            const placeholders = fetchedTaskIds.map(() => '?').join(',');
            db.run(
                `UPDATE tasks
                 SET archived = 1,
                     archivedDate = ?
                 WHERE source = ?
                   AND archived = 0
                   AND id NOT IN (${placeholders})`,
                [getMoscowTimestamp(), source, ...fetchedTaskIds],
                function(err) {
                    if (err) {
                        console.error('Error archiving tasks:', err);
                    } else {
                        if (this.changes > 0) {
                            console.log(`Archived ${this.changes} tasks from ${source}.`);
                        }
                    }
                }
            );
        } else {
            // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∑–∞–¥–∞—á, –≤—Å—ë (—ç—Ç–æ–≥–æ source) –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
            db.run(
                `UPDATE tasks
                 SET archived = 1,
                     archivedDate = ?
                 WHERE source = ?
                   AND archived = 0`,
                [getMoscowTimestamp(), source],
                function(err) {
                    if (err) {
                        console.error('Error archiving tasks (none fetched):', err);
                    } else {
                        if (this.changes > 0) {
                            console.log(`Archived ${this.changes} tasks from ${source} (none fetched).`);
                        }
                    }
                }
            );
        }
    } catch (error) {
        console.error(`Error fetching and storing tasks from ${source} Jira:`, error);
    }
}

/**
 * –†–∞—Å—Å—ã–ª–∞–µ–º "—Å–≤–µ–∂–∏–µ" –∑–∞–¥–∞—á–∏ (–Ω–µ Done, archived=0), –≥–¥–µ lastSent < —Å–µ–≥–æ–¥–Ω—è.
 */
async function sendJiraTasks(ctx) {
    const today = getMoscowTimestamp().split(' ')[0];
    const query = `
        SELECT *
        FROM tasks
        WHERE (lastSent IS NULL OR lastSent < date('${today}'))
          AND resolution != 'Done'
          AND archived = 0
        ORDER BY priority
    `;

    db.all(query, [], async (err, rows) => {
        if (err) {
            console.error('Error fetching tasks:', err);
            return;
        }

        for (const task of rows) {
            const keyboard = new InlineKeyboard();
            const jiraUrl = `https://jira.${task.source}.team/browse/${task.id}`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º: department === '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
            if (task.department === '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞') {
                keyboard
                    .text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`)
                    .text('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', `comment_task:${task.id}`)
                    .text('–ó–∞–≤–µ—Ä—à–∏—Ç—å', `complete_task:${task.id}`)
                    .row()
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', jiraUrl);
            } else if (['Infra', 'Office', 'Prod'].includes(task.issueType)) {
                keyboard.url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', jiraUrl);
            } else {
                keyboard.url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', jiraUrl);
            }

            const messageText = `
–ó–∞–¥–∞—á–∞: ${task.id}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}
–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}
–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.issueType}
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assignee || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
            `.trim();

            await ctx.reply(messageText, {
                reply_markup: keyboard
            });

            db.run('UPDATE tasks SET lastSent = ? WHERE id = ?', [getMoscowTimestamp(), task.id]);
        }
    });
}

/**
 * –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ø–æ–ª–Ω–æ—á—å):
 * —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –Ω—É–∂–Ω—ã, 
 * –Ω–∞–ø—Ä–∏–º–µ—Ä, archived=1 –∏ resolution='Done' —Å—Ç–∞—Ä—à–µ 35 –¥–Ω–µ–π.
 */
cron.schedule('0 0 * * *', () => {
    console.log('Starting daily DB cleanup...');

    const cleanupQuery = `
        DELETE FROM tasks
        WHERE archived = 1
          AND resolution = 'Done'
          AND archivedDate IS NOT NULL
          AND date(archivedDate) < date('now','-35 days')
    `;
    db.run(cleanupQuery, function(err) {
        if (err) {
            console.error('Error cleaning up archived tasks:', err);
        } else {
            console.log(`Cleaned up ${this.changes} old archived tasks (Done).`);
        }
    });

    // –ß–∏—Å—Ç–∏–º user_actions, –µ—Å–ª–∏ task —É–∂–µ –Ω–µ—Ç
    const cleanupUserActions = `
        DELETE FROM user_actions
        WHERE taskId NOT IN (SELECT id FROM tasks)
    `;
    db.run(cleanupUserActions, function(err) {
        if (err) {
            console.error('Error cleaning up old user_actions:', err);
        } else {
            console.log(`Cleaned up ${this.changes} old user_actions.`);
        }
    });

    // –ß–∏—Å—Ç–∏–º task_comments, –µ—Å–ª–∏ task —É–∂–µ –Ω–µ—Ç
    const cleanupComments = `
        DELETE FROM task_comments
        WHERE taskId NOT IN (SELECT id FROM tasks)
    `;
    db.run(cleanupComments, function(err) {
        if (err) {
            console.error('Error cleaning up old task_comments:', err);
        } else {
            console.log(`Cleaned up ${this.changes} old task_comments.`);
        }
    });
});

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∑–∞–¥–∞—á–∞—Ö Done (–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞).
 */
async function checkNewCommentsInDoneTasks() {
    try {
        const query = `
            SELECT *
            FROM tasks
            WHERE department = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
              AND resolution = 'Done'
              AND archived = 0
        `;

        db.all(query, [], async (err, tasks) => {
            if (err) {
                console.error('Error fetching done tasks for comments check:', err);
                return;
            }

            for (const task of tasks) {
                const tableCommentInfo = await new Promise((resolve, reject) => {
                    db.get(
                        `SELECT * FROM task_comments WHERE taskId = ?`,
                        [task.id],
                        (err2, row) => {
                            if (err2) reject(err2);
                            else resolve(row);
                        }
                    );
                });

                const lastSavedCommentId = tableCommentInfo ? tableCommentInfo.lastCommentId : null;

                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                const commentUrl = `https://jira.${task.source}.team/rest/api/2/issue/${task.id}/comment`;
                const response = await axios.get(commentUrl, {
                    headers: {
                        Authorization: `Bearer ${
                            task.source === 'sxl'
                                ? process.env.JIRA_PAT_SXL
                                : process.env.JIRA_PAT_BETONE
                        }`,
                        Accept: 'application/json'
                    }
                });

                const allComments = response.data.comments || [];
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (–µ—Å–ª–∏ –æ–Ω —á–∏—Å–ª–æ–≤–æ–π)
                allComments.sort((a, b) => parseInt(a.id) - parseInt(b.id));

                let newLastId = lastSavedCommentId;
                for (const comment of allComments) {
                    const commentIdNum = parseInt(comment.id);
                    const lastSavedIdNum = lastSavedCommentId ? parseInt(lastSavedCommentId) : 0;

                    if (commentIdNum > lastSavedIdNum) {
                        // –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        const authorName = comment.author?.displayName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä';
                        const bodyText = comment.body || '';

                        const messageText = `
–í –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

–ó–∞–¥–∞—á–∞: ${task.id}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}
–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}
–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.issueType}

–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${authorName}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${bodyText}
                        `.trim();

                        await bot.api.sendMessage(process.env.ADMIN_CHAT_ID, messageText);

                        if (!newLastId || commentIdNum > parseInt(newLastId)) {
                            newLastId = comment.id;
                        }
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                if (newLastId && newLastId !== lastSavedCommentId) {
                    if (tableCommentInfo) {
                        db.run(
                            `UPDATE task_comments
                             SET lastCommentId = ?, timestamp = ?
                             WHERE taskId = ?`,
                            [newLastId, getMoscowTimestamp(), task.id]
                        );
                    } else {
                        db.run(
                            `INSERT INTO task_comments (taskId, lastCommentId, timestamp)
                             VALUES (?, ?, ?)`,
                            [task.id, newLastId, getMoscowTimestamp()]
                        );
                    }
                }
            }
        });
    } catch (error) {
        console.error('checkNewCommentsInDoneTasks error:', error);
    }
}

/**
 * /report ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º (Done, –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞) –∑–∞ 30 –¥–Ω–µ–π.
 * –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ, –∏ –Ω–µ–∞—Ä—Ö–∏–≤–Ω—ã–µ. 
 */
bot.command('report', async (ctx) => {
    try {
        const thirtyDaysAgo = DateTime.now().setZone('Europe/Moscow')
            .minus({ days: 30 })
            .toFormat('yyyy-MM-dd');

        const query = `
            SELECT assignee
            FROM tasks
            WHERE resolution = 'Done'
              AND department = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
              AND date(dateAdded) >= date(?)
        `;

        db.all(query, [thirtyDaysAgo], async (err, rows) => {
            if (err) {
                console.error('/report error:', err);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.');
                return;
            }

            if (!rows || rows.length === 0) {
                await ctx.reply('–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ.');
                return;
            }

            const stats = {};
            for (const row of rows) {
                const name = row.assignee || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'; 
                if (!stats[name]) stats[name] = 0;
                stats[name]++;
            }

            let reportMessage = '–û—Ç—á—ë—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º (–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n';
            for (const name of Object.keys(stats)) {
                reportMessage += `${name}: ${stats[name]} –∑–∞–¥–∞—á(–∏)\n`;
            }

            await ctx.reply(reportMessage);
        });
    } catch (error) {
        console.error('Error in /report command:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.');
    }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (take_task, comment_task, complete_task).
 * username –≤ –ë–î —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ –§–ò–û, –∞ –Ω–µ Telegram-–Ω–∏–∫.
 */
bot.callbackQuery(/^(take_task|comment_task|complete_task):(.*)$/, async (ctx) => {
    const actionType = ctx.match[1]; // take_task | comment_task | complete_task
    const taskId = ctx.match[2];

    // –ú–∞–ø–∏–º Telegram username -> –§–ò–û
    const realName = mapTelegramUserToName(ctx.from?.username);

    db.run(
        `INSERT INTO user_actions (username, taskId, action, timestamp)
         VALUES (?, ?, ?, ?)`,
        [realName, taskId, actionType, getMoscowTimestamp()],
        (err) => {
            if (err) {
                console.error('Error saving user action:', err);
            }
        }
    );

    let replyText;
    switch (actionType) {
        case 'take_task':
            replyText = `${realName} –≤–∑—è–ª(–∞) –∑–∞–¥–∞—á—É ${taskId} –≤ —Ä–∞–±–æ—Ç—É.`;
            break;
        case 'comment_task':
            replyText = `${realName} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ ${taskId}.`;
            break;
        case 'complete_task':
            replyText = `${realName} –∑–∞–≤–µ—Ä—à–∏–ª(–∞) –∑–∞–¥–∞—á—É ${taskId}.`;
            break;
        default:
            replyText = `${realName} —Å–¥–µ–ª–∞–ª(–∞) –¥–µ–π—Å—Ç–≤–∏–µ: ${actionType}.`;
            break;
    }

    await ctx.answerCallbackQuery(); // —É–±–∏—Ä–∞–µ–º "loading..."
    await ctx.reply(replyText);
});

/**
 * /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ cron-–∑–∞–¥–∞—á.
 */
bot.command('start', async (ctx) => {
    await ctx.reply(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/report - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞).'
    );

    // –°—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∑–∏–º –∑–∞–¥–∞—á–∏
    fetchAndStoreJiraTasks().then(() => sendJiraTasks(ctx));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    cron.schedule('*/2 * * * *', async () => {
        console.log('Checking for new/updated tasks...');
        await fetchAndStoreJiraTasks();
        // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ä–µ–∂–µ —Å–ª–∞—Ç—å sendJiraTasks
        await sendJiraTasks(ctx);
    });
});

/**
 * –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
 */
cron.schedule('*/5 * * * *', async () => {
    console.log('Checking new comments in done tasks...');
    await checkNewCommentsInDoneTasks();
});

/**
 * –ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ 21:00 –∏ 09:00
 */
cron.schedule('0 21 * * *', async () => {
    console.log('Night shift reminder sent.');
    await bot.api.sendMessage(
        process.env.ADMIN_CHAT_ID,
        '–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ó–∞–ø–æ–ª–Ω–∏ —Ç–∏–∫–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω—ã.'
    );
});
cron.schedule('0 9 * * *', async () => {
    console.log('Morning reminder sent.');
    await bot.api.sendMessage(
        process.env.ADMIN_CHAT_ID,
        '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—Ä–æ–≤–µ—Ä—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞—á–Ω–∏ —Å–º–µ–Ω—É.'
    );
});

/**
 * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
 */
bot.start();
