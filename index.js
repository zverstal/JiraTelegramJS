require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const { DateTime } = require('luxon');
const cron = require('node-cron');
const Bottleneck = require('bottleneck');
const express = require('express');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');

// ----------------------------------------------------------------------------------
// 1) –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê, –ë–ê–ó–´, –§–£–ù–ö–¶–ò–ô
// ----------------------------------------------------------------------------------

const bot = new Bot(process.env.BOT_API_KEY);
const db = new sqlite3.Database('tasks.db');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function getMoscowTimestamp() {
    return DateTime.now().setZone('Europe/Moscow').toFormat('yyyy-MM-dd HH:mm:ss');
}

// –°–æ–∑–¥–∞—ë–º –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ SQLite
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS tasks (
        id TEXT PRIMARY KEY,
        title TEXT,
        priority TEXT,
        department TEXT,
        issueType TEXT,
        dateAdded DATETIME,
        lastSent DATETIME,
        source TEXT
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS user_actions (
        username TEXT,
        taskId TEXT,
        action TEXT,
        timestamp DATETIME,
        FOREIGN KEY(taskId) REFERENCES tasks(id)
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS task_comments (
        taskId TEXT PRIMARY KEY,
        lastCommentId TEXT,
        assignee TEXT,
        FOREIGN KEY(taskId) REFERENCES tasks(id)
    )`);
});

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Üí —ç–º–æ–¥–∑–∏
function getPriorityEmoji(priority) {
    const emojis = {
        Blocker: 'üö®',
        High: 'üî¥',
        Medium: 'üü°',
        Low: 'üü¢'
    };
    return emojis[priority] || '';
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è Jira
function getTaskUrl(source, taskId) {
    return `https://jira.${source}.team/browse/${taskId}`;
}

// –ú–∞–ø–ø–∏–Ω–≥ Telegram username ‚Üí –§–ò–û (–ø—Ä–∏–º–µ—Ä)
const usernameMappings = {
    "lipchinski": "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
    "pr0spal": "–ï–≤–≥–µ–Ω–∏–π –®—É—à–∫–æ–≤",
    "fdhsudgjdgkdfg": "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
    "EuroKaufman": "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤",
    "Nikolay_Gonchar": "–ù–∏–∫–æ–ª–∞–π –ì–æ–Ω—á–∞—Ä",
    "KIRILlKxX": "–ö–∏—Ä–∏–ª–ª –ê—Ç–∞–Ω–∏–∑—è–æ–≤",
    "marysh353": "–î–∞–Ω–∏–∏–ª –ú–∞—Ä—ã—à–µ–≤"
};

// –ú–∞–ø–ø–∏–Ω–≥ Telegram username ‚Üí Jira username
const jiraUserMappings = {
    "lipchinski": { "sxl": "d.selivanov", "betone": "dms" },
    "pr0spal": { "sxl": "e.shushkov", "betone": "es" },
    "fdhsudgjdgkdfg": { "sxl": "d.maslov", "betone": "dam" },
    "EuroKaufman": { "sxl": "d.baratov", "betone": "db" },
    "Nikolay_Gonchar": { "sxl": "n.gonchar", "betone": "ng" },
    "KIRILlKxX": { "sxl": "k.ataniyazov", "betone": "ka" },
    "marysh353": { "sxl": "d.maryshev", "betone": "dma" }
};

// ----------------------------------------------------------------------------------
// 2) –ó–ê–ü–£–°–ö–ê–ï–ú EXPRESS –î–õ–Ø –†–ê–ó–î–ê–ß–ò –í–õ–û–ñ–ï–ù–ò–ô
// ----------------------------------------------------------------------------------

const app = express();
const ATTACHMENTS_DIR = path.join(__dirname, 'attachments');

// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç
if (!fs.existsSync(ATTACHMENTS_DIR)) {
    fs.mkdirSync(ATTACHMENTS_DIR);
}

// –†–∞–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏–∫—É –ø–æ –ø—É—Ç–∏ /attachments
app.use('/attachments', express.static(ATTACHMENTS_DIR));

// –î–æ–ø—É—Å—Ç–∏–º, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –ø–æ—Ä—Ç—É 3000
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Express server listening on port ${PORT}`);
});

// ----------------------------------------------------------------------------------
// 3) –ö–†–û–ù –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –°–¢–ê–†–´–• –§–ê–ô–õ–û–í –†–ê–ó –í –°–£–¢–ö–ò (–≤ 3:00)
// ----------------------------------------------------------------------------------

cron.schedule('0 3 * * *', () => {
    console.log('[CRON] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ attachments...');
    const now = Date.now();
    const cutoff = now - 24 * 60 * 60 * 1000; // —Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫

    fs.readdir(ATTACHMENTS_DIR, (err, files) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ attachments:', err);
            return;
        }
        files.forEach(file => {
            const filePath = path.join(ATTACHMENTS_DIR, file);
            fs.stat(filePath, (statErr, stats) => {
                if (statErr) {
                    console.error('–û—à–∏–±–∫–∞ fs.stat:', statErr);
                    return;
                }
                if (stats.mtimeMs < cutoff) {
                    fs.unlink(filePath, delErr => {
                        if (delErr) {
                            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', delErr);
                        } else {
                            console.log(`–§–∞–π–ª ${file} —É–¥–∞–ª—ë–Ω (—Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫)`);
                        }
                    });
                }
            });
        });
    });
}, {
    timezone: 'Europe/Moscow'
});

// ----------------------------------------------------------------------------------
// 4) –§–£–ù–ö–¶–ò–ò –î–õ–Ø RABOT–´ –° JIRA
// ----------------------------------------------------------------------------------

// 4.1) –§–µ—Ç—á–∏–º –∑–∞–¥–∞—á–∏ –∏–∑ Jira (—Å—Ä–∞–∑—É –∏–∑ 2 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
async function fetchAndStoreJiraTasks() {
    await fetchAndStoreTasksFromJira('sxl', 'https://jira.sxl.team/rest/api/2/search', process.env.JIRA_PAT_SXL, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
    await fetchAndStoreTasksFromJira('betone', 'https://jira.betone.team/rest/api/2/search', process.env.JIRA_PAT_BETONE, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
}

async function fetchAndStoreTasksFromJira(source, url, pat, ...departments) {
    try {
        console.log(`Fetching tasks from ${source} Jira...`);
        const departmentQuery = departments.map(dep => `"${dep}"`).join(" OR –û—Ç–¥–µ–ª = ");
        let jql;

        if (source === 'sxl') {
            jql = `
                project = SUPPORT AND (
                    (issuetype = Infra AND status = "Open") OR
                    (issuetype = Office AND status = "Under review") OR
                    (issuetype = Office AND status = "Waiting for support") OR
                    (issuetype = Prod AND status = "Waiting for Developers approval") OR
                    (–û—Ç–¥–µ–ª = ${departmentQuery} AND status = "Open")
                )
            `;
        } else {
            jql = `project = SUPPORT AND (–û—Ç–¥–µ–ª = ${departmentQuery}) AND status = "Open"`;
        }

        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            },
            params: { jql }
        });
        console.log(`${source} Jira API response:`, response.data);

        const fetchedTaskIds = response.data.issues.map(i => i.key);

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –ª–∏—à–Ω–∏–µ
        await new Promise((resolve, reject) => {
            const placeholders = fetchedTaskIds.map(() => '?').join(',');
            db.run(
                `DELETE FROM tasks WHERE id NOT IN (${placeholders}) AND source = ?`,
                [...fetchedTaskIds, source],
                function(err) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                }
            );
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º / –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        for (const issue of response.data.issues) {
            const task = {
                id: issue.key,
                title: issue.fields.summary,
                priority: issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                issueType: issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                department: (
                    (source === 'betone' && issue.fields.customfield_10504)
                        ? issue.fields.customfield_10504.value
                        : (
                            (source === 'sxl' && issue.fields.customfield_10500)
                                ? issue.fields.customfield_10500.value
                                : '–ù–µ —É–∫–∞–∑–∞–Ω'
                        )
                ),
                dateAdded: getMoscowTimestamp(),
                source
            };

            const existingTask = await new Promise((resolve, reject) => {
                db.get('SELECT * FROM tasks WHERE id = ?', [task.id], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });

            if (existingTask) {
                db.run(
                    `UPDATE tasks SET title=?, priority=?, issueType=?, department=?, source=? WHERE id=?`,
                    [task.title, task.priority, task.issueType, task.department, task.source, task.id]
                );
            } else {
                db.run(
                    `INSERT INTO tasks (id, title, priority, issueType, department, dateAdded, lastSent, source)
                     VALUES (?, ?, ?, ?, ?, ?, NULL, ?)`,
                    [task.id, task.title, task.priority, task.issueType, task.department, task.dateAdded, task.source]
                );
            }
        }
    } catch (error) {
        console.error(`Error fetching and storing tasks from ${source} Jira:`, error);
    }
}

async function getJiraTaskDetails(source, taskId) {
    try {
        const url = `https://jira.${source}.team/rest/api/2/issue/${taskId}?fields=summary,description,attachment`;
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            }
        });
        return response.data;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ ${taskId} –∏–∑ Jira (${source}):`, error);
        return null;
    }
}

// ----------------------------------------------------------------------------------
// 5) –û–¢–ü–†–ê–í–ö–ê –ó–ê–î–ê–ß –í TELEGRAM
// ----------------------------------------------------------------------------------
async function sendJiraTasks(ctx) {
    const today = getMoscowTimestamp().split(' ')[0];
    const query = `
        SELECT * FROM tasks WHERE
        (department = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" AND (lastSent IS NULL OR lastSent < date('${today}')))
        OR
        (issueType IN ('Infra', 'Office', 'Prod') AND (lastSent IS NULL OR lastSent < datetime('now', '-3 days')))
        ORDER BY CASE
            WHEN department = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' THEN 1
            ELSE 2
        END
    `;

    db.all(query, [], async (err, rows) => {
        if (err) {
            console.error('Error fetching tasks:', err);
            return;
        }

        for (const task of rows) {
            const keyboard = new InlineKeyboard();
            if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                keyboard
                    .text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`)
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id))
                    .text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
            } else if (['Infra', 'Office', 'Prod'].includes(task.issueType)) {
                keyboard
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id))
                    .text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
            }

            const messageText =
                `–ó–∞–¥–∞—á–∞: ${task.id}\n` +
                `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n` +
                `–°—Å—ã–ª–∫–∞: ${getTaskUrl(task.source, task.id)}\n` +
                `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n` +
                `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n` +
                `–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.issueType}`;

            await ctx.reply(messageText, { reply_markup: keyboard });

            const moscowTimestamp = getMoscowTimestamp();
            db.run('UPDATE tasks SET lastSent = ? WHERE id = ?', [moscowTimestamp, task.id]);
        }
    });
}

// ----------------------------------------------------------------------------------
// 6) –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
// ----------------------------------------------------------------------------------
async function checkForNewComments() {
    try {
        const jql = `project = SUPPORT AND –û—Ç–¥–µ–ª = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" AND status in (Done, Awaiting, "Awaiting implementation") AND updated >= -2d`;
        const sources = ['sxl', 'betone'];

        const excludedAuthors = Object.values(jiraUserMappings).flatMap(mapping => Object.values(mapping));

        for (const source of sources) {
            const url = `https://jira.${source}.team/rest/api/2/search`;
            const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

            let startAt = 0;
            let total = 0;

            do {
                const response = await axios.get(url, {
                    headers: { 'Authorization': `Bearer ${pat}`, 'Accept': 'application/json' },
                    params: { jql, maxResults: 50, startAt, fields: 'comment,assignee,summary,priority,issuetype' }
                });

                total = response.data.total;
                const issues = response.data.issues;

                for (const issue of issues) {
                    const taskId = issue.key;
                    const comments = issue.fields.comment.comments;
                    if (!comments || comments.length === 0) continue;

                    const lastComment = comments[comments.length - 1];
                    const lastCommentId = lastComment.id;
                    const author = lastComment.author?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';

                    db.get('SELECT lastCommentId FROM task_comments WHERE taskId = ?', [taskId], (err, row) => {
                        if (err) {
                            console.error('Error fetching last comment from DB:', err);
                            return;
                        }

                        if (!row) {
                            // –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, –∑–Ω–∞—á–∏—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–∑
                            if (!excludedAuthors.includes(author)) {
                                sendTelegramMessage(taskId, source, issue, lastComment, author);
                            }
                            db.run(
                                `INSERT INTO task_comments (taskId, lastCommentId, assignee) VALUES (?, ?, ?)`,
                                [taskId, lastCommentId, issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω']
                            );
                        } else if (row.lastCommentId !== lastCommentId) {
                            // –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç
                            if (!excludedAuthors.includes(author)) {
                                sendTelegramMessage(taskId, source, issue, lastComment, author);
                            }
                            db.run(
                                `UPDATE task_comments SET lastCommentId = ?, assignee = ? WHERE taskId = ?`,
                                [lastCommentId, issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω', taskId]
                            );
                        }
                    });
                }

                startAt += 50;
            } while (startAt < total);
        }
    } catch (error) {
        console.error('Error checking for new comments:', error);
    }
}

// –õ–∏–º–∏—Ç–µ—Ä –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
const limiter = new Bottleneck({
    minTime: 2000,
    maxConcurrent: 1
});
const sendMessageWithLimiter = limiter.wrap(async (chatId, text, opts) => {
    await bot.api.sendMessage(chatId, text, opts);
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
function sendTelegramMessage(taskId, source, issue, lastComment, author) {
    const keyboard = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(source, taskId));

    const msg =
        `–í –∑–∞–¥–∞—á–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n` +
        `–ó–∞–¥–∞—á–∞: ${taskId}\n` +
        `–ò—Å—Ç–æ—á–Ω–∏–∫: ${source}\n` +
        `–°—Å—ã–ª–∫–∞: ${getTaskUrl(source, taskId)}\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${issue.fields.summary}\n` +
        `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω')}\n` +
        `–¢–∏–ø –∑–∞–¥–∞—á–∏: ${issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${author}\n` +
        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${lastComment.body}`;

    sendMessageWithLimiter(process.env.ADMIN_CHAT_ID, msg, { reply_markup: keyboard })
        .catch(e => console.error('Error sending message to Telegram:', e));
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
cron.schedule('*/5 * * * *', () => {
    console.log('Checking for new comments...');
    checkForNewComments();
});

// ----------------------------------------------------------------------------------
// 7) –ö–ù–û–ü–ö–ê "–í–ó–Ø–¢–¨ –í –†–ê–ë–û–¢–£"
// ----------------------------------------------------------------------------------
bot.callbackQuery(/^take_task:(.+)$/, async (ctx) => {
    try {
        await ctx.answerCallbackQuery();
        const taskId = ctx.match[1];
        const username = ctx.from.username;

        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], async (err, task) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
                return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
            }
            if (!task) {
                try {
                    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                } catch {}
                return ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            }

            if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                let success = false;
                try {
                    success = await updateJiraTaskStatus(task.source, taskId, username);
                } catch (errUpd) {
                    console.error('–û—à–∏–±–∫–∞ updateJiraTaskStatus:', errUpd);
                }

                if (success) {
                    const displayName = usernameMappings[username] || username;
                    const msg =
                        `–ó–∞–¥–∞—á–∞: ${task.id}\n` +
                        `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n` +
                        `–°—Å—ã–ª–∫–∞: ${getTaskUrl(task.source, task.id)}\n` +
                        `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n` +
                        `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n` +
                        `–û—Ç–¥–µ–ª: ${task.department}\n` +
                        `–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: ${displayName}`;

                    try {
                        await ctx.editMessageText(msg);
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ editMessageText:', e);
                    }

                    db.run(`INSERT INTO user_actions (username, taskId, action, timestamp) VALUES (?, ?, ?, ?)`,
                        [username, taskId, 'take_task', getMoscowTimestamp()]);
                } else {
                    await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${taskId}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
                }
            } else {
                await ctx.reply('–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –¥–ª—è –æ—Ç–¥–µ–ª–∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç.');
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ take_task:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
async function updateJiraTaskStatus(source, taskId, telegramUsername) {
    try {
        let transitionId = source === 'sxl' ? '221' : '201'; // –ü—Ä–∏–º–µ—Ä
        const jiraUsername = jiraUserMappings[telegramUsername]?.[source];
        if (!jiraUsername) {
            console.error(`No Jira username for telegram user: ${telegramUsername}`);
            return false;
        }
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const assigneeUrl = `https://jira.${source}.team/rest/api/2/issue/${taskId}/assignee`;
        const r1 = await axios.put(assigneeUrl, { name: jiraUsername }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json'
            }
        });
        if (r1.status !== 204) {
            console.error('Assignee error:', r1.status);
            return false;
        }

        // –î–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
        const transitionUrl = `https://jira.${source}.team/rest/api/2/issue/${taskId}/transitions`;
        const r2 = await axios.post(transitionUrl, {
            transition: { id: transitionId }
        }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json'
            }
        });
        return r2.status === 204;
    } catch (error) {
        console.error(`Error updating Jira task:`, error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
function escapeHtml(text) {
    return text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Markdown-—Ç–∞–±–ª–∏—Ü –≤ Box Drawing ASCII
function convertMarkdownTableToBoxDrawing(markdownTable) {
    const lines = markdownTable.trim().split('\n');
    const headers = lines[0].split('|').map(header => header.trim()).filter(header => header);
    const alignments = lines[1].split('|').map(header => header.trim()).filter(header => header);
    const rows = lines.slice(2).map(line => line.split('|').map(cell => cell.trim()).filter(cell => cell));

    const columnWidths = headers.map((header, i) => {
        return Math.max(header.length, ...rows.map(row => row[i].length));
    });

    const drawLine = (char, junction, start, end) => {
        return start + columnWidths.map(width => char.repeat(width + 2)).join(junction) + end;
    };

    const drawRow = (cells, left, middle, right, alignments) => {
        return left + cells.map((cell, i) => {
            const width = columnWidths[i];
            if (alignments[i].startsWith(':') && alignments[i].endsWith(':')) {
                return ' ' + cell.padStart((width + cell.length) / 2).padEnd(width) + ' ';
            } else if (alignments[i].endsWith(':')) {
                return ' ' + cell.padStart(width) + ' ';
            } else {
                return ' ' + cell.padEnd(width) + ' ';
            }
        }).join(middle) + right;
    };

    const topLine = drawLine('‚îÄ', '‚î¨', '‚îå', '‚îê');
    const headerLine = drawRow(headers, '‚îÇ', '‚îÇ', '‚îÇ', alignments);
    const separatorLine = drawLine('‚îÄ', '‚îº', '‚îú', '‚î§');
    const bottomLine = drawLine('‚îÄ', '‚î¥', '‚îî', '‚îò');
    const bodyLines = rows.map(row => drawRow(row, '‚îÇ', '‚îÇ', '‚îÇ', alignments));

    return `<pre>${[topLine, headerLine, separatorLine, ...bodyLines, bottomLine].join('\n')}</pre>`;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
function convertCodeBlocks(text) {
    return text
        .replace(/\{code:([\w\-]+)\}([\s\S]*?)\{code\}/g, (match, lang, code) => {
            return `<pre><code class="language-${lang}">${escapeHtml(code.trim())}</code></pre>`;
        })
        .replace(/\{code\}([\s\S]*?)\{code\}/g, (match, code) => {
            return `<pre><code>${escapeHtml(code.trim())}</code></pre>`;
        });
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Markdown –≤ HTML
function parseCustomMarkdown(text) {
    if (!text) return '';

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ Box Drawing ASCII
    text = text.replace(/\n(\|.*\|)\n(\|[-:|]+\|)\n([\s\S]*?)(?=\n\n|\n*$)/g, (match, table) => {
        return convertMarkdownTableToBoxDrawing(table);
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
    text = convertCodeBlocks(text);

    return text
        .replace(/\*\*(.*?)\*\*/g, '<b>$1</b>')  // **–ñ–∏—Ä–Ω—ã–π**
        .replace(/\*(.*?)\*/g, '<i>$1</i>')      // *–ö—É—Ä—Å–∏–≤*
        .replace(/__(.*?)__/g, '<u>$1</u>')      // __–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__
        .replace(/~~(.*?)~~/g, '<s>$1</s>')      // ~~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~~
        .replace(/(^|\s)`([^`]+)`(\s|$)/g, '$1<code>$2</code>$3') // `–ò–Ω–ª–∞–π–Ω-–∫–æ–¥`
        .replace(/^\-\s(.*)/gm, '‚Ä¢ $1')         // - –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        .replace(/^\*\s(.*)/gm, '‚Ä¢ $1')         // * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        .replace(/^\d+\.\s(.*)/gm, 'üîπ $1')     // 1. –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        .replace(/\n{3,}/g, '\n\n');            // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è \n\n\n
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è
function formatDescriptionAsHtml(rawDescription) {
    return parseCustomMarkdown(rawDescription || '');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ / –°–∫—Ä—ã—Ç—å"
bot.callbackQuery(/^toggle_description:(.+)$/, async (ctx) => {
    try {
        await ctx.answerCallbackQuery();
        const taskId = ctx.match[1];

        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], async (err, task) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã:', err);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
                return;
            }
            if (!task) {
                await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }

            const issue = await getJiraTaskDetails(task.source, task.id);
            if (!issue) {
                await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Jira.');
                return;
            }

            const summary = issue.fields.summary || '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞';
            const fullDescription = issue.fields.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
            const priorityEmoji = getPriorityEmoji(task.priority);
            const taskUrl = getTaskUrl(task.source, task.id);

            const safeSummary = escapeHtml(summary);
            const safeDescription = formatDescriptionAsHtml(fullDescription);
            const safeTitle = escapeHtml(task.title);

            const currentText = ctx.callbackQuery.message?.text.trimEnd() || "";
            const isExpanded = currentText.endsWith("...");

            if (!isExpanded) {
                const expandedText = 
                    `<b>–ó–∞–¥–∞—á–∞:</b> ${task.id}\n` +
                    `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${task.source}\n` +
                    `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priorityEmoji} ${task.priority}\n` +
                    `<b>–¢–∏–ø:</b> ${task.issueType}\n` +
                    `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${safeSummary}\n\n` +
                    `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${safeDescription}\n\n` +
                    `...`;

                const keyboard = new InlineKeyboard()
                    .text('–°–∫—Ä—ã—Ç—å', `toggle_description:${task.id}`)
                    .url('–û—Ç–∫—Ä—ã—Ç—å –≤ Jira', taskUrl);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
                const attachments = issue.fields.attachment || [];
                let counter = 1;
                for (const att of attachments) {
                    try {
                        const fileResp = await axios.get(att.content, {
                            responseType: 'arraybuffer',
                            headers: {
                                'Authorization': `Bearer ${
                                    task.source === 'sxl'
                                        ? process.env.JIRA_PAT_SXL
                                        : process.env.JIRA_PAT_BETONE
                                }`
                            }
                        });

                        let originalFilename = att.filename || 'file.bin';
                        originalFilename = originalFilename.replace(/[^\w.\-]/g, '_').substring(0, 100);
                        const finalName = `${uuidv4()}_${originalFilename}`;
                        const filePath = path.join(ATTACHMENTS_DIR, finalName);
                        fs.writeFileSync(filePath, fileResp.data);

                        const publicUrl = `${process.env.PUBLIC_BASE_URL}/attachments/${finalName}`;

                        keyboard.row().url(`–í–ª–æ–∂–µ–Ω–∏–µ #${counter}`, publicUrl);
                        counter++;
                    } catch (errAttach) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏—è:', errAttach);
                    }
                }

                await ctx.editMessageText(expandedText, {
                    parse_mode: 'HTML',
                    reply_markup: keyboard
                });

            } else {
                const collapsedText = 
                    `<b>–ó–∞–¥–∞—á–∞:</b> ${task.id}\n` +
                    `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${task.source}\n` +
                    `<b>–°—Å—ã–ª–∫–∞:</b> <a href="${taskUrl}">${taskUrl}</a>\n` +
                    `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${safeTitle}\n` +
                    `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priorityEmoji} ${task.priority}\n` +
                    `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${task.issueType}\n` +
                    ` `;

                const keyboard = new InlineKeyboard();
                if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                    keyboard
                        .text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`)
                        .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', taskUrl)
                        .text('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
                } else if (['Infra', 'Office', 'Prod'].includes(task.issueType)) {
                    keyboard
                        .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', taskUrl)
                        .text('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
                }

                await ctx.editMessageText(collapsedText, {
                    parse_mode: 'HTML',
                    reply_markup: keyboard
                });
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ toggle_description:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
    }
});


// ----------------------------------------------------------------------------------
// 9) –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° CONFLUENCE (–î–ï–ñ–£–†–ù–´–ô)
// ----------------------------------------------------------------------------------
async function fetchDutyEngineer() {
    try {
        const pageId = '3539406'; // –ø—Ä–∏–º–µ—Ä
        const token = process.env.CONFLUENCE_API_TOKEN;

        const resp = await axios.get(`https://wiki.sxl.team/rest/api/content/${pageId}?expand=body.view`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        const html = resp.data?.body?.view?.value;
        if (!html) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –∏–∑ body.view.value');
            return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
        }

        const rowRegex = /<(?:tr|TR)[^>]*>\s*<td[^>]*>(\d+)<\/td>\s*<td[^>]*>(\d{2}\.\d{2}-\d{2}\.\d{2})<\/td>\s*<td[^>]*>([^<]+)<\/td>/g;
        const schedule = [];
        let match;
        while ((match = rowRegex.exec(html)) !== null) {
            schedule.push({
                index: match[1],
                range: match[2],
                name: match[3].trim()
            });
        }

        if (schedule.length === 0) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –∏–∑ HTML.');
            return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
        }

        const nowStr = getMoscowTimestamp();
        const today = DateTime.fromFormat(nowStr, 'yyyy-MM-dd HH:mm:ss');

        for (const item of schedule) {
            const [startStr, endStr] = item.range.split('-');
            const [startDay, startMonth] = startStr.split('.');
            const [endDay, endMonth] = endStr.split('.');
            const year = 2025; // –ø—Ä–∏–º–µ—Ä

            const startDate = DateTime.fromObject({ year, month: +startMonth, day: +startDay });
            const endDate = DateTime.fromObject({ year, month: +endMonth, day: +endDay });

            if (today >= startDate && today <= endDate) {
                return item.name;
            }
        }
        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Confluence:', error);
        throw error;
    }
}

bot.command('duty', async (ctx) => {
    try {
        const engineer = await fetchDutyEngineer();
        await ctx.reply(`–î–µ–∂—É—Ä–Ω—ã–π: ${engineer}`);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ duty:', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ.');
    }
});

// ----------------------------------------------------------------------------------
// 10) –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–û–ß–ù–û–ô –ò –£–¢–†–ï–ù–ù–ï–ô –°–ú–ï–ù–´
// ----------------------------------------------------------------------------------
let interval = null;
let nightShiftCron = null;
let morningShiftCron = null;

bot.command('start', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...');

    if (!interval) {
        interval = setInterval(async () => {
            console.log('Interval triggered. Fetching + Sending Jira tasks...');
            await fetchAndStoreJiraTasks();
            await sendJiraTasks(ctx);
            console.log('Jira tasks sent.');
        }, 60000);
    } else {
        await ctx.reply('–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω.');
    }

    if (!nightShiftCron) {
        nightShiftCron = cron.schedule('0 1 * * *', async () => {
            await bot.api.sendMessage(process.env.ADMIN_CHAT_ID, '–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ó–∞–ø–æ–ª–Ω–∏ —Ç–∏–∫–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω—ã.');
        }, { scheduled: true, timezone: 'Europe/Moscow' });

        if (!morningShiftCron) {
            morningShiftCron = cron.schedule('0 10 * * *', async () => {
                try {
                    const engineer = await fetchDutyEngineer();
                    await bot.api.sendMessage(
                        process.env.ADMIN_CHAT_ID,
                        `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—Ä–æ–≤–µ—Ä—å –∑–∞–¥–∞—á–∏.\n–î–µ–∂—É—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${engineer}`
                    );
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–∂—É—Ä–Ω–æ–≥–æ:', err);
                }
            }, { scheduled: true, timezone: 'Europe/Moscow' });
        }
        nightShiftCron.start();
        morningShiftCron.start();
    }

    // Debug –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ task_comments
    db.all('SELECT taskId FROM task_comments', [], async (err, rows) => {
        if (err) {
            console.error('Error fetching task_comments:', err);
            return;
        }
        console.log(`Total task_comments in database: ${rows.length}`);
    });
});

// ----------------------------------------------------------------------------------
// 11) –°–¢–ê–†–¢ –ë–û–¢–ê
// ----------------------------------------------------------------------------------
bot.start();
