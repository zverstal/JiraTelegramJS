require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();

const bot = new Bot(process.env.BOT_API_KEY);
const db = new sqlite3.Database('tasks.db');

db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS tasks (
        id TEXT PRIMARY KEY,
        title TEXT,
        priority TEXT,
        department TEXT,
        lastSent DATE
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS user_actions (
        username TEXT,
        taskId TEXT,
        action TEXT,
        timestamp DATE,
        FOREIGN KEY(taskId) REFERENCES tasks(id)
    )`);
});

function getPriorityEmoji(priority) {
    const emojis = {
        Blocker: 'üö®',
        High: 'üî¥',
        Medium: 'üü°',
        Low: 'üü¢'
    };
    return emojis[priority] || '';
}

async function fetchJiraTaskStatus(taskId) {
    try {
        const response = await axios.get(`https://jira.sxl.team/rest/api/2/issue/${taskId}`, {
            headers: {
                'Authorization': `Bearer ${process.env.JIRA_PAT}`,
                'Accept': 'application/json'
            }
        });
        return response.data.fields.status.name;
    } catch (error) {
        console.error('Error fetching Jira task status:', error);
        return null;
    }
}

async function sendJiraTasks(ctx) {
    const isWeekend = [0, 6].includes(new Date().getDay());
    const query = `SELECT * FROM tasks WHERE ${isWeekend ? 'department = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"' : '1=1'} AND lastSent < datetime("now", "-3 days")`;

    db.all(query, [], async (err, rows) => {
        if (err) {
            throw err;
        }
        for (const task of rows) {
            const currentStatus = await fetchJiraTaskStatus(task.id);
            if (!currentStatus || currentStatus !== 'Open') {
                db.run('DELETE FROM tasks WHERE id = ?', [task.id]);
                continue;
            }

            const keyboard = new InlineKeyboard()
                .text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`)
                .text('–í –∫—É—Ä—Å–µ', `aware_task:${task.id}`);

            const messageText = `–ó–∞–¥–∞—á–∞: ${task.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n–û—Ç–¥–µ–ª: ${task.department}`;
            await ctx.reply(messageText, { reply_markup: keyboard });

            db.run('UPDATE tasks SET lastSent = ? WHERE id = ?', [new Date(), task.id]);
        }
    });
}

bot.command('start', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.');
    sendJiraTasks(ctx);
    setInterval(() => sendJiraTasks(ctx), 86400000); // 24 —á–∞—Å–∞
});

const usernameMappings = {
    "lipchinski": "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
    "YurkovOfficial": "–ü—ë—Ç—Ä –Æ—Ä–∫–æ–≤",
    "Jlufi": "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
    "EuroKaufman": "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤"
};

bot.callbackQuery(/^take_task:(.+)$/, async (ctx) => {
    const taskId = ctx.match[1];
    const success = await updateJiraTaskStatus(taskId);
    if (success) {
        const username = usernameMappings[ctx.from.username] || ctx.from.username;
        await ctx.editMessageText(`–ó–∞–¥–∞—á–∞ ${taskId} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${username}.`);
        db.run('INSERT INTO user_actions (username, taskId, action, timestamp) VALUES (?, ?, ?, ?)', [ctx.from.username, taskId, 'take_task', new Date()]);
    } else {
        await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É ${taskId} –≤ —Ä–∞–±–æ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
    }
});


bot.callbackQuery(/^aware_task:(.+)$/, async (ctx) => {
    const taskId = ctx.match[1];
    db.run('INSERT INTO user_actions (username, taskId, action, timestamp) VALUES (?, ?, ?, ?)', [ctx.from.username, taskId, 'aware_task', new Date()]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç–º–µ—Ç–∏–≤—à–∏—Ö –∑–∞–¥–∞—á—É –∫–∞–∫ '–≤ –∫—É—Ä—Å–µ'
    db.all('SELECT DISTINCT username FROM user_actions WHERE taskId = ? AND action = "aware_task"', [taskId], (err, rows) => {
        if (err) {
            console.error('Error fetching aware users:', err);
            return;
        }
        const awareUsers = rows.map(row => usernameMappings[row.username] || row.username).join(', ');
        const updatedMessage = `–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤ –∫—É—Ä—Å–µ –∑–∞–¥–∞—á–∏: ${awareUsers}`;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        ctx.editMessageText(updatedMessage);
    });

    db.run('UPDATE tasks SET lastSent = datetime("now", "+3 days") WHERE id = ?', [taskId]);
});


async function updateJiraTaskStatus(taskId) {
    try {
        const transitionId = '221'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID
        const transitionResponse = await axios.post(`https://jira.sxl.team/rest/api/2/issue/${taskId}/transitions`, {
            transition: {
                id: transitionId
            }
        }, {
            headers: {
                'Authorization': `Bearer ${process.env.JIRA_PAT}`,
                'Content-Type': 'application/json'
            }
        });
        return transitionResponse.status === 204;
    } catch (error) {
        console.error('Error updating Jira task:', error);
        return false;
    }
}

bot.start();
