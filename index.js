// index.js

require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const { conversations, createConversation } = require('@grammyjs/conversations');
const { session } = require('grammy');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const { DateTime } = require('luxon');
const cron = require('node-cron');
const Bottleneck = require('bottleneck');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);
console.log('Bot is starting...');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
bot.use(session({ initial: () => ({}) }));
bot.use(conversations());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Bottleneck
const limiter = new Bottleneck({
    maxConcurrent: 1, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    minTime: 1000 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (1 —Å–µ–∫—É–Ω–¥–∞)
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
const db = new sqlite3.Database('tasks.db', (err) => {
    if (err) {
        console.error('Could not connect to database', err);
    } else {
        console.log('Connected to SQLite database.');
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
db.serialize(() => {
    db.run(`
        CREATE TABLE IF NOT EXISTS tasks (
            id TEXT PRIMARY KEY,
            title TEXT,
            priority TEXT,
            department TEXT,
            issueType TEXT,
            resolution TEXT,
            assignee TEXT,
            dateAdded DATETIME,
            lastSent DATETIME,
            source TEXT,
            archived INTEGER DEFAULT 0,
            archivedDate DATETIME
        )
    `);

    db.run(`
        CREATE TABLE IF NOT EXISTS user_actions (
            username TEXT,
            taskId TEXT,
            action TEXT,
            timestamp DATETIME,
            FOREIGN KEY(taskId) REFERENCES tasks(id)
        )
    `);

    db.run(`
        CREATE TABLE IF NOT EXISTS task_comments (
            taskId TEXT,
            lastCommentId TEXT,
            timestamp DATETIME,
            FOREIGN KEY(taskId) REFERENCES tasks(id)
        )
    `);
});

// –ö–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: Telegram –Ω–∏–∫ -> –§–ò–û –∏ Jira –ª–æ–≥–∏–Ω—ã.
const userMappings = {
    lipchinski: {
        name: "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
        sxl: "d.selivanov",
        betone: "dms"
    },
    pr0spal: {
        name: "–ï–≤–≥–µ–Ω–∏–π –®—É—à–∫–æ–≤",
        sxl: "e.shushkov",
        betone: "es"
    },
    fdhsudgjdgkdfg: {
        name: "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
        sxl: "d.maslov",
        betone: "dam"
    },
    EuroKaufman: {
        name: "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤",
        sxl: "d.baratov",
        betone: "db"
    },
    Nikolay_Gonchar: {
        name: "–ù–∏–∫–æ–ª–∞–π –ì–æ–Ω—á–∞—Ä",
        sxl: "n.gonchar",
        betone: "ng"
    },
    KIRILlKxX: {
        name: "–ö–∏—Ä–∏–ª–ª –ê—Ç–∞–Ω–∏–∑—è–æ–≤",
        sxl: "k.ataniyazov",
        betone: "ka"
    },
    marysh353: {
        name: "–î–∞–Ω–∏–∏–ª –ú–∞—Ä—ã—à–µ–≤",
        sxl: "d.maryshev",
        betone: "dma"
    }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç Telegram username -> –§–ò–û.
 */
function mapTelegramUserToName(tgUsername) {
    if (!tgUsername || !userMappings[tgUsername]) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    return userMappings[tgUsername].name;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç Jira-–ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
 */
function getJiraUsername(tgUsername, source) {
    if (!tgUsername || !userMappings[tgUsername]) return null;
    if (source === 'sxl') return userMappings[tgUsername].sxl;
    if (source === 'betone') return userMappings[tgUsername].betone;
    return null;
}

/**
 * –≠–º–æ–¥–∂–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.
 */
function getPriorityEmoji(priority) {
    const map = {
        Blocker: 'üö®',
        High: 'üî¥',
        Medium: 'üü°',
        Low: 'üü¢'
    };
    return map[priority] || '';
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É-–≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'yyyy-MM-dd HH:mm:ss'.
 */
function getMoscowTimestamp() {
    return DateTime.now().setZone('Europe/Moscow').toFormat('yyyy-MM-dd HH:mm:ss');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ Jira –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
 */
async function fetchAndStoreJiraTasks() {
    await fetchAndStoreTasksFromJira('sxl', 'https://jira.sxl.team/rest/api/2/search', process.env.JIRA_PAT_SXL);
    await fetchAndStoreTasksFromJira('betone', 'https://jira.betone.team/rest/api/2/search', process.env.JIRA_PAT_BETONE);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Jira.
 * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ Jira ('sxl' –∏–ª–∏ 'betone').
 * @param {string} url - URL API Jira.
 * @param {string} pat - Personal Access Token –¥–ª—è Jira.
 */
async function fetchAndStoreTasksFromJira(source, url, pat) {
    try {
        console.log(`Fetching tasks from ${source} Jira...`);

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ departmentQuery
        const departmentQuery = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JQL —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ
        const jql = `
            project = SUPPORT AND (
                (issuetype = Infra AND status = "Open") OR
                (issuetype = Office AND status in ("Under review", "Waiting for support")) OR
                (issuetype = Prod AND status = "Waiting for Developers approval") OR
                (–û—Ç–¥–µ–ª = "${departmentQuery}" AND status = "Open")
            )
        `;

        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            },
            params: { jql }
        });

        const fetchedIssues = response.data.issues || [];
        const fetchedTaskIds = fetchedIssues.map(issue => issue.key);

        for (const issue of fetchedIssues) {
            const fields = issue.fields;

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ department –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç source
            let department = '–ù–µ —É–∫–∞–∑–∞–Ω';
            if (source === 'sxl') {
                // –î–ª—è SXL –∏—Å–ø–æ–ª—å–∑—É–µ–º customfield_10500
                department = fields.customfield_10500?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
            } else if (source === 'betone') {
                // –î–ª—è BetOne –∏—Å–ø–æ–ª—å–∑—É–µ–º customfield_10504
                department = fields.customfield_10504?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
            }

            const resolution = fields.resolution?.name || '';
            const assigneeKey = fields.assignee?.name || '';  // –ù–∞–ø—Ä–∏–º–µ—Ä, "d.selivanov"
            const assigneeMapped = Object.values(userMappings).find(um => um.sxl === assigneeKey || um.betone === assigneeKey);
            const assigneeName = assigneeMapped ? assigneeMapped.name : '';

            const taskData = {
                id: issue.key,
                title: fields.summary,
                priority: fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                issueType: fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                department,
                resolution,
                assignee: assigneeName,
                source
            };

            const existingTask = await new Promise((resolve, reject) => {
                db.get('SELECT * FROM tasks WHERE id = ?', [taskData.id], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });

            if (existingTask) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
                db.run(
                    `UPDATE tasks
                     SET title = ?,
                         priority = ?,
                         issueType = ?,
                         department = ?,
                         resolution = ?,
                         assignee = ?,
                         source = ?,
                         archived = 0 -- –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                     WHERE id = ?`,
                    [
                        taskData.title,
                        taskData.priority,
                        taskData.issueType,
                        taskData.department,
                        taskData.resolution,
                        taskData.assignee,
                        taskData.source,
                        taskData.id
                    ]
                );
            } else {
                // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                db.run(
                    `INSERT INTO tasks
                     (id, title, priority, issueType, department, resolution, assignee, dateAdded, lastSent, source, archived, archivedDate)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, 0, NULL)`,
                    [
                        taskData.id,
                        taskData.title,
                        taskData.priority,
                        taskData.issueType,
                        taskData.department,
                        taskData.resolution,
                        taskData.assignee,
                        getMoscowTimestamp(),
                        taskData.source
                    ]
                );
            }
        }

        // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
        if (fetchedTaskIds.length > 0) {
            const placeholders = fetchedTaskIds.map(() => '?').join(',');
            db.run(
                `UPDATE tasks
                 SET archived = 1,
                     archivedDate = ?
                 WHERE source = ?
                   AND archived = 0
                   AND id NOT IN (${placeholders})`,
                [getMoscowTimestamp(), source, ...fetchedTaskIds],
                function(err) {
                    if (err) {
                        console.error('Error archiving tasks:', err);
                    } else {
                        if (this.changes > 0) {
                            console.log(`Archived ${this.changes} tasks from ${source}.`);
                        }
                    }
                }
            );
        } else {
            // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∑–∞–¥–∞—á, –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –¥–ª—è —ç—Ç–æ–≥–æ source
            db.run(
                `UPDATE tasks
                 SET archived = 1,
                     archivedDate = ?
                 WHERE source = ?
                   AND archived = 0`,
                [getMoscowTimestamp(), source],
                function(err) {
                    if (err) {
                        console.error('Error archiving tasks (none fetched):', err);
                    } else {
                        if (this.changes > 0) {
                            console.log(`Archived ${this.changes} tasks from ${source} (none fetched).`);
                        }
                    }
                }
            );
        }
    } catch (error) {
        console.error(`Error fetching and storing tasks from ${source} Jira:`, error);
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á –≤ Telegram –∫–∞–Ω–∞–ª.
 * @param {string} chatId - ID —á–∞—Ç–∞ (–∫–∞–Ω–∞–ª–∞), –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏.
 */
async function sendJiraTasksToChat(chatId) {
    const today = getMoscowTimestamp().split(' ')[0];
    const query = `
        SELECT *
        FROM tasks
        WHERE archived = 0
          AND department = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
          AND issueType IN ('Infra', 'Office', 'Prod')
          AND (lastSent IS NULL OR lastSent < date('${today}'))
          AND dateAdded >= date('now', '-30 days') -- –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
    `;

    db.all(query, [], async (err, rows) => {
        if (err) {
            console.error('sendJiraTasksToChat() error:', err);
            return;
        }

        for (const task of rows) {
            const keyboard = new InlineKeyboard();
            const jiraUrl = `https://jira.${task.source}.team/browse/${task.id}`;

            // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
            keyboard
                .text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`)
                .text('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', `comment_task:${task.id}`)
                .text('–ó–∞–≤–µ—Ä—à–∏—Ç—å', `complete_task:${task.id}`)
                .row()
                .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', jiraUrl);

            const messageText = `
–ó–∞–¥–∞—á–∞: ${task.id}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}
–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}
–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.issueType}
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assignee || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: ${task.department}
            `.trim();

            // –û–±–µ—Ä–Ω—É—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Bottleneck
            limiter.schedule(() => sendMessageWithRetry(chatId, messageText, { reply_markup: keyboard }))
                .then(() => {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ lastSent –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    db.run('UPDATE tasks SET lastSent = ? WHERE id = ?', [getMoscowTimestamp(), task.id]);
                })
                .catch((error) => {
                    console.error('Failed to send message after retries:', error);
                });
        }
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ 429 –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
 * @param {number|string} chatId - ID —á–∞—Ç–∞.
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, reply_markup).
 */
async function sendMessageWithRetry(chatId, text, options = {}) {
    try {
        await bot.api.sendMessage(chatId, text, options);
    } catch (error) {
        if (error.error_code === 429 && error.parameters && error.parameters.retry_after) {
            const retryAfter = error.parameters.retry_after * 1000; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            console.warn(`Rate limit exceeded. Retrying after ${retryAfter / 1000} seconds...`);

            // –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await new Promise(resolve => setTimeout(resolve, retryAfter));

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            return sendMessageWithRetry(chatId, text, options);
        } else {
            // –ü—Ä–æ–±—Ä–æ—Å –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –¥–∞–ª—å—à–µ
            throw error;
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è assignee –∑–∞–¥–∞—á–∏ –≤ Jira.
 */
async function updateJiraAssignee(source, taskId, jiraUsername) {
    try {
        const url = `https://jira.${source}.team/rest/api/2/issue/${taskId}/assignee`;
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        const response = await axios.put(url, { name: jiraUsername }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });

        console.log(`Assignee updated for ${taskId}:`, response.status);
        return true;
    } catch (error) {
        console.error(`updateJiraAssignee error for ${taskId}:`, error.response?.data || error);
        return false;
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ –≤ Jira.
 */
async function updateJiraIssueComment(source, taskId, jiraUsername, commentBody) {
    try {
        const url = `https://jira.${source}.team/rest/api/2/issue/${taskId}/comment`;
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        const response = await axios.post(url, { body: commentBody }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });

        console.log(`Comment added for ${taskId}:`, response.status);
        return true;
    } catch (error) {
        console.error(`updateJiraIssueComment error for ${taskId}:`, error.response?.data || error);
        return false;
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å Done –≤ Jira.
 */
async function updateJiraTaskStatus(source, taskId, transitionId) {
    try {
        const url = `https://jira.${source}.team/rest/api/2/issue/${taskId}/transitions`;
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        const response = await axios.post(url, { transition: { id: transitionId } }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });

        console.log(`Task ${taskId} transitioned to Done:`, response.status);
        return true;
    } catch (error) {
        console.error(`updateJiraTaskStatus error for ${taskId}:`, error.response?.data || error);
        return false;
    }
}

/**
 * Conversation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
 */
async function commentConversation(conversation, ctx) {
    // –ü–æ–ª—É—á–∞–µ–º taskId –∏–∑ callbackData
    const parts = ctx.match.input.split(':'); // "comment_task:ABC-123"
    const taskId = parts[1];

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ –ë–î
    const taskRow = await new Promise((resolve, reject) => {
        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], (err, row) => {
            if (err) reject(err);
            else resolve(row);
        });
    });

    if (!taskRow) {
        await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
        return;
    }

    const source = taskRow.source;
    const telegramUsername = ctx.from?.username || '';
    const realName = mapTelegramUserToName(telegramUsername);
    const jiraUsername = getJiraUsername(telegramUsername, source);

    if (!jiraUsername) {
        await ctx.reply(`–ù–µ –Ω–∞–π–¥–µ–Ω Jira-–ª–æ–≥–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUsername}`);
        return;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏:');
    const { message } = await conversation.wait();

    const userComment = message.text;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ Jira
    const success = await updateJiraIssueComment(source, taskId, jiraUsername, userComment);

    if (!success) {
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ Jira.');
        return;
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞
    const callbackMsg = ctx.callbackQuery?.message;
    if (callbackMsg) {
        const jiraUrl = `https://jira.${source}.team/browse/${taskId}`;
        const keyboard = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', jiraUrl);
        try {
            await bot.api.editMessageText(
                callbackMsg.chat.id,
                callbackMsg.message_id,
                `${taskRow.department}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω: ${realName}\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${taskRow.title}`,
                { reply_markup: keyboard }
            );
        } catch (e) {
            console.error('editMessageText (comment) error:', e);
        }
    } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const jiraUrl = `https://jira.${source}.team/browse/${taskId}`;
        const keyboard = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', jiraUrl);
        await ctx.reply(`${taskRow.department}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω: ${realName}\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${taskRow.title}`, { reply_markup: keyboard });
    }
}

/** 
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º conversation "commentConversation"
 */
bot.use(createConversation(commentConversation, "commentConversation"));

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (take_task, comment_task, complete_task).
 */
bot.callbackQuery(/^(take_task|comment_task|complete_task):(.*)$/, async (ctx) => {
    const actionType = ctx.match[1]; // take_task | comment_task | complete_task
    const taskId = ctx.match[2];
    const telegramUsername = ctx.from?.username || '';
    const realName = mapTelegramUserToName(telegramUsername);

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ë–î
    const taskRow = await new Promise((resolve, reject) => {
        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], (err, row) => {
            if (err) reject(err);
            else resolve(row);
        });
    });

    if (!taskRow) {
        await ctx.answerCallbackQuery();
        await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
        return;
    }

    const { source, department, title } = taskRow;
    const jiraUsername = getJiraUsername(telegramUsername, source);

    if (!jiraUsername) {
        await ctx.answerCallbackQuery();
        await ctx.reply(`–ù–µ –Ω–∞–π–¥–µ–Ω Jira-–ª–æ–≥–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUsername}`);
        return;
    }

    if (actionType === 'take_task') {
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Jira
        const success = await updateJiraAssignee(source, taskId, jiraUsername);
        await ctx.answerCallbackQuery();

        if (success) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞
            const jiraUrl = `https://jira.${source}.team/browse/${taskId}`;
            const keyboard = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', jiraUrl);
            try {
                await ctx.editMessageText(
                    `${department}\n\n–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: ${realName}\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${title}`,
                    { reply_markup: keyboard }
                );
            } catch (e) {
                console.error('editMessageText(take_task) error:', e);
            }
        } else {
            await ctx.reply('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ Jira.');
        }
    } else if (actionType === 'comment_task') {
        // –ó–∞–ø—É—Å–∫–∞–µ–º conversation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await ctx.conversation.enter("commentConversation");
    } else if (actionType === 'complete_task') {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ —Å—Ç–∞—Ç—É—Å Done
        const transitionId = '401'; // –í–∞—à transitionId –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ Done
        const success = await updateJiraTaskStatus(source, taskId, transitionId);
        await ctx.answerCallbackQuery();

        if (success) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞
            const jiraUrl = `https://jira.${source}.team/browse/${taskId}`;
            const keyboard = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', jiraUrl);
            try {
                await ctx.editMessageText(
                    `${department}\n\n–ó–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É: ${realName}\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${title}`,
                    { reply_markup: keyboard }
                );
            } catch (e) {
                console.error('editMessageText(complete_task) error:', e);
            }
        } else {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∑–∞–¥–∞—á–∏ –≤ Done –≤ Jira.');
        }
    }
});

/**
 * –ö–æ–º–∞–Ω–¥–∞ /report ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π.
 */
bot.command('report', async (ctx) => {
    try {
        const thirtyDaysAgo = DateTime.now().setZone('Europe/Moscow')
            .minus({ days: 30 })
            .toFormat('yyyy-MM-dd');

        const query = `
            SELECT assignee
            FROM tasks
            WHERE resolution = 'Done'
              AND department = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
              AND date(dateAdded) >= date(?)
        `;

        db.all(query, [thirtyDaysAgo], async (err, rows) => {
            if (err) {
                console.error('/report error:', err);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.');
                return;
            }

            if (!rows || rows.length === 0) {
                await ctx.reply('–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ.');
                return;
            }

            const stats = {};
            for (const row of rows) {
                const name = row.assignee || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                if (!stats[name]) stats[name] = 0;
                stats[name]++;
            }

            let reportMessage = '–û—Ç—á—ë—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º (–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n';
            for (const name of Object.keys(stats)) {
                reportMessage += `${name}: ${stats[name]} –∑–∞–¥–∞—á(–∏)\n`;
            }

            await ctx.reply(reportMessage);
        });
    } catch (error) {
        console.error('Error in /report command:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.');
    }
});

/**
 * –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 */
cron.schedule('0 0 * * *', () => {
    console.log('Starting daily DB cleanup...');

    const cleanupQuery = `
        DELETE FROM tasks
        WHERE archived = 1
          AND resolution = 'Done'
          AND archivedDate IS NOT NULL
          AND date(archivedDate) < date('now','-35 days')
    `;
    db.run(cleanupQuery, function(err) {
        if (err) {
            console.error('Error cleaning up archived tasks:', err);
        } else {
            console.log(`Cleaned up ${this.changes} old archived tasks (Done).`);
        }
    });

    // –ß–∏—Å—Ç–∏–º user_actions, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∏ —É–∂–µ –Ω–µ—Ç
    const cleanupUserActions = `
        DELETE FROM user_actions
        WHERE taskId NOT IN (SELECT id FROM tasks)
    `;
    db.run(cleanupUserActions, function(err) {
        if (err) {
            console.error('Error cleaning up old user_actions:', err);
        } else {
            console.log(`Cleaned up ${this.changes} old user_actions.`);
        }
    });

    // –ß–∏—Å—Ç–∏–º task_comments, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∏ —É–∂–µ –Ω–µ—Ç
    const cleanupComments = `
        DELETE FROM task_comments
        WHERE taskId NOT IN (SELECT id FROM tasks)
    `;
    db.run(cleanupComments, function(err) {
        if (err) {
            console.error('Error cleaning up old task_comments:', err);
        } else {
            console.log(`Cleaned up ${this.changes} old task_comments.`);
        }
    });
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö (Done) –≤ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
 */
cron.schedule('*/5 * * * *', async () => {
    console.log('Checking new comments in done tasks...');
    await checkNewCommentsInDoneTasks();
});

/**
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
 */
async function checkNewCommentsInDoneTasks() {
    try {
        const query = `
            SELECT *
            FROM tasks
            WHERE department = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
              AND resolution = 'Done'
              AND archived = 0
              AND dateAdded >= date('now', '-30 days') -- –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
        `;

        db.all(query, [], async (err, tasks) => {
            if (err) {
                console.error('Error fetching done tasks for comments check:', err);
                return;
            }

            for (const task of tasks) {
                const { id, source, title } = task;

                const tableCommentInfo = await new Promise((resolve, reject) => {
                    db.get('SELECT * FROM task_comments WHERE taskId = ?', [id], (err2, row) => {
                        if (err2) reject(err2);
                        else resolve(row);
                    });
                });

                const lastSavedCommentId = tableCommentInfo ? tableCommentInfo.lastCommentId : null;

                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ Jira
                const commentUrl = `https://jira.${source}.team/rest/api/2/issue/${id}/comment`;
                const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

                const response = await axios.get(commentUrl, {
                    headers: {
                        'Authorization': `Bearer ${pat}`,
                        'Accept': 'application/json'
                    }
                });

                const allComments = response.data.comments || [];
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID —á–∏—Å–ª–æ–≤–æ–π)
                allComments.sort((a, b) => parseInt(a.id) - parseInt(b.id));

                let newLastId = lastSavedCommentId;
                for (const comment of allComments) {
                    const commentIdNum = parseInt(comment.id);
                    const lastSavedIdNum = lastSavedCommentId ? parseInt(lastSavedCommentId) : 0;

                    if (commentIdNum > lastSavedIdNum) {
                        // –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        const authorName = comment.author?.displayName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä';
                        const bodyText = comment.body || '';

                        const messageText = `
–í –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

–ó–∞–¥–∞—á–∞: ${task.id}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}
–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}
–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.issueType}

–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${authorName}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${bodyText}
–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É: https://jira.${source}.team/browse/${task.id}
                        `.trim();

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ admin —á–∞—Ç
                        if (process.env.ADMIN_CHAT_ID) {
                            await limiter.schedule(() => sendMessageWithRetry(process.env.ADMIN_CHAT_ID, messageText));
                        } else {
                            console.error('ADMIN_CHAT_ID is not set in .env');
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º lastCommentId
                        if (!newLastId || commentIdNum > parseInt(newLastId)) {
                            newLastId = comment.id;
                        }
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if (newLastId && newLastId !== lastSavedCommentId) {
                    if (tableCommentInfo) {
                        db.run(
                            `UPDATE task_comments
                             SET lastCommentId = ?, timestamp = ?
                             WHERE taskId = ?`,
                            [newLastId, getMoscowTimestamp(), id]
                        );
                    } else {
                        db.run(
                            `INSERT INTO task_comments (taskId, lastCommentId, timestamp)
                             VALUES (?, ?, ?)`,
                            [id, newLastId, getMoscowTimestamp()]
                        );
                    }
                }
            }
        });
    } catch (error) {
        console.error('checkNewCommentsInDoneTasks error:', error);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ channel_post –¥–ª—è –∫–æ–º–∞–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∫–∞–Ω–∞–ª.
 */
bot.on('channel_post', async (ctx) => {
    const text = ctx.channelPost.text;
    const chatId = ctx.channelPost.chat.id;
    console.log(`Received channel_post from chat ID ${chatId}: ${text}`);

    if (text && text.startsWith('/start')) {
        console.log('Processing /start command in channel');
        await ctx.reply(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö.\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π /report –¥–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º.'
        );

        await fetchAndStoreJiraTasks();
        await sendJiraTasksToChat(chatId);
    }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ –≥—Ä—É–ø–ø.
 */
bot.command('start', async (ctx) => {
    console.log('Received /start command from:', ctx.from?.username);
    await ctx.reply(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö.\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π /report –¥–ª—è –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º.'
    );
    await fetchAndStoreJiraTasks();
    await sendJiraTasksToChat(process.env.ADMIN_CHAT_ID);

    // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ cron —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ,
    // –ø–æ—ç—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ –∏—Ö –∑–∞–ø—É—Å–∫–∞—Ç—å –∑–¥–µ—Å—å —Å–Ω–æ–≤–∞.
});

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
 */
bot.catch(async (err, ctx) => {
    if (ctx && ctx.update && ctx.update.update_id) {
        console.error(`Error while handling update ${ctx.update.update_id}:`, err);
    } else {
        console.error('Error while handling update:', err);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (ctx && ctx.replyable) {
        try {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
        } catch (e) {
            console.error('Error sending error message:', e);
        }
    }
});

/**
 * –£—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –Ω–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
 */
cron.schedule('0 21 * * *', async () => {
    if (process.env.ADMIN_CHAT_ID) {
        await limiter.schedule(() => sendMessageWithRetry(process.env.ADMIN_CHAT_ID, '–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ó–∞–ø–æ–ª–Ω–∏ —Ç–∏–∫–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω—ã.'));
    } else {
        console.error('ADMIN_CHAT_ID is not set in .env');
    }
});
cron.schedule('0 9 * * *', async () => {
    if (process.env.ADMIN_CHAT_ID) {
        await limiter.schedule(() => sendMessageWithRetry(process.env.ADMIN_CHAT_ID, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—Ä–æ–≤–µ—Ä—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞—á–Ω–∏ —Å–º–µ–Ω—É.'));
    } else {
        console.error('ADMIN_CHAT_ID is not set in .env');
    }
});

/**
 * –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.
 */
bot.start();
