require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const { DateTime } = require('luxon');
const bot = new Bot(process.env.BOT_API_KEY);
const db = new sqlite3.Database('tasks.db');
const cron = require('node-cron');

function getMoscowTimestamp() {
    const moscowTime = DateTime.now().setZone('Europe/Moscow');
    return moscowTime.toFormat('yyyy-MM-dd HH:mm:ss');
}

db.run(`CREATE TABLE IF NOT EXISTS tasks (
    id TEXT PRIMARY KEY,
    title TEXT,
    priority TEXT,
    department TEXT,
    dateAdded DATETIME,
    lastSent DATETIME,
    source TEXT -- –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–¥–∞—á–∏
)`);

db.run(`CREATE TABLE IF NOT EXISTS user_actions (
    username TEXT,
    taskId TEXT,
    action TEXT,
    timestamp DATETIME,
    FOREIGN KEY(taskId) REFERENCES tasks(id)
)`);

function getPriorityEmoji(priority) {
    const emojis = {
        Blocker: 'üö®',
        High: 'üî¥',
        Medium: 'üü°',
        Low: 'üü¢'
    };
    return emojis[priority] || '';
}

function sendNightShiftMessage(ctx) {
    ctx.reply('–ù–æ—á–Ω–æ–π –¥–æ–∑–æ—Ä! –ù–∞—á–Ω–∏ —Å–º–µ–Ω—É –≤ –±–æ—Ç–µ –≤ 21:00 https://t.me/NightShiftBot_bot');
}

async function fetchAndStoreJiraTasks() {
    await fetchAndStoreTasksFromJira('sxl', 'https://jira.sxl.team/rest/api/2/search', process.env.JIRA_PAT_SXL, 'QA', 'Sportsbook','–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
    await fetchAndStoreTasksFromJira('betone', 'https://jira.betone.team/rest/api/2/search', process.env.JIRA_PAT_BETONE, 'QA', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
}

async function fetchAndStoreTasksFromJira(source, url, pat, ...departments) {
    try {
        console.log(`Fetching tasks from ${source} Jira...`);
        const departmentQuery = departments.map(dep => `"${dep}"`).join(" or –û—Ç–¥–µ–ª = ");
        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            },
            params: {
                jql: `project = SUPPORT AND (–û—Ç–¥–µ–ª = ${departmentQuery}) and status = "Open"`
            }
        });
        console.log(`${source} Jira API response:`, response.data);

        const fetchedTaskIds = response.data.issues.map(issue => issue.key);

        await new Promise((resolve, reject) => {
            const placeholders = fetchedTaskIds.map(() => '?').join(',');
            db.run(`DELETE FROM tasks WHERE id NOT IN (${placeholders}) AND source = ?`, [...fetchedTaskIds, source], function(err) {
                if (err) {
                    reject(err);
                    console.error(`Error deleting tasks from ${source} Jira:`, err);
                } else {
                    resolve();
                }
            });
        });

        for (const issue of response.data.issues) {
            const task = {
                id: issue.key,
                title: issue.fields.summary,
                priority: issue.fields.priority.name,
                department: (source === 'betone' && issue.fields.customfield_10504) ? issue.fields.customfield_10504.value : ((source === 'sxl' && issue.fields.customfield_10500) ? issue.fields.customfield_10500.value : '–ù–µ —É–∫–∞–∑–∞–Ω'),
                dateAdded: getMoscowTimestamp(),
                source: source
            };

            const existingTask = await new Promise((resolve, reject) => {
                db.get('SELECT * FROM tasks WHERE id = ?', [task.id], (err, row) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(row);
                    }
                });
            });

            if (existingTask) {
                db.run('UPDATE tasks SET title = ?, priority = ?, department = ?, source = ? WHERE id = ?', [task.title, task.priority, task.department, task.source, task.id]);
            } else {
                db.run('INSERT INTO tasks (id, title, priority, department, dateAdded, lastSent, source) VALUES (?, ?, ?, ?, ?, NULL, ?)', [task.id, task.title, task.priority, task.department, task.dateAdded, task.source]);
            }
        }
    } catch (error) {
        console.error(`Error fetching and storing tasks from ${source} Jira:`, error);
    }
}

async function sendJiraTasks(ctx) {
    const today = getMoscowTimestamp().split(' ')[0];
    const query = `
        SELECT * FROM tasks WHERE 
        (department IN ("QA", "Sportsbook") AND (lastSent IS NULL OR lastSent < datetime('now', '-3 days')))
        OR
        (department = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" AND (lastSent IS NULL OR lastSent < date('${today}')))
        ORDER BY CASE 
            WHEN department = 'QA' THEN 1 
            WHEN department = 'Sportsbook' THEN 2 
            ELSE 3 
        END
    `;

    db.all(query, [], async (err, rows) => {
        if (err) {
            console.error('Error fetching tasks:', err);
            return;
        }

        for (const task of rows) {
            const department = task.department;
            const keyboard = new InlineKeyboard();

            if (department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                keyboard.text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`);
            } else if (department === "QA" || department === "Sportsbook") {
                keyboard.text('–í –∫—É—Ä—Å–µ', `aware_task:${task.id}`);
            }

            const messageText = `–ó–∞–¥–∞—á–∞: ${task.id}\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n–°—Å—ã–ª–∫–∞: https://jira.${task.source === 'sxl' ? 'sxl' : 'betone'}.team/browse/${task.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n–û—Ç–¥–µ–ª: ${department}`;
            console.log('Sending message to Telegram:', messageText);

            await ctx.reply(messageText, { reply_markup: keyboard });

            const moscowTimestamp = getMoscowTimestamp();
            console.log(`Updating lastSent for task ${task.id} to: ${moscowTimestamp}`);
            db.run('UPDATE tasks SET lastSent = ? WHERE id = ?', [moscowTimestamp, task.id]);
        }
    });
}

const usernameMappings = {
    "lipchinski": "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
    "ayugoncharov": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì–æ–Ω—á–∞—Ä–æ–≤",
    "fdhsudgjdgkdfg": "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
    "EuroKaufman": "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤",
    "Nikolay_Gonchar": "–ù–∏–∫–æ–ª–∞–π –ì–æ–Ω—á–∞—Ä",
    "KIRILlKxX": "–ö–∏—Ä–∏–ª–ª –ê—Ç–∞–Ω–∏–∑—è–æ–≤"
};

const jiraUserMappings = {
    "lipchinski": { "sxl": "d.selivanov", "betone": "dms" },
    "ayugoncharov": { "sxl": "a.goncharov", "betone": "ag" },
    "fdhsudgjdgkdfg": { "sxl": "d.maslov", "betone": "dam" },
    "EuroKaufman": { "sxl": "d.baratov", "betone": "db" },
    "Nikolay_Gonchar": { "sxl": "n.gonchar", "betone": "ng" },
    "KIRILlKxX": { "sxl": "k.ataniyazov", "betone": "ka" }
};

bot.callbackQuery(/^take_task:(.+)$/, async (ctx) => {
    try {
        const taskId = ctx.match[1];
        const username = ctx.from.username;

        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], async (err, task) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
                return;
            }

            if (!task) {
                await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }

            if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                const success = await updateJiraTaskStatus(task.source, taskId, username);
                if (success) {
                    const displayName = usernameMappings[ctx.from.username] || ctx.from.username;
                    const messageText = `–ó–∞–¥–∞—á–∞: ${task.id}\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n–°—Å—ã–ª–∫–∞: https://jira.${task.source === 'sxl' ? 'sxl' : 'betone'}.team/browse/${task.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n–û—Ç–¥–µ–ª: ${task.department}\n\n–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: ${displayName}`;

                    await ctx.editMessageText(messageText, { reply_markup: { inline_keyboard: [] } });

                    db.run('INSERT INTO user_actions (username, taskId, action, timestamp) VALUES (?, ?, ?, ?)',
                        [ctx.from.username, taskId, 'take_task', getMoscowTimestamp()]);
                } else {
                    await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${taskId}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
                }
            } else {
                await ctx.reply('–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –¥–ª—è –æ—Ç–¥–µ–ª–∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç.');
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ take_task:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
    }
});

bot.callbackQuery(/^aware_task:(.+)$/, async (ctx) => {
    try {
        const taskId = ctx.match[1];
        const username = ctx.from.username;

        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], async (taskErr, task) => {
            if (taskErr) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ:', taskErr);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
                return;
            }

            if (!task) {
                await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }

            db.get('SELECT * FROM user_actions WHERE username = ? AND taskId = ? AND action = "aware_task"', [username, taskId], async (err, row) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
                    return;
                }

                if (!row) {
                    await db.run('INSERT OR IGNORE INTO user_actions (username, taskId, action, timestamp) VALUES (?, ?, ?, ?)', [username, taskId, 'aware_task', getMoscowTimestamp()]);
                } else {
                    ctx.answerCallbackQuery('–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —ç—Ç—É –∑–∞–¥–∞—á—É –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é.');
                }

                db.all('SELECT DISTINCT username FROM user_actions WHERE taskId = ? AND action = "aware_task"', [taskId], async (selectErr, users) => {
                    if (selectErr) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', selectErr);
                        return;
                    }

                    const awareUsersList = users.map(u => usernameMappings[u.username] || u.username).join(', ');
                    const lastUpdated = new Date().toLocaleTimeString();
                    const messageText = `–ó–∞–¥–∞—á–∞: ${task.id}\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n–°—Å—ã–ª–∫–∞: https://jira.${task.source === 'sxl' ? 'sxl' : 'betone'}.team/browse/${task.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n–û—Ç–¥–µ–ª: ${task.department}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫—É—Ä—Å–µ –∑–∞–¥–∞—á–∏: ${awareUsersList}\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdated}`;
                    const replyMarkup = users.length >= 3 ? undefined : ctx.callbackQuery.message.reply_markup;

                    await ctx.editMessageText(messageText, { reply_markup: replyMarkup });
                });
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ aware_task:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
    }
});

async function updateJiraTaskStatus(source, taskId, telegramUsername) {
    try {
        let transitionId;
        if (source === 'sxl') {
            transitionId = '221'; // –í–∞—à transitionId –¥–ª—è sxl
        } else if (source === 'betone') {
            transitionId = '201'; // –í–∞—à transitionId –¥–ª—è betone
        } else {
            console.error('Invalid source specified');
            return false;
        }

        const jiraUsername = jiraUserMappings[telegramUsername][source];
        if (!jiraUsername) {
            console.error(`No Jira username mapping found for Telegram username: ${telegramUsername}`);
            return false;
        }

        const url = `https://jira.${source}.team/rest/api/2/issue/${taskId}/assignee`;
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;
        
        const assigneeResponse = await axios.put(url, {
            name: jiraUsername
        }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json'
            }
        });

        if (assigneeResponse.status !== 204) {
            console.error(`Error assigning Jira task: ${assigneeResponse.status}`);
            return false;
        }

        const transitionUrl = `https://jira.${source}.team/rest/api/2/issue/${taskId}/transitions`;
        const transitionResponse = await axios.post(transitionUrl, {
            transition: {
                id: transitionId
            }
        }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json'
            }
        });

        return transitionResponse.status === 204;
    } catch (error) {
        console.error(`Error updating ${source} Jira task:`, error);
        return false;
    }
}

let interval;
let nightShiftCron;
let morningShiftCron;

bot.command('start', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...');

    if (!interval) {
        interval = setInterval(async () => {
            console.log('Interval triggered. Sending Jira tasks...');
            await fetchAndStoreJiraTasks();
            await sendJiraTasks(ctx);
            console.log('Jira tasks sent.');
        }, 60000);
    } else {
        await ctx.reply('–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω.');
    }

    if (!nightShiftCron) {
        nightShiftCron = cron.schedule('0 21 * * *', async () => {
            await ctx.reply('–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ó–∞–ø–æ–ª–Ω–∏ —Ç–∏–∫–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω—ã –∏ –≤–Ω–µ—Å–∏ –¥–µ–ª–∞ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–º–µ–Ω—ã —Å—é–¥–∞: https://plan-kaban.ru/boards/1207384783689090054');

            if (!morningShiftCron) {
                morningShiftCron = cron.schedule('0 10 * * *', async () => {
                    await ctx.reply('–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: https://plan-kaban.ru/boards/1207384783689090054');
                }, {
                    scheduled: false,
                    timezone: "Europe/Moscow"
                });

                morningShiftCron.start();
            }
        }, {
            scheduled: false,
            timezone: "Europe/Moscow"
        });

        nightShiftCron.start();
    }
});

bot.command('stop', async (ctx) => {
    if (interval) {
        clearInterval(interval);
        interval = null;
        await ctx.reply('–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    } else {
        await ctx.reply('–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.');
    }
});

bot.start();
