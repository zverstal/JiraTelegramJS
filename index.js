require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const { DateTime } = require('luxon'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º Luxon –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º

const bot = new Bot(process.env.BOT_API_KEY);
const db = new sqlite3.Database('tasks.db');

function getMoscowTimestamp() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É
    const moscowTime = DateTime.now().setZone('Europe/Moscow');

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É
    return moscowTime.toFormat('yyyy-MM-dd HH:mm:ss');
}

db.run(`CREATE TABLE IF NOT EXISTS tasks (
    id TEXT PRIMARY KEY,
    title TEXT,
    priority TEXT,
    department TEXT,
    dateAdded DATETIME,     -- –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    lastSent DATETIME       -- –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏
)`);

db.run(`CREATE TABLE IF NOT EXISTS user_actions (
    username TEXT,
    taskId TEXT,
    action TEXT,
    timestamp DATETIME,  -- –ü—Ä–æ—Å—Ç–æ DATETIME
    FOREIGN KEY(taskId) REFERENCES tasks(id)
)`);

function getPriorityEmoji(priority) {
    const emojis = {
        Blocker: 'üö®',
        High: 'üî¥',
        Medium: 'üü°',
        Low: 'üü¢'
    };
    return emojis[priority] || '';
}

async function fetchAndStoreJiraTasks() {
    try {
        console.log('Fetching tasks from Jira...');
        const response = await axios.get('https://jira.sxl.team/rest/api/2/search', {
            headers: {
                'Authorization': `Bearer ${process.env.JIRA_PAT}`,
                'Accept': 'application/json'
            },
            params: {
                jql: 'project = SUPPORT AND (–û—Ç–¥–µ–ª = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" or –û—Ç–¥–µ–ª = "QA" or –û—Ç–¥–µ–ª = "Sportsbook") and status = "Open"'
            }
        });
        console.log('Jira API response:', response.data);

        const fetchedTaskIds = response.data.issues.map(issue => issue.key);

        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ "Open" –≤ Jira
        await new Promise((resolve, reject) => {
            const placeholders = fetchedTaskIds.map(() => '?').join(',');
            db.run(`DELETE FROM tasks WHERE id NOT IN (${placeholders})`, fetchedTaskIds, function(err) {
                if (err) {
                    reject(err);
                    console.error('Error deleting tasks:', err);
                } else {
                    resolve();
                }
            });
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        for (const issue of response.data.issues) {
            const task = {
                id: issue.key,
                title: issue.fields.summary,
                priority: issue.fields.priority.name,
                department: issue.fields.customfield_10500 ? issue.fields.customfield_10500.value : '–ù–µ —É–∫–∞–∑–∞–Ω',
                dateAdded: getMoscowTimestamp()
            };

            const existingTask = await new Promise((resolve, reject) => {
                db.get('SELECT * FROM tasks WHERE id = ?', [task.id], (err, row) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(row);
                    }
                });
            });

            if (existingTask) {
                db.run('UPDATE tasks SET title = ?, priority = ?, department = ? WHERE id = ?', [task.title, task.priority, task.department, task.id]);
            } else {
                db.run('INSERT INTO tasks (id, title, priority, department, dateAdded, lastSent) VALUES (?, ?, ?, ?, ?, NULL)', [task.id, task.title, task.priority, task.department, task.dateAdded]);
            }
        }
    } catch (error) {
        console.error('Error fetching and storing Jira tasks:', error);
    }
}



async function sendJiraTasks(ctx) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î
    const today = getMoscowTimestamp().split(' ')[0];

    // –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —É—Å–ª–æ–≤–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –æ—Ç–¥–µ–ª—É
    const query = `
        SELECT * FROM tasks WHERE 
        (department IN ("QA", "Sportsbook") AND (lastSent IS NULL OR lastSent < datetime('now', '-3 days')))
        OR
        (department = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" AND (lastSent IS NULL OR lastSent < date('${today}')))
        ORDER BY CASE 
            WHEN department = 'QA' THEN 1 
            WHEN department = 'Sportsbook' THEN 2 
            ELSE 3 
        END
    `;

    db.all(query, [], async (err, rows) => {
        if (err) {
            console.error('Error fetching tasks:', err);
            return;
        }

        for (const task of rows) {
            const department = task.department;
            const keyboard = new InlineKeyboard();

            // –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–¥–µ–ª–∞
            if (department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                keyboard.text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`);
            } else if (department === "QA" || department === "Sportsbook") {
                keyboard.text('–í –∫—É—Ä—Å–µ', `aware_task:${task.id}`);
            }

            const messageText = `–ó–∞–¥–∞—á–∞: ${task.id}\n–°—Å—ã–ª–∫–∞: https://jira.sxl.team/browse/${task.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n–û—Ç–¥–µ–ª: ${department}`;
            console.log('Sending message to Telegram:', messageText);

            await ctx.reply(messageText, { reply_markup: keyboard });

            // –û–±–Ω–æ–≤–ª—è–µ–º lastSent –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏
            const moscowTimestamp = getMoscowTimestamp();
            console.log(`Updating lastSent for task ${task.id} to: ${moscowTimestamp}`);
            db.run('UPDATE tasks SET lastSent = ? WHERE id = ?', [moscowTimestamp, task.id]);
        }
    });
}


const usernameMappings = {
    "lipchinski": "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
    "YurkovOfficial": "–ü—ë—Ç—Ä –Æ—Ä–∫–æ–≤",
    "Jlufi": "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
    "EuroKaufman": "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤"
};

bot.callbackQuery(/^take_task:(.+)$/, async (ctx) => {
    try {
        const taskId = ctx.match[1];

        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], async (err, task) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
                return;
            }

            if (!task) {
                await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }

            if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                const success = await updateJiraTaskStatus(taskId);
                if (success) {
                    const displayName = usernameMappings[ctx.from.username] || ctx.from.username;

                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
                    const messageText = `–ó–∞–¥–∞—á–∞: ${task.id}\n–°—Å—ã–ª–∫–∞: https://jira.sxl.team/browse/${task.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n–û—Ç–¥–µ–ª: ${task.department}\n\n–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: ${displayName}`;

                    await ctx.editMessageText(messageText, { reply_markup: { inline_keyboard: [] } });

                    db.run('INSERT INTO user_actions (username, taskId, action, timestamp) VALUES (?, ?, ?, ?)',
                        [ctx.from.username, taskId, 'take_task', getMoscowTimestamp()]);
                } else {
                    await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${taskId}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
                }
            } else {
                await ctx.reply('–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –¥–ª—è –æ—Ç–¥–µ–ª–∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç.');
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ take_task:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
    }
});


bot.callbackQuery(/^aware_task:(.+)$/, async (ctx) => {
    try {
        const taskId = ctx.match[1];
        const username = ctx.from.username;

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], async (taskErr, task) => {
            if (taskErr) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ:', taskErr);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
                return;
            }

            if (!task) {
                // –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–º–µ—á–∞–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—á—É –∫–∞–∫ '–≤ –∫—É—Ä—Å–µ' —Ä–∞–Ω–µ–µ
            db.get('SELECT * FROM user_actions WHERE username = ? AND taskId = ? AND action = "aware_task"', [username, taskId], async (err, row) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
                    return;
                }

                if (!row) {
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–µ –æ—Ç–º–µ—á–∞–ª –∑–∞–¥–∞—á—É, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    db.run('INSERT INTO user_actions (username, taskId, action, timestamp) VALUES (?, ?, ?, ?)', [username, taskId, 'aware_task', getMoscowTimestamp()]);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–µ
                db.all('SELECT DISTINCT username FROM user_actions WHERE taskId = ? AND action = "aware_task"', [taskId], async (selectErr, awareUsers) => {
                    if (selectErr) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', selectErr);
                        return;
                    }

                    const awareUsersList = awareUsers.map(row => usernameMappings[row.username] || row.username).join(', ');
                    const messageText = `–ó–∞–¥–∞—á–∞: ${task.id}\n–°—Å—ã–ª–∫–∞: https://jira.sxl.team/browse/${task.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n–û—Ç–¥–µ–ª: ${task.department}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫—É—Ä—Å–µ –∑–∞–¥–∞—á–∏: ${awareUsersList}`;

                    const replyMarkup = awareUsers.length >= 3 ? undefined : ctx.callbackQuery.message.reply_markup;
                    await ctx.editMessageText(messageText, { reply_markup: replyMarkup });
                });
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ aware_task:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
    }
});



async function updateJiraTaskStatus(taskId) {
    try {
        const transitionId = '221'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID
        const transitionResponse = await axios.post(`https://jira.sxl.team/rest/api/2/issue/${taskId}/transitions`, {
            transition: {
                id: transitionId
            }
        }, {
            headers: {
                'Authorization': `Bearer ${process.env.JIRA_PAT}`,
                'Content-Type': 'application/json'
            }
        });
        return transitionResponse.status === 204;
    } catch (error) {
        console.error('Error updating Jira task:', error);
        return false;
    }
}

let interval;

bot.command('start', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...');

    if (!interval) {
        interval = setInterval(async () => {
            console.log('Interval triggered. Sending Jira tasks...');
            await fetchAndStoreJiraTasks(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
            await sendJiraTasks(ctx); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            console.log('Jira tasks sent.');
        }, 60000);  // 60000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
    } else {
        await ctx.reply('–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω.');
    }
});

bot.command('stop', async (ctx) => {
    if (interval) {
        clearInterval(interval);
        interval = null;
        await ctx.reply('–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    } else {
        await ctx.reply('–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.');
    }
});

bot.start();
