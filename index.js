require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const { DateTime } = require('luxon');
const cron = require('node-cron');
const Bottleneck = require('bottleneck');
const express = require('express');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const xlsx = require('xlsx'); // –î–ª—è —á—Ç–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–æ–≤

// ----------------------------------------------------------------------------------
// 1) –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê, –ë–ê–ó–´, –§–£–ù–ö–¶–ò–ô
// ----------------------------------------------------------------------------------

const bot = new Bot(process.env.BOT_API_KEY);
const db = new sqlite3.Database('tasks.db');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "yyyy-MM-dd HH:mm:ss"
function getMoscowTimestamp() {
    return DateTime.now().setZone('Europe/Moscow').toFormat('yyyy-MM-dd HH:mm:ss');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ DateTime —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º –ú–æ—Å–∫–≤—ã
function getMoscowDateTime() {
    return DateTime.now().setZone('Europe/Moscow');
}

// –°–æ–∑–¥–∞—ë–º –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ SQLite (–µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS tasks (
        id TEXT PRIMARY KEY,
        title TEXT,
        priority TEXT,
        department TEXT,
        issueType TEXT,
        dateAdded DATETIME,
        lastSent DATETIME,
        source TEXT
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS user_actions (
        username TEXT,
        taskId TEXT,
        action TEXT,
        timestamp DATETIME,
        FOREIGN KEY(taskId) REFERENCES tasks(id)
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS task_comments (
        taskId TEXT PRIMARY KEY,
        lastCommentId TEXT,
        assignee TEXT,
        FOREIGN KEY(taskId) REFERENCES tasks(id)
    )`);
});

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Üí —ç–º–æ–¥–∑–∏
function getPriorityEmoji(priority) {
    const emojis = {
        Blocker: 'üö®',
        High: 'üî¥',
        Medium: 'üü°',
        Low: 'üü¢'
    };
    return emojis[priority] || '';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–µ–ª—è–µ—Ç "sxl-" –∏–ª–∏ "betone-" –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
function extractRealJiraKey(fullId) {
    // –ü—Ä–∏–º–µ—Ä: "sxl-SUPPORT-123" ‚Üí ["sxl", "SUPPORT", "123"] ‚Üí realKey = "SUPPORT-123"
    const parts = fullId.split('-');
    parts.shift(); // —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (source)
    return parts.join('-');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è Jira
function getTaskUrl(source, combinedId) {
    const realKey = extractRealJiraKey(combinedId);
    return `https://jira.${source}.team/browse/${realKey}`;
}

// –ú–∞–ø–ø–∏–Ω–≥ Telegram username ‚Üí –§–ò–û (–ø—Ä–∏–º–µ—Ä)
const usernameMappings = {
    "lipchinski": "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
    "pr0spal": "–ï–≤–≥–µ–Ω–∏–π –®—É—à–∫–æ–≤",
    "fdhsudgjdgkdfg": "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
    "EuroKaufman": "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤",
    "Nikolay_Gonchar": "–ù–∏–∫–æ–ª–∞–π –ì–æ–Ω—á–∞—Ä",
    "KIRILlKxX": "–ö–∏—Ä–∏–ª–ª –ê—Ç–∞–Ω–∏–∑—è–æ–≤",
    "marysh353": "–î–∞–Ω–∏–∏–ª –ú–∞—Ä—ã—à–µ–≤"
};

// –ú–∞–ø–ø–∏–Ω–≥ Telegram username ‚Üí Jira username
const jiraUserMappings = {
    "lipchinski": { "sxl": "d.selivanov", "betone": "dms" },
    "pr0spal": { "sxl": "e.shushkov", "betone": "es" },
    "fdhsudgjdgkdfg": { "sxl": "d.maslov", "betone": "dam" },
    "EuroKaufman": { "sxl": "d.baratov", "betone": "db" },
    "Nikolay_Gonchar": { "sxl": "n.gonchar", "betone": "ng" },
    "KIRILlKxX": { "sxl": "k.ataniyazov", "betone": "ka" },
    "marysh353": { "sxl": "d.maryshev", "betone": "dma" }
};

// ----------------------------------------------------------------------------------
// 2) –ó–ê–ü–£–°–ö–ê–ï–ú EXPRESS –î–õ–Ø –†–ê–ó–î–ê–ß–ò –í–õ–û–ñ–ï–ù–ò–ô
// ----------------------------------------------------------------------------------

const app = express();
const ATTACHMENTS_DIR = path.join(__dirname, 'attachments');

if (!fs.existsSync(ATTACHMENTS_DIR)) {
    fs.mkdirSync(ATTACHMENTS_DIR);
}
app.use('/attachments', express.static(ATTACHMENTS_DIR));

// –î–æ–ø—É—Å—Ç–∏–º, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –ø–æ—Ä—Ç—É 3000
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Express server listening on port ${PORT}`);
});

// ----------------------------------------------------------------------------------
// 3) –ö–†–û–ù –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –°–¢–ê–†–´–• –§–ê–ô–õ–û–í (–≤ 3:00)
// ----------------------------------------------------------------------------------

cron.schedule('0 3 * * *', () => {
    console.log('[CRON] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ attachments...');
    const now = Date.now();
    const cutoff = now - 24 * 60 * 60 * 1000; // —Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫

    fs.readdir(ATTACHMENTS_DIR, (err, files) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ attachments:', err);
            return;
        }
        files.forEach(file => {
            const filePath = path.join(ATTACHMENTS_DIR, file);
            fs.stat(filePath, (statErr, stats) => {
                if (statErr) {
                    console.error('–û—à–∏–±–∫–∞ fs.stat:', statErr);
                    return;
                }
                if (stats.mtimeMs < cutoff) {
                    fs.unlink(filePath, delErr => {
                        if (delErr) {
                            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', delErr);
                        } else {
                            console.log(`–§–∞–π–ª ${file} —É–¥–∞–ª—ë–Ω (—Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫)`);
                        }
                    });
                }
            });
        });
    });
}, {
    timezone: 'Europe/Moscow'
});

// ----------------------------------------------------------------------------------
// 4) –§–£–ù–ö–¶–ò–ò –î–õ–Ø RABOT–´ –° JIRA
// ----------------------------------------------------------------------------------

async function fetchAndStoreJiraTasks() {
    await fetchAndStoreTasksFromJira('sxl', 'https://jira.sxl.team/rest/api/2/search', process.env.JIRA_PAT_SXL, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
    await fetchAndStoreTasksFromJira('betone', 'https://jira.betone.team/rest/api/2/search', process.env.JIRA_PAT_BETONE, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
}

async function fetchAndStoreTasksFromJira(source, url, pat, ...departments) {
    try {
        console.log(`Fetching tasks from ${source} Jira...`);
        const departmentQuery = departments.map(dep => `"${dep}"`).join(" OR –û—Ç–¥–µ–ª = ");
        let jql;

        if (source === 'sxl') {
            jql = `
                project = SUPPORT AND (
                    (issuetype = Infra AND status = "Open") OR
                    (issuetype = Office AND status = "Under review") OR
                    (issuetype = Office AND status = "Waiting for support") OR
                    (issuetype = Prod AND status = "Waiting for Developers approval") OR
                    (–û—Ç–¥–µ–ª = ${departmentQuery} AND status = "Open")
                )
            `;
        } else {
            // betone
            jql = `project = SUPPORT AND (–û—Ç–¥–µ–ª = ${departmentQuery}) AND status = "Open"`;
        }

        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            },
            params: { jql }
        });
        console.log(`${source} Jira API response:`, response.data);

        const fetchedTaskIds = response.data.issues.map(issue => `${source}-${issue.key}`);

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–≤–µ–∂–µ–º —Å–ø–∏—Å–∫–µ
        await new Promise((resolve, reject) => {
            const placeholders = fetchedTaskIds.map(() => '?').join(',');
            db.run(
                `DELETE FROM tasks
                 WHERE id NOT IN (${placeholders})
                   AND source = ?`,
                [...fetchedTaskIds, source],
                function(err) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                }
            );
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º / –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        for (const issue of response.data.issues) {
            const uniqueId = `${source}-${issue.key}`;
            const task = {
                id: uniqueId,
                title: issue.fields.summary,
                priority: issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                issueType: issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                department: (
                    (source === 'betone' && issue.fields.customfield_10504)
                        ? issue.fields.customfield_10504.value
                        : (
                            (source === 'sxl' && issue.fields.customfield_10500)
                                ? issue.fields.customfield_10500.value
                                : '–ù–µ —É–∫–∞–∑–∞–Ω'
                        )
                ),
                dateAdded: getMoscowTimestamp(),
                source
            };

            const existingTask = await new Promise((resolve, reject) => {
                db.get('SELECT * FROM tasks WHERE id = ?', [uniqueId], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });

            if (existingTask) {
                db.run(
                    `UPDATE tasks SET
                        title = ?,
                        priority = ?,
                        issueType = ?,
                        department = ?,
                        source = ?
                      WHERE id = ?`,
                    [task.title, task.priority, task.issueType, task.department, task.source, task.id]
                );
            } else {
                db.run(
                    `INSERT OR REPLACE INTO tasks (id, title, priority, issueType, department, dateAdded, lastSent, source)
                     VALUES (?, ?, ?, ?, ?, ?, NULL, ?)`,
                    [task.id, task.title, task.priority, task.issueType, task.department, task.dateAdded, task.source]
                );
            }
        }
    } catch (error) {
        console.error(`Error fetching and storing tasks from ${source} Jira:`, error);
    }
}

async function getJiraTaskDetails(source, combinedId) {
    try {
        const realKey = extractRealJiraKey(combinedId);
        const url = `https://jira.${source}.team/rest/api/2/issue/${realKey}?fields=summary,description,attachment,priority,issuetype,status`;
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            }
        });
        return response.data;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ ${combinedId} –∏–∑ Jira (${source}):`, error);
        return null;
    }
}

// ----------------------------------------------------------------------------------
// 5) –û–¢–ü–†–ê–í–ö–ê –ó–ê–î–ê–ß –ò–ó JIRA –í TELEGRAM
// ----------------------------------------------------------------------------------

async function sendJiraTasks(ctx) {
    const today = getMoscowTimestamp().split(' ')[0];
    const query = `
        SELECT * FROM tasks WHERE
        (department = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" AND (lastSent IS NULL OR lastSent < date('${today}')))
        OR
        (issueType IN ('Infra', 'Office', 'Prod') AND (lastSent IS NULL OR lastSent < datetime('now', '-3 days')))
        ORDER BY CASE
            WHEN department = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' THEN 1
            ELSE 2
        END
    `;

    db.all(query, [], async (err, rows) => {
        if (err) {
            console.error('Error fetching tasks:', err);
            return;
        }

        for (const task of rows) {
            const keyboard = new InlineKeyboard();
            if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                keyboard
                    .text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`)
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id))
                    .text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
            } else if (['Infra', 'Office', 'Prod'].includes(task.issueType)) {
                keyboard
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id))
                    .text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
            }

            const messageText =
                `–ó–∞–¥–∞—á–∞: ${task.id}\n` +
                `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n` +
                `–°—Å—ã–ª–∫–∞: ${getTaskUrl(task.source, task.id)}\n` +
                `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n` +
                `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n` +
                `–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.issueType}`;

            await ctx.reply(messageText, { reply_markup: keyboard });

            const moscowTimestamp = getMoscowTimestamp();
            db.run('UPDATE tasks SET lastSent = ? WHERE id = ?', [moscowTimestamp, task.id]);
        }
    });
}

// ----------------------------------------------------------------------------------
// 6) –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
// ----------------------------------------------------------------------------------

async function checkForNewComments() {
    try {
        const jql = `project = SUPPORT AND updated >= -7d`;
        const sources = ['sxl', 'betone'];

        const excludedAuthors = Object.values(jiraUserMappings).flatMap(mapping => Object.values(mapping));

        for (const source of sources) {
            const url = `https://jira.${source}.team/rest/api/2/search`;
            const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

            let startAt = 0;
            let total = 0;

            do {
                const response = await axios.get(url, {
                    headers: {
                        'Authorization': `Bearer ${pat}`,
                        'Accept': 'application/json'
                    },
                    params: {
                        jql,
                        maxResults: 50,
                        startAt,
                        fields: 'comment,assignee,summary,priority,issuetype,customfield_10500,customfield_10504'
                    }
                });

                total = response.data.total;
                const issues = response.data.issues;

                for (const issue of issues) {
                    const taskId = `${source}-${issue.key}`;
                    let department = '–ù–µ —É–∫–∞–∑–∞–Ω';

                    if (source === 'sxl') {
                        department = issue.fields.customfield_10500?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
                    } else {
                        department = issue.fields.customfield_10504?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
                    }

                    const comments = issue.fields.comment?.comments;
                    if (!comments || comments.length === 0) {
                        continue;
                    }

                    const lastComment = comments[comments.length - 1];
                    const lastCommentId = lastComment.id;
                    const author = lastComment.author?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º, –µ—Å–ª–∏:
                    //  1) department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", –ò–õ–ò
                    //  2) author ‚àà –Ω–∞—à —Å–ø–∏—Å–æ–∫ excludedAuthors
                    const isTechSupportDept = (department === '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
                    const isOurComment = excludedAuthors.includes(author);

                    if (!isTechSupportDept && !isOurComment) {
                        continue;
                    }

                    db.get(
                        'SELECT lastCommentId FROM task_comments WHERE taskId = ?',
                        [taskId],
                        (err, row) => {
                            if (err) {
                                console.error('Error fetching last comment from DB:', err);
                                return;
                            }

                            if (!row) {
                                // –ù–µ—Ç –∑–∞–ø–∏—Å–∏ => –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤–∏–¥–∏–º
                                sendTelegramMessage(taskId, source, issue, lastComment, author, department, isOurComment);
                                db.run(
                                    `INSERT INTO task_comments (taskId, lastCommentId, assignee)
                                     VALUES (?, ?, ?)`,
                                    [taskId, lastCommentId, issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω']
                                );
                            } else if (row.lastCommentId !== lastCommentId) {
                                // –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π => —É–≤–µ–¥–æ–º–ª—è–µ–º
                                sendTelegramMessage(taskId, source, issue, lastComment, author, department, isOurComment);
                                db.run(
                                    `UPDATE task_comments
                                     SET lastCommentId = ?, assignee = ?
                                     WHERE taskId = ?`,
                                    [lastCommentId, issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω', taskId]
                                );
                            }
                        }
                    );
                }

                startAt += 50;
            } while (startAt < total);
        }
    } catch (error) {
        console.error('Error checking for new comments:', error);
    }
}

// –õ–∏–º–∏—Ç–µ—Ä –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
const limiter = new Bottleneck({
    minTime: 5000,
    maxConcurrent: 1
});
const sendMessageWithLimiter = limiter.wrap(async (chatId, text, opts) => {
    await bot.api.sendMessage(chatId, text, opts);
});

function sendTelegramMessage(combinedId, source, issue, lastComment, author, department, isOurComment) {
    const keyboard = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(source, combinedId));

    const prefix = isOurComment
        ? '–í –∑–∞–¥–∞—á–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n'
        : '–í –∑–∞–¥–∞—á–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n';

    const msg =
        prefix +
        `–ó–∞–¥–∞—á–∞: ${combinedId}\n` +
        `–ò—Å—Ç–æ—á–Ω–∏–∫: ${source}\n` +
        `–û—Ç–¥–µ–ª: ${department}\n` +
        `–°—Å—ã–ª–∫–∞: ${getTaskUrl(source, combinedId)}\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${issue.fields.summary}\n` +
        `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω')}\n` +
        `–¢–∏–ø –∑–∞–¥–∞—á–∏: ${issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${author}\n` +
        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${lastComment.body}`;

    sendMessageWithLimiter(process.env.ADMIN_CHAT_ID, msg, { reply_markup: keyboard })
        .catch(e => console.error('Error sending message to Telegram:', e));
}

// ----------------------------------------------------------------------------------
// 7) –ö–ù–û–ü–ö–ê "–í–ó–Ø–¢–¨ –í –†–ê–ë–û–¢–£"
// ----------------------------------------------------------------------------------

bot.callbackQuery(/^take_task:(.+)$/, async (ctx) => {
    try {
        await ctx.answerCallbackQuery();
        const combinedId = ctx.match[1];
        const username = ctx.from.username;

        db.get('SELECT * FROM tasks WHERE id = ?', [combinedId], async (err, task) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
                const keyboard = new InlineKeyboard()
                    .text('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${combinedId}`)
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl('sxl', combinedId));
                return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.', { reply_markup: keyboard });
            }

            if (!task) {
                const keyboard = new InlineKeyboard()
                    .text('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${combinedId}`)
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl('sxl', combinedId));

                try {
                    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                } catch {}
                return ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.', { reply_markup: keyboard });
            }

            if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                let success = false;
                try {
                    success = await updateJiraTaskStatus(task.source, combinedId, username);
                } catch (errUpd) {
                    console.error('–û—à–∏–±–∫–∞ updateJiraTaskStatus:', errUpd);
                }

                const displayName = usernameMappings[username] || username;
                const keyboard = new InlineKeyboard()
                    .text('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`)
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id));

                if (success) {
                    const msg =
                        `–ó–∞–¥–∞—á–∞: ${task.id}\n` +
                        `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n` +
                        `–°—Å—ã–ª–∫–∞: ${getTaskUrl(task.source, task.id)}\n` +
                        `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n` +
                        `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n` +
                        `–û—Ç–¥–µ–ª: ${task.department}\n` +
                        `–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: ${displayName}`;

                    try {
                        await ctx.editMessageText(msg, { reply_markup: keyboard });
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ editMessageText:', e);
                    }

                    db.run(
                        `INSERT INTO user_actions (username, taskId, action, timestamp)
                         VALUES (?, ?, ?, ?)`,
                        [username, combinedId, 'take_task', getMoscowTimestamp()]
                    );
                } else {
                    await ctx.reply(
                        `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${task.id}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`,
                        { reply_markup: keyboard }
                    );
                }
            } else {
                const keyboard = new InlineKeyboard()
                    .text('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`)
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id));
                await ctx.reply(
                    '–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –¥–ª—è –æ—Ç–¥–µ–ª–∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç.',
                    { reply_markup: keyboard }
                );
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ take_task:', error);
        const keyboard = new InlineKeyboard()
            .text('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${ctx.match[1]}`)
            .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl('sxl', ctx.match[1]));

        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', { reply_markup: keyboard });
    }
});

async function updateJiraTaskStatus(source, combinedId, telegramUsername) {
    try {
        const realKey = extractRealJiraKey(combinedId);
        let transitionId = source === 'sxl' ? '221' : '201';
        const jiraUsername = jiraUserMappings[telegramUsername]?.[source];
        if (!jiraUsername) {
            console.error(`No Jira username for telegram user: ${telegramUsername}`);
            return false;
        }
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const assigneeUrl = `https://jira.${source}.team/rest/api/2/issue/${realKey}/assignee`;
        const r1 = await axios.put(assigneeUrl, { name: jiraUsername }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json'
            }
        });
        if (r1.status !== 204) {
            console.error('Assignee error:', r1.status);
            return false;
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        const transitionUrl = `https://jira.${source}.team/rest/api/2/issue/${realKey}/transitions`;
        const r2 = await axios.post(transitionUrl, {
            transition: { id: transitionId }
        }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json'
            }
        });
        return (r2.status === 204);
    } catch (error) {
        console.error(`Error updating Jira task:`, error);
        return false;
    }
}

// ----------------------------------------------------------------------------------
// 8) –ö–ù–û–ü–ö–ê "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" (toggle_description)
// ----------------------------------------------------------------------------------

function escapeHtml(text) {
    if (!text) return '';
    return text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}

function formatTables(text) {
    return text.replace(/\|(.+?)\|/g, match => `<pre>${match.trim()}</pre>`);
}

function convertCodeBlocks(text) {
    return text
        .replace(/\{code:([\w\-]+)\}([\s\S]*?)\{code\}/g, (match, lang, code) => {
            return `<pre><code class="language-${lang}">${escapeHtml(code.trim())}</code></pre>`;
        })
        .replace(/\{code\}([\s\S]*?)\{code\}/g, (match, code) => {
            return `<pre><code>${escapeHtml(code.trim())}</code></pre>`;
        });
}

function parseCustomMarkdown(text) {
    if (!text) return '';

    text = convertCodeBlocks(text);
    text = formatTables(text);

    return text
        .replace(/\*(.*?)\*/g, '<b>$1</b>')
        .replace(/_(.*?)_/g, '<i>$1</i>')
        .replace(/\+(.*?)\+/g, '<u>$1</u>')
        .replace(/~~(.*?)~~/g, '<s>$1</s>')
        .replace(/(^|\s)`([^`]+)`(\s|$)/g, '$1<code>$2</code>$3')
        .replace(/^\-\s(.*)/gm, '‚Ä¢ $1')
        .replace(/^\*\s(.*)/gm, '‚Ä¢ $1')
        .replace(/^\d+\.\s(.*)/gm, 'üîπ $1')
        .replace(/\n{3,}/g, '\n\n');
}

function formatDescriptionAsHtml(rawDescription) {
    return parseCustomMarkdown(rawDescription || '');
}

bot.callbackQuery(/^toggle_description:(.+)$/, async (ctx) => {
    try {
        await ctx.answerCallbackQuery();
        const combinedId = ctx.match[1];

        let task = await new Promise(resolve => {
            db.get('SELECT * FROM tasks WHERE id = ?', [combinedId], (err, row) => resolve(row));
        });

        let source, issue;

        if (task) {
            source = task.source;
            issue = await getJiraTaskDetails(source, combinedId);
        }

        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ–±—É–µ–º —è–≤–Ω–æ sxl, betone
        if (!issue) {
            issue = await getJiraTaskDetails('sxl', combinedId);
            if (issue) source = 'sxl';
            else {
                issue = await getJiraTaskDetails('betone', combinedId);
                if (issue) source = 'betone';
            }
        }

        if (!issue || !source) {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Jira.');
            return;
        }

        const summary = issue.fields.summary || '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞';
        const fullDescription = issue.fields.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
        const priorityEmoji = getPriorityEmoji(issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω');
        const taskType = issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const taskUrl = getTaskUrl(source, combinedId);
        const taskStatus = issue.fields.status?.name;

        const safeSummary = escapeHtml(summary);
        const safeDescription = formatDescriptionAsHtml(fullDescription);
        const safeTitle = escapeHtml(task?.title || summary);

        const userAction = await new Promise(resolve => {
            db.get(
                `SELECT * FROM user_actions
                 WHERE taskId = ?
                   AND action = "take_task"
                 ORDER BY timestamp DESC LIMIT 1`,
                [combinedId],
                (err, row) => resolve(row)
            );
        });

        const isTaken = !!userAction;
        const takenBy = isTaken ? (usernameMappings[userAction.username] || userAction.username) : '–ù–∏–∫—Ç–æ';

        const currentText = ctx.callbackQuery.message?.text.trimEnd() || "";
        const isExpanded = currentText.endsWith("...");

        const keyboard = new InlineKeyboard();
        if ((task?.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") && (!isTaken || taskStatus === "Open")) {
            keyboard.text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${combinedId}`);
        }
        keyboard
            .text(isExpanded ? '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' : '–°–∫—Ä—ã—Ç—å', `toggle_description:${combinedId}`)
            .url('–û—Ç–∫—Ä—ã—Ç—å –≤ Jira', taskUrl);

        if (!isExpanded) {
            // –ü—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è
            if (issue.fields.attachment && Array.isArray(issue.fields.attachment)) {
                let counter = 1;
                for (const att of issue.fields.attachment) {
                    try {
                        const fileResp = await axios.get(att.content, {
                            responseType: 'arraybuffer',
                            headers: {
                                'Authorization': `Bearer ${
                                    source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE
                                }`
                            }
                        });

                        let originalFilename = att.filename.replace(/[^\w.\-]/g, '_').substring(0, 100);
                        const finalName = `${uuidv4()}_${originalFilename}`;
                        const filePath = path.join(ATTACHMENTS_DIR, finalName);
                        fs.writeFileSync(filePath, fileResp.data);

                        const publicUrl = `${process.env.PUBLIC_BASE_URL}/attachments/${finalName}`;

                        keyboard.row().url(`–í–ª–æ–∂–µ–Ω–∏–µ #${counter++}`, publicUrl);
                    } catch (errAttach) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏—è:', errAttach);
                    }
                }
            }

            await ctx.editMessageText(
                `<b>–ó–∞–¥–∞—á–∞:</b> ${combinedId}\n` +
                `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
                `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priorityEmoji}\n` +
                `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${taskType}\n` +
                `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${safeSummary}\n` +
                `<b>–í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É:</b> ${takenBy}\n\n` +
                `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${safeDescription}\n\n...`,
                { parse_mode: 'HTML', reply_markup: keyboard }
            );
        } else {
            await ctx.editMessageText(
                `<b>–ó–∞–¥–∞—á–∞:</b> ${combinedId}\n` +
                `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
                `<b>–°—Å—ã–ª–∫–∞:</b> <a href="${taskUrl}">${taskUrl}</a>\n` +
                `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${safeTitle}\n` +
                `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priorityEmoji}\n` +
                `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${taskType}\n` +
                `<b>–í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É:</b> ${takenBy}\n`,
                { parse_mode: 'HTML', reply_markup: keyboard }
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ toggle_description:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
    }
});

// ----------------------------------------------------------------------------------
// 9) –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° CONFLUENCE (–ø—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã /duty, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
// ----------------------------------------------------------------------------------

async function fetchDutyEngineer() {
    try {
        const pageId = '3539406'; // –ø—Ä–∏–º–µ—Ä ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence
        const token = process.env.CONFLUENCE_API_TOKEN;

        const resp = await axios.get(`https://wiki.sxl.team/rest/api/2/content/${pageId}?expand=body.view`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        let html = resp.data?.body?.view?.value;
        if (!html) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –∏–∑ body.view.value');
            return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
        }

        // –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:
        // ...
        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ (–ø—Ä–∏–º–µ—Ä)';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Confluence:', error);
        throw error;
    }
}

bot.command('duty', async (ctx) => {
    try {
        const engineer = await fetchDutyEngineer();
        await ctx.reply(`–î–µ–∂—É—Ä–Ω—ã–π: ${engineer}`);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ duty:', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ.');
    }
});

// ----------------------------------------------------------------------------------
// 10) –ú–ù–û–ì–û –§–ê–ô–õ–û–í, scheduleByMonthYear[year][month][day] = ...
// ----------------------------------------------------------------------------------

// –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: "mart", "april", "may", ...
const monthWords = {
    january: 1,
    february: 2,
    mart: 3,
    april: 4,
    may: 5,
    june: 6,
    july: 7,
    august: 8,
    september: 9,
    october: 10,
    november: 11,
    december: 12,
};

const scheduleByMonthYear = {}; 
// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: scheduleByMonthYear[–≥–æ–¥][–º–µ—Å—è—Ü][dayNum] = { '9-21': [...], '10-19': [...], '21-9': [...] }

// –ü–∞—Ä—Å–∏–º –≤—Å–µ .xlsx —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ raspisanie
function loadAllSchedules() {
    const dirPath = path.join(__dirname, 'raspisanie');
    if (!fs.existsSync(dirPath)) {
        console.warn(`–ü–∞–ø–∫–∞ 'raspisanie' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
    }

    const files = fs.readdirSync(dirPath).filter(f => f.toLowerCase().endsWith('.xlsx'));
    const re = /^([a-zA-Z–∞-—è–ê-–Ø]+)_(\d{4})\.xlsx$/;

    for (const file of files) {
        const match = re.exec(file);
        if (!match) {
            console.warn(`–§–∞–π–ª ${file} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É "<monthWord>_<year>.xlsx"`);
            continue;
        }
        const monthWord = match[1].toLowerCase(); // "mart", "april", ...
        const yearNum = parseInt(match[2], 10);   // 2025, –Ω–∞–ø—Ä–∏–º–µ—Ä

        const monthNum = monthWords[monthWord]; // lookup
        if (!monthNum) {
            console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü '${monthWord}' –≤ —Ñ–∞–π–ª–µ ${file}`);
            continue;
        }

        // –ü–∞—Ä—Å–∏–º Excel
        const filePath = path.join(dirPath, file);
        const scheduleForMonth = parseOneExcelFile(filePath);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º scheduleByMonthYear
        if (!scheduleByMonthYear[yearNum]) {
            scheduleByMonthYear[yearNum] = {};
        }
        scheduleByMonthYear[yearNum][monthNum] = scheduleForMonth;
    }
}

/**
 * –ü–∞—Ä—Å–∏—Ç –û–î–ò–ù Excel-—Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:
 * - –ò—â–µ—Ç —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ = "–§–ò–û".
 * - –î–∞–ª–µ–µ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ [1..N] = –¥–Ω–∏ (1..31).
 * - –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç: day => { '9-21': [...], '10-19': [...], '21-9': [...] }
 */
function parseOneExcelFile(filePath) {
    const workbook = xlsx.readFile(filePath);
    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];

    const raw = xlsx.utils.sheet_to_json(sheet, { header: 1, defval: "" });

    let headerRowIndex = -1;
    for (let i = 0; i < raw.length; i++) {
        if (String(raw[i][0]).trim().toLowerCase() === "—Ñ–∏–æ") {
            headerRowIndex = i;
            break;
        }
    }
    if (headerRowIndex === -1) {
        console.warn(`–í —Ñ–∞–π–ª–µ ${path.basename(filePath)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ "–§–ò–û"`);
        return {};
    }

    // dayColumnMap[day] = colIndex
    const dayColumnMap = {};
    for (let col = 1; col < raw[headerRowIndex].length; col++) {
        const cellVal = String(raw[headerRowIndex][col]).trim();
        const dayNum = parseInt(cellVal, 10);
        if (!isNaN(dayNum) && dayNum >= 1 && dayNum <= 31) {
            dayColumnMap[dayNum] = col;
        }
    }

    const schedule = {};
    for (let d = 1; d <= 31; d++) {
        schedule[d] = {
            "9-21": [],
            "10-19": [],
            "21-9": []
        };
    }

    // –Ω–∏–∂–µ –∏–¥—É—Ç —Å—Ç—Ä–æ–∫–∏ —Å –§–ò–û
    for (let i = headerRowIndex + 1; i < raw.length; i++) {
        const row = raw[i];
        if (!row || row.length === 0) continue;

        const fio = String(row[0]).trim();
        if (!fio) continue;

        for (const dayStr of Object.keys(dayColumnMap)) {
            const day = parseInt(dayStr, 10);
            const colIndex = dayColumnMap[day];
            const cellVal = String(row[colIndex] || "").trim().toLowerCase();

            if (cellVal === "9-21" || cellVal === "9‚Äì21") {
                schedule[day]["9-21"].push(fio);
            } else if (cellVal === "10-19" || cellVal === "10‚Äì19") {
                schedule[day]["10-19"].push(fio);
            } else if (cellVal === "21-9" || cellVal === "21‚Äì9") {
                schedule[day]["21-9"].push(fio);
            } else {
                // –æ—Ç–ø—É—Å–∫, –ø—É—Å—Ç–æ, –ø—Ä–æ–ø—É—Å–∫
            }
        }
    }

    return schedule;
}

/**
 * –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã (DateTime).
 * –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è year/month, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null. –ò–Ω–∞—á–µ ‚Äì –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞:
 *   { dayNum => { '9-21': [...], '10-19': [...], '21-9': [...] } }
 */
function getScheduleForDate(dt) {
    const year = dt.year;
    const month = dt.month;
    const day = dt.day;

    const scheduleForYear = scheduleByMonthYear[year];
    if (!scheduleForYear) {
        return null;
    }
    const scheduleForMonth = scheduleForYear[month];
    if (!scheduleForMonth) {
        return null;
    }
    return scheduleForMonth[day] || null;
}

// ----------------------------------------------------------------------------------
// 11) –£–¢–†–û –ò –í–ï–ß–ï–† –ò–ó –†–ê–°–ü–ò–°–ê–ù–ò–Ø
// ----------------------------------------------------------------------------------

function getDayMessageText() {
    const now = getMoscowDateTime();
    const daySchedule = getScheduleForDate(now);
    if (!daySchedule) {
        return `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${now.toFormat("dd.MM.yyyy")}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`;
    }

    const arr9_21 = daySchedule["9-21"] || [];
    const arr10_19 = daySchedule["10-19"] || [];
    const arr21_9 = daySchedule["21-9"] || [];

    return `üîî <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, ${now.toFormat("dd.MM.yyyy")} (10:00)</b>\n` +
           `\n<b>–î–Ω–µ–≤–Ω–∞—è (9-21):</b> ${arr9_21.length ? arr9_21.join(", ") : "‚Äî"}\n` +
           `<b>–î–Ω–µ–≤–Ω–∞—è 5/2 (10-19):</b> ${arr10_19.length ? arr10_19.join(", ") : "‚Äî"}\n` +
           `<b>–°–µ–≥–æ–¥–Ω—è –≤ –Ω–æ—á—å (21-9):</b> ${arr21_9.length ? arr21_9.join(", ") : "‚Äî"}\n`;
}

function getNightMessageText() {
    const now = getMoscowDateTime();
    const todaySchedule = getScheduleForDate(now) || {};
    
    const tomorrow = now.plus({ days: 1 });
    const tomorrowSchedule = getScheduleForDate(tomorrow) || {};

    const arr21_9_today = todaySchedule["21-9"] || [];
    const arr9_21_tomorrow = tomorrowSchedule["9-21"] || [];
    const arr10_19_tomorrow = tomorrowSchedule["10-19"] || [];

    return `üåô <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–µ—á–µ—Ä, ${now.toFormat("dd.MM.yyyy")} (21:00)</b>\n` +
           `\n<b>–°–µ–≥–æ–¥–Ω—è –≤ –Ω–æ—á—å (21-9):</b> ${arr21_9_today.length ? arr21_9_today.join(", ") : "‚Äî"}\n` +
           `<b>–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ (9-21):</b> ${arr9_21_tomorrow.length ? arr9_21_tomorrow.join(", ") : "‚Äî"}\n` +
           `<b>–ó–∞–≤—Ç—Ä–∞ 5/2 (10-19):</b> ${arr10_19_tomorrow.length ? arr10_19_tomorrow.join(", ") : "‚Äî"}\n`;
}

// ----------------------------------------------------------------------------------
// 12) –ö–†–û–ù –ó–ê–î–ê–ß–ò (10:00, 21:00, –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 11:00) + —Å—Ç–∞—Ä—ã–µ nightShiftCron/morningShiftCron
// ----------------------------------------------------------------------------------

// 10:00 ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Excel

cron.schedule('* * * * *', async () => {
    try {
        console.log('[CRON] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ Jira (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)...');
        await fetchAndStoreJiraTasks();
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –∂–µ —Ä–∞—Å—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, —Ç–æ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å sendJiraTasks:
        // const ctx = { reply: (text, opts) => bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, opts) };
        // await sendJiraTasks(ctx);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ CRON fetchAndStoreJiraTasks:', err);
    }
}, {
    timezone: 'Europe/Moscow'
});

// ---------------------------------------------------------------------------
// –ö–†–û–ù –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
// ---------------------------------------------------------------------------
cron.schedule('*/5 * * * *', async () => {
    try {
        console.log('[CRON] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)...');
        await checkForNewComments();
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ CRON checkForNewComments:', err);
    }
}, {
    timezone: 'Europe/Moscow'
});


cron.schedule('0 10 * * *', () => {
    try {
        const text = getDayMessageText();
        bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, { parse_mode: 'HTML' });
    } catch (err) {
        console.error('[CRON 10:00] –û—à–∏–±–∫–∞:', err);
    }
}, { timezone: 'Europe/Moscow' });

// 21:00 ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Excel
cron.schedule('0 21 * * *', () => {
    try {
        const text = getNightMessageText();
        bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, { parse_mode: 'HTML' });
    } catch (err) {
        console.error('[CRON 21:00] –û—à–∏–±–∫–∞:', err);
    }
}, { timezone: 'Europe/Moscow' });

// –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 11:00 (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
cron.schedule('0 11 * * *', () => {
    const now = getMoscowDateTime();
    const daysInMonth = now.daysInMonth;
    const today = now.day;
    if (today === daysInMonth) {
        bot.api.sendMessage(
            process.env.ADMIN_CHAT_ID,
            `–°–µ–≥–æ–¥–Ω—è ${now.toFormat("dd.MM.yyyy")} ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞.\n` +
            `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–∞–ø–∫—É "raspisanie"!`
        );
    }
}, { timezone: 'Europe/Moscow' });

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã /test_day –∏ /test_night
bot.command('test_day', async (ctx) => {
    try {
        const text = getDayMessageText();
        await ctx.reply(text, { parse_mode: 'HTML' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ /test_day:', err);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
});

bot.command('test_night', async (ctx) => {
    try {
        const text = getNightMessageText();
        await ctx.reply(text, { parse_mode: 'HTML' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ /test_night:', err);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
});

// –°—Ç–∞—Ä—ã–µ nightShiftCron / morningShiftCron:
let nightShiftCron = null;
let morningShiftCron = null;

function setupOldShiftCrons() {
    if (!nightShiftCron) {
        nightShiftCron = cron.schedule('0 1 * * *', async () => {
            await bot.api.sendMessage(
                process.env.ADMIN_CHAT_ID,
                '–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ó–∞–ø–æ–ª–Ω–∏ —Ç–∏–∫–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω—ã.'
            );
        }, { scheduled: true, timezone: 'Europe/Moscow' });
    }

    if (!morningShiftCron) {
        morningShiftCron = cron.schedule('0 10 * * *', async () => {
            try {
                // –ü—Ä–∏–º–µ—Ä: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ..."
                const engineer = await fetchDutyEngineer();
                await bot.api.sendMessage(
                    process.env.ADMIN_CHAT_ID,
                    `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—Ä–æ–≤–µ—Ä—å –∑–∞–¥–∞—á–∏.\n–î–µ–∂—É—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${engineer}`
                );
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–∂—É—Ä–Ω–æ–≥–æ:', err);
            }
        }, { scheduled: true, timezone: 'Europe/Moscow' });
    }
}

// ----------------------------------------------------------------------------------
// 13) –°–¢–ê–†–¢ –ë–û–¢–ê (initializeBotTasks, /start, /forcestart)
// ----------------------------------------------------------------------------------

async function initializeBotTasks() {
    console.log('[BOT INIT] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á...');

    // 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    loadAllSchedules();

    // 2) Fetch Jira
    await fetchAndStoreJiraTasks();

    // 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    const ctx = { reply: (text, opts) => bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, opts) };
    await sendJiraTasks(ctx);

    // 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    checkForNewComments();

    // 5) –ó–∞–ø—É—Å–∫–∞–µ–º "—Å—Ç–∞—Ä—ã–µ" –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏ 1:00 / 10:00
    setupOldShiftCrons();

    db.all('SELECT taskId FROM task_comments', [], async (err, rows) => {
        if (err) {
            console.error('Error fetching task_comments:', err);
            return;
        }
        console.log(`Total task_comments in database: ${rows.length}`);
    });

    console.log('[BOT INIT] –í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã.');
}

bot.command('start', async (ctx) => {
    await ctx.reply('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã. –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: /forcestart');
});

bot.command('forcestart', async (ctx) => {
    await initializeBotTasks();
    await ctx.reply('‚ôªÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—Ä—É—á–Ω—É—é (–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Ç–∞–Ω–æ).');
});

bot.start({
    onStart: (botInfo) => {
      console.log(`‚úÖ Bot ${botInfo.username} is up and running`);
      initializeBotTasks();
    }
  });
  
