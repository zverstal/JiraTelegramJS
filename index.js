require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const { DateTime } = require('luxon');
const cron = require('node-cron');
const Bottleneck = require('bottleneck');
const express = require('express');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const xlsx = require('xlsx'); // –î–ª—è —á—Ç–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–æ–≤ (–∏–∑ –±—É—Ñ–µ—Ä–∞)

// ----------------------------------------------------------------------------------
// 1) –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê, –ë–ê–ó–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ----------------------------------------------------------------------------------

const bot = new Bot(process.env.BOT_API_KEY);
const db = new sqlite3.Database('tasks.db');

function getMoscowTimestamp() {
  return DateTime.now().setZone('Europe/Moscow').toFormat('yyyy-MM-dd HH:mm:ss');
}
function getMoscowDateTime() {
  return DateTime.now().setZone('Europe/Moscow');
}

// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã) ‚Äì —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –∑–∞–¥–∞—á
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS tasks (
    id TEXT PRIMARY KEY,
    title TEXT,
    priority TEXT,
    department TEXT,
    issueType TEXT,
    dateAdded DATETIME,
    lastSent DATETIME,
    source TEXT,
    reporter TEXT,
    reporterLogin TEXT,
    assignee TEXT,
    assigneeLogin TEXT,
    status TEXT
  )`);
  db.run(`CREATE TABLE IF NOT EXISTS user_actions (
    username TEXT,
    taskId TEXT,
    action TEXT,
    timestamp DATETIME,
    FOREIGN KEY(taskId) REFERENCES tasks(id)
  )`);
  db.run(`CREATE TABLE IF NOT EXISTS task_comments (
    taskId TEXT PRIMARY KEY,
    lastCommentId TEXT,
    assignee TEXT,
    FOREIGN KEY(taskId) REFERENCES tasks(id)
  )`);
});

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ —ç–º–æ–¥–∑–∏
function getPriorityEmoji(priority) {
  const emojis = {
    Blocker: 'üö®',
    High: 'üî¥',
    Medium: 'üü°',
    Low: 'üü¢'
  };
  return emojis[priority] || '';
}

// –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–ª—é—á–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "sxl-SUPPORT-19980" ‚Üí "SUPPORT-19980"
function extractRealJiraKey(fullId) {
  if (fullId.startsWith('sxl-') || fullId.startsWith('betone-')) {
    const parts = fullId.split('-');
    parts.shift();
    return parts.join('-');
  }
  return fullId;
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –∑–∞–¥–∞—á–∏ Jira
function getTaskUrl(source, combinedId) {
  const realKey = extractRealJiraKey(combinedId);
  return `https://jira.${source}.team/browse/${realKey}`;
}

// –ú–∞–ø–ø–∏–Ω–≥–∏: Telegram username ‚Üí –§–ò–û –∏ Jira –ª–æ–≥–∏–Ω
const usernameMappings = {
  "lipchinski": "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
  "pr0spal": "–ï–≤–≥–µ–Ω–∏–π –®—É—à–∫–æ–≤",
  "fdhsudgjdgkdfg": "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
  "EuroKaufman": "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤",
  "Nikolay_Gonchar": "–ù–∏–∫–æ–ª–∞–π –ì–æ–Ω—á–∞—Ä",
  "KIRILlKxX": "–ö–∏—Ä–∏–ª–ª –ê—Ç–∞–Ω–∏–∑—è–æ–≤",
  "marysh353": "–î–∞–Ω–∏–∏–ª –ú–∞—Ä—ã—à–µ–≤"
};
const jiraUserMappings = {
  "lipchinski": { "sxl": "d.selivanov", "betone": "dms" },
  "pr0spal": { "sxl": "e.shushkov", "betone": "es" },
  "fdhsudgjdgkdfg": { "sxl": "d.maslov", "betone": "dam" },
  "EuroKaufman": { "sxl": "d.baratov", "betone": "db" },
  "Nikolay_Gonchar": { "sxl": "n.gonchar", "betone": "ng" },
  "KIRILlKxX": { "sxl": "k.ataniyazov", "betone": "ka" },
  "marysh353": { "sxl": "d.maryshev", "betone": "dma" }
};

// ----------------------------------------------------------------------------------
// 2) EXPRESS-—Å–µ—Ä–≤–µ—Ä –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ attachments
// ----------------------------------------------------------------------------------

const app = express();
const ATTACHMENTS_DIR = path.join(__dirname, 'attachments');
if (!fs.existsSync(ATTACHMENTS_DIR)) { fs.mkdirSync(ATTACHMENTS_DIR); }
app.use('/attachments', express.static(ATTACHMENTS_DIR));
const EXPRESS_PORT = 3000;
app.listen(EXPRESS_PORT, () => {
  console.log(`Express server listening on port ${EXPRESS_PORT}`);
});
cron.schedule('0 3 * * *', () => {
  console.log('[CRON] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ attachments...');
  const now = Date.now();
  const cutoff = now - 24 * 60 * 60 * 1000;
  fs.readdir(ATTACHMENTS_DIR, (err, files) => {
    if (err) { console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ attachments:', err); return; }
    files.forEach(file => {
      const filePath = path.join(ATTACHMENTS_DIR, file);
      fs.stat(filePath, (statErr, stats) => {
        if (statErr) { console.error('–û—à–∏–±–∫–∞ fs.stat:', statErr); return; }
        if (stats.mtimeMs < cutoff) {
          fs.unlink(filePath, delErr => {
            if (delErr) { console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', delErr); }
            else { console.log(`–§–∞–π–ª ${file} —É–¥–∞–ª—ë–Ω (—Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫)`); }
          });
        }
      });
    });
  });
}, { timezone: 'Europe/Moscow' });

// ----------------------------------------------------------------------------------
// 3) –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å Wiki –∏ –ø–∞—Ä—Å–∏–Ω–≥ Excel-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
// ----------------------------------------------------------------------------------

const monthNamesRu = {
  '—è–Ω–≤–∞—Ä—å': 1, '—Ñ–µ–≤—Ä–∞–ª—å': 2, '–º–∞—Ä—Ç': 3, '–∞–ø—Ä–µ–ª—å': 4,
  '–º–∞–π': 5, '–∏—é–Ω—å': 6, '–∏—é–ª—å': 7, '–∞–≤–≥—É—Å—Ç': 8,
  '—Å–µ–Ω—Ç—è–±—Ä—å': 9, '–æ–∫—Ç—è–±—Ä—å': 10, '–Ω–æ—è–±—Ä—å': 11, '–¥–µ–∫–∞–±—Ä—å': 12
};
const PARENT_PAGE_ID = '55414233';
let pageMap = {};
const schedulesByKey = {};

async function buildPageMapForSchedules() {
  try {
    const baseUrl = 'https://wiki.sxl.team';
    const token = process.env.CONFLUENCE_API_TOKEN;
    const url = `${baseUrl}/rest/api/content/${PARENT_PAGE_ID}/child/page?limit=200`;
    const resp = await axios.get(url, {
      headers: { 'Authorization': `Bearer ${token}`, 'Accept': 'application/json' }
    });
    if (!resp.data || !resp.data.results) throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è ${PARENT_PAGE_ID}`);
    const pages = resp.data.results;
    const newMap = {};
    for (const p of pages) {
      const title = (p.title || "").toLowerCase().trim();
      const matches = title.match(/–≥—Ä–∞—Ñ–∏–∫\s+([–∞-—è—ë]+)\s+(\d{4})/);
      if (matches) {
        const monthWord = matches[1];
        const yearStr = matches[2];
        const year = parseInt(yearStr, 10);
        const month = monthNamesRu[monthWord];
        if (year && month) newMap[`${year}-${month}`] = p.id;
      }
    }
    pageMap = newMap;
    console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∫–∞—Ä—Ç—É –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü:', pageMap);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü:', err);
  }
}

async function fetchExcelFromConfluence(pageId) {
  try {
    const token = process.env.CONFLUENCE_API_TOKEN;
    const baseUrl = 'https://wiki.sxl.team';
    const attachmentsUrl = `${baseUrl}/rest/api/content/${pageId}/child/attachment`;
    const resp = await axios.get(attachmentsUrl, {
      headers: { 'Authorization': `Bearer ${token}`, 'Accept': 'application/json' }
    });
    if (!resp.data || !resp.data.results || resp.data.results.length === 0) {
      throw new Error(`–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageId} –≤–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`);
    }
    let attachment = resp.data.results.find(a =>
      a.metadata?.mediaType === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    ) || resp.data.results[0];
    const downloadUrl = attachment._links?.download;
    if (!downloadUrl) throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ download —É –≤–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageId}`);
    const fileResp = await axios.get(baseUrl + downloadUrl, {
      headers: { 'Authorization': `Bearer ${token}` },
      responseType: 'arraybuffer'
    });
    return Buffer.from(fileResp.data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Excel –∏–∑ Confluence:', err);
    throw err;
  }
}

function parseScheduleFromBuffer(xlsxBuffer) {
  const workbook = xlsx.read(xlsxBuffer, { type: 'buffer' });
  const sheetName = workbook.SheetNames[0];
  const sheet = workbook.Sheets[sheetName];
  const raw = xlsx.utils.sheet_to_json(sheet, { header: 1, defval: "" });
  let headerRowIndex = -1;
  for (let i = 0; i < raw.length; i++) {
    const firstCell = String(raw[i][0] || "").trim().toLowerCase();
    if (firstCell === "—Ñ–∏–æ") { headerRowIndex = i; break; }
  }
  if (headerRowIndex < 0) throw new Error("–í Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –≥–¥–µ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ = '–§–ò–û'");
  const dayColumnMap = {};
  const headerRow = raw[headerRowIndex];
  for (let col = 1; col < headerRow.length; col++) {
    const val = String(headerRow[col] || "").trim();
    const dayNum = parseInt(val, 10);
    if (!isNaN(dayNum) && dayNum >= 1 && dayNum <= 31) dayColumnMap[dayNum] = col;
  }
  const schedule = {};
  for (let d = 1; d <= 31; d++) { schedule[d] = { "9-21": [], "10-19": [], "21-9": [] }; }
  let rowIndex = headerRowIndex + 2;
  for (; rowIndex < raw.length; rowIndex++) {
    const row = raw[rowIndex];
    if (!row || row.length === 0) break;
    const fioCell = String(row[0] || "").trim();
    if (!fioCell) break;
    const lowFio = fioCell.toLowerCase();
    if (
      lowFio.startsWith("–∏—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫") ||
      lowFio.startsWith("–∏—Ç–æ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç") ||
      lowFio.startsWith("—Å –≥—Ä–∞—Ñ–∏–∫–æ–º") ||
      lowFio.startsWith("–∏—Ç–æ–≥–æ –≤ –¥–µ–Ω—å") ||
      lowFio === "—Ñ–∏–æ"
    ) break;
    for (const dStr in dayColumnMap) {
      const d = parseInt(dStr, 10);
      const colIndex = dayColumnMap[d];
      const cellVal = String(row[colIndex] || "").trim().toLowerCase().replace(/‚Äì/g, '-');
      if (cellVal === "9-21") schedule[d]["9-21"].push(fioCell);
      else if (cellVal === "10-19") schedule[d]["10-19"].push(fioCell);
      else if (cellVal === "21-9") schedule[d]["21-9"].push(fioCell);
    }
  }
  return schedule;
}

async function loadScheduleForMonthYear(year, month) {
  const key = `${year}-${month}`;
  if (!pageMap[key]) {
    console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω pageId –¥–ª—è "${year}-${month}". –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ì—Ä–∞—Ñ–∏–∫ ..."`);
    schedulesByKey[key] = {};
    return;
  }
  const pageId = pageMap[key];
  const buffer = await fetchExcelFromConfluence(pageId);
  const scheduleObj = parseScheduleFromBuffer(buffer);
  schedulesByKey[key] = scheduleObj;
  console.log(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${key} (pageId=${pageId}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.`);
}

async function getScheduleForDate(dt) {
  const y = dt.year, m = dt.month, key = `${y}-${m}`;
  if (!schedulesByKey[key]) {
    console.log(`[getScheduleForDate] –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ${key}, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å...`);
    await loadScheduleForMonthYear(y, m);
  }
  const scheduleObj = schedulesByKey[key] || {};
  return scheduleObj[dt.day] || null;
}

// ----------------------------------------------------------------------------------
// 4) –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–∑ Wiki
// ----------------------------------------------------------------------------------
async function fetchDutyEngineer() {
    try {
        const pageId = '3539406'; // ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≥–¥–µ –ª–µ–∂–∏—Ç —Ç–∞–±–ª–∏—Ü–∞
        const token = process.env.CONFLUENCE_API_TOKEN;

        // –ó–∞–±–∏—Ä–∞–µ–º HTML
        const resp = await axios.get(`https://wiki.sxl.team/rest/api/content/${pageId}?expand=body.view`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        let html = resp.data?.body?.view?.value;
        if (!html) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –∏–∑ body.view.value');
            return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
        }

        // –ß—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2024 –≥–æ–¥–∞, –æ–±—Ä–µ–∑–∞–µ–º HTML –¥–æ —Å–ª–æ–≤–∞ "2024"
        const marker = '<span class="expand-control-text conf-macro-render">2024</span>';
        const markerIndex = html.indexOf(marker);
        if (markerIndex !== -1) {
            html = html.slice(0, markerIndex);
        }

        // –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞:
        // <tr><td>1</td><td>02.01-08.01</td><td>–ò–≤–∞–Ω–æ–≤ –ò.–ò.</td></tr>
        // –ò —Ç.–¥.

        const rowRegex = /<(?:tr|TR)[^>]*>\s*<td[^>]*>(\d+)<\/td>\s*<td[^>]*>(\d{2}\.\d{2}-\d{2}\.\d{2})<\/td>\s*<td[^>]*>([^<]+)<\/td>/g;
        const schedule = [];
        let match;
        while ((match = rowRegex.exec(html)) !== null) {
            schedule.push({
                index: match[1],      // "1"
                range: match[2],     // "02.01-08.01"
                name: match[3].trim() // "–ò–≤–∞–Ω–æ–≤ –ò.–ò."
            });
        }

        if (schedule.length === 0) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –∏–∑ HTML');
            return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
        }

        // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞)
        const now = DateTime.now().setZone('Europe/Moscow');

        // –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) –∏ –∫–æ–Ω–µ—Ü
        const startOfWeek = now.startOf('week'); // Luxon –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: startOf('week') = –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        const endOfWeek = startOfWeek.plus({ days: 6 });
        const currentYear = startOfWeek.year;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –ø—É–Ω–∫—Ç schedule —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ–π
        for (const item of schedule) {
            const [startStr, endStr] = item.range.split('-');
            const [startDay, startMonth] = startStr.split('.');
            const [endDay, endMonth] = endStr.split('.');

            const scheduleStart = DateTime.fromObject({
                year: currentYear,
                month: parseInt(startMonth, 10),
                day: parseInt(startDay, 10)
            });
            const scheduleEnd = DateTime.fromObject({
                year: currentYear,
                month: parseInt(endMonth, 10),
                day: parseInt(endDay, 10)
            });

            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            if (
                scheduleStart.hasSame(startOfWeek, 'day') &&
                scheduleStart.hasSame(startOfWeek, 'month') &&
                scheduleEnd.hasSame(endOfWeek, 'day') &&
                scheduleEnd.hasSame(endOfWeek, 'month')
            ) {
                return item.name;
            }
        }

        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Confluence (–¥–µ–∂—É—Ä–Ω—ã–π):', error);
        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
    }
}

// ----------------------------------------------------------------------------------
// 5) –†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ Jira: –ø–æ–ª—É—á–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞
// ----------------------------------------------------------------------------------
async function fetchAndStoreJiraTasks() {
  await fetchAndStoreTasksFromJira('sxl', 'https://jira.sxl.team/rest/api/2/search', process.env.JIRA_PAT_SXL, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
  await fetchAndStoreTasksFromJira('betone', 'https://jira.betone.team/rest/api/2/search', process.env.JIRA_PAT_BETONE, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
}

async function fetchAndStoreTasksFromJira(source, url, pat, ...departments) {
  try {
    console.log(`Fetching tasks from ${source} Jira...`);
    const departmentQuery = departments.map(dep => `"${dep}"`).join(" OR –û—Ç–¥–µ–ª = ");
    let jql;
    if (source === 'sxl') {
      jql = `
        project = SUPPORT AND (
          (issuetype = Infra AND status = "Open") OR
          (issuetype = Office AND status = "Under review") OR
          (issuetype = Office AND status = "Waiting for support") OR
          (issuetype = Prod AND status = "Waiting for Developers approval") OR
          (–û—Ç–¥–µ–ª = ${departmentQuery} AND status = "Open")
        )
      `;
    } else {
      jql = `project = SUPPORT AND (–û—Ç–¥–µ–ª = ${departmentQuery}) AND status = "Open"`;
    }
    const response = await axios.get(url, {
      headers: { 'Authorization': `Bearer ${pat}`, 'Accept': 'application/json' },
      params: { jql }
    });
    console.log(`${source} Jira API response:`, response.data);
    const fetchedTaskIds = response.data.issues.map(issue => `${source}-${issue.key}`);
    await new Promise((resolve, reject) => {
      const placeholders = fetchedTaskIds.map(() => '?').join(',');
      db.run(
        `DELETE FROM tasks
         WHERE id NOT IN (${placeholders})
           AND source = ?`,
        [...fetchedTaskIds, source],
        function(err) { err ? reject(err) : resolve(); }
      );
    });
    for (const issue of response.data.issues) {
      const uniqueId = `${source}-${issue.key}`;
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é (reporter/creator), –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ —Å—Ç–∞—Ç—É—Å—É
      const reporterObj = issue.fields.reporter || issue.fields.creator || { name: '–ù–µ —É–∫–∞–∑–∞–Ω', displayName: '–ù–µ —É–∫–∞–∑–∞–Ω' };
      const reporterText = reporterObj.displayName || reporterObj.name;
      const reporterLogin = reporterObj.name || '–ù–µ —É–∫–∞–∑–∞–Ω';
      const assigneeObj = issue.fields.assignee || { name: '–ù–µ —É–∫–∞–∑–∞–Ω', displayName: '–ù–µ —É–∫–∞–∑–∞–Ω' };
      const assigneeText = assigneeObj.displayName || assigneeObj.name;
      const assigneeLogin = assigneeObj.name || '–ù–µ —É–∫–∞–∑–∞–Ω';
      const status = issue.fields.status ? issue.fields.status.name : '–ù–µ —É–∫–∞–∑–∞–Ω';
      const task = {
        id: uniqueId,
        title: issue.fields.summary,
        priority: issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
        issueType: issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
        department: (
          (source === 'betone' && issue.fields.customfield_10504)
            ? issue.fields.customfield_10504.value
            : ((source === 'sxl' && issue.fields.customfield_10500)
                 ? issue.fields.customfield_10500.value
                 : '–ù–µ —É–∫–∞–∑–∞–Ω')
        ),
        dateAdded: getMoscowTimestamp(),
        source,
        reporter: reporterText,
        reporterLogin: reporterLogin,
        assignee: assigneeText,
        assigneeLogin: assigneeLogin,
        status: status
      };
      const existingTask = await new Promise((resolve, reject) => {
        db.get('SELECT * FROM tasks WHERE id = ?', [uniqueId], (err, row) => err ? reject(err) : resolve(row));
      });
      if (existingTask) {
        db.run(
          `UPDATE tasks SET title = ?, priority = ?, issueType = ?, department = ?, source = ?, reporter = ?, reporterLogin = ?, assignee = ?, assigneeLogin = ?, status = ? WHERE id = ?`,
          [task.title, task.priority, task.issueType, task.department, task.source, task.reporter, task.reporterLogin, task.assignee, task.assigneeLogin, task.status, task.id]
        );
      } else {
        db.run(
          `INSERT OR REPLACE INTO tasks (id, title, priority, issueType, department, dateAdded, lastSent, source, reporter, reporterLogin, assignee, assigneeLogin, status)
           VALUES (?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?)`,
          [task.id, task.title, task.priority, task.issueType, task.department, task.dateAdded, task.source, task.reporter, task.reporterLogin, task.assignee, task.assigneeLogin, task.status]
        );
      }
    }
  } catch (error) {
    console.error(`Error fetching and storing tasks from ${source} Jira:`, error);
  }
}

async function getJiraTaskDetails(source, combinedId) {
  try {
    const realKey = extractRealJiraKey(combinedId);
    const url = `https://jira.${source}.team/rest/api/2/issue/${realKey}?fields=summary,description,attachment,priority,issuetype,status,assignee,reporter,creator`;
    const pat = (source === 'sxl') ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;
    console.log(`[getJiraTaskDetails] GET ${url}`);
    const response = await axios.get(url, {
      headers: { 'Authorization': `Bearer ${pat}`, 'Accept': 'application/json' }
    });
    return response.data;
  } catch (error) {
    console.error(`[getJiraTaskDetails] –û—à–∏–±–∫–∞ GET ${source}-${combinedId}:`, error);
    return null;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id –ø–æ task.id
const messageIdCache = {};

async function sendJiraTasks(ctx) {
  const today = getMoscowTimestamp().split(' ')[0];
  const query = `
    SELECT * FROM tasks WHERE
      (department = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" AND (lastSent IS NULL OR lastSent < date('${today}')))
      OR
      (issueType IN ('Infra', 'Office', 'Prod') AND (lastSent IS NULL OR lastSent < datetime('now', '-3 days')))
    ORDER BY CASE WHEN department = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' THEN 1 ELSE 2 END
  `;
  db.all(query, [], async (err, rows) => {
    if (err) { console.error('Error fetching tasks:', err); return; }

    for (const task of rows) {
      const keyboard = new InlineKeyboard();

      if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
        keyboard
          .text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`)
          .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id))
          .text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
      } else if (['Infra', 'Office', 'Prod'].includes(task.issueType)) {
        keyboard
          .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id))
          .text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
      }

      // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageText =
        `<b>–ó–∞–¥–∞—á–∞:</b> ${escapeHtml(task.id)}\n` +
        `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${escapeHtml(task.source)}\n` +
        `<b>–°—Å—ã–ª–∫–∞:</b> <a href="${escapeHtml(getTaskUrl(task.source, task.id))}">–û—Ç–∫—Ä—ã—Ç—å –≤ Jira</a>\n` +
        `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${escapeHtml(task.title)}\n` +
        `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${getPriorityEmoji(task.priority)}\n` +
        `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${escapeHtml(task.issueType)}\n` +
        `<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${escapeHtml(task.assignee)}\n` +
        `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏:</b> ${escapeHtml(getHumanReadableName(task.reporterLogin, task.reporter, task.source))}\n` +
        `<b>–°—Ç–∞—Ç—É—Å:</b> ${escapeHtml(task.status)}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
      const sentMessage = await ctx.reply(messageText, { 
        reply_markup: keyboard,
        parse_mode: "HTML"
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
      messageIdCache[task.id] = sentMessage.message_id;

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ lastSent
      const moscowTimestamp = getMoscowTimestamp();
      db.run('UPDATE tasks SET lastSent = ? WHERE id = ?', [moscowTimestamp, task.id]);
    }
  });
}


// ----------------------------------------------------------------------------------
// 6) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
// ----------------------------------------------------------------------------------
async function checkForNewComments() {
  try {
    const jql = `project = SUPPORT AND updated >= -7d`;
    const sources = ['sxl', 'betone'];
    const excludedAuthors = Object.values(jiraUserMappings).flatMap(mapping => Object.values(mapping));
    for (const source of sources) {
      const url = `https://jira.${source}.team/rest/api/2/search`;
      const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;
      let startAt = 0, total = 0;
      do {
        const response = await axios.get(url, {
          headers: { 'Authorization': `Bearer ${pat}`, 'Accept': 'application/json' },
          params: { jql, maxResults: 50, startAt, fields: 'comment,attachment, assignee,status,reporter,creator,summary,priority,issuetype,customfield_10500,customfield_10504'}
        });
        total = response.data.total;
        const issues = response.data.issues;
        for (const issue of issues) {
          const taskId = `${source}-${issue.key}`;
          let department = '–ù–µ —É–∫–∞–∑–∞–Ω';
          if (source === 'sxl') {
            department = issue.fields.customfield_10500?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
          } else {
            department = issue.fields.customfield_10504?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
          }
          const comments = issue.fields.comment?.comments;
          if (!comments || comments.length === 0) continue;
          const lastComment = comments[comments.length - 1];
          const lastCommentId = lastComment.id;
          const author = lastComment.author?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';
          const isTechSupportDept = (department === '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
          const isOurComment = excludedAuthors.includes(author);
          if (!isTechSupportDept && !isOurComment) continue;
          db.get('SELECT lastCommentId FROM task_comments WHERE taskId = ?', [taskId], (err, row) => {
            if (err) { console.error('Error fetching last comment from DB:', err); return; }
            if (!row) {
              sendTelegramMessage(taskId, source, issue, lastComment, author, department, isOurComment);
              db.run(`INSERT INTO task_comments (taskId, lastCommentId, assignee) VALUES (?, ?, ?)`,
                [taskId, lastCommentId, issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω']);
            } else if (row.lastCommentId !== lastCommentId) {
              sendTelegramMessage(taskId, source, issue, lastComment, author, department, isOurComment);
              db.run(`UPDATE task_comments SET lastCommentId = ?, assignee = ? WHERE taskId = ?`,
                [lastCommentId, issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω', taskId]);
            }
          });
        }
        startAt += 50;
      } while (startAt < total);
    }
  } catch (error) {
    console.error('Error checking for new comments:', error);
  }
}

// –õ–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const limiter = new Bottleneck({ minTime: 5000, maxConcurrent: 1 });
const sendMessageWithLimiter = limiter.wrap(async (chatId, text, opts) => {
  await bot.api.sendMessage(chatId, text, opts);
});

const commentCache = {};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏:
 * –ï—Å–ª–∏ jiraName (–ª–æ–≥–∏–Ω) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –º–∞–ø–ø–∏–Ω–≥–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –§–ò–û –∏–∑ usernameMappings.
 * –ò–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–æ–≥–∏–Ω –∏–∑ displayName.
 */
function getHumanReadableName(jiraName, displayName, source) {
  const login = (jiraName || "").trim().toLowerCase();
  if (login) {
    for (const [telegramUser, mapping] of Object.entries(jiraUserMappings)) {
      if ((mapping[source] || "").trim().toLowerCase() === login) {
        return usernameMappings[telegramUser] || displayName;
      }
    }
  }
  const parts = displayName.trim().toLowerCase().split(/\s+/);
  if (parts.length >= 2) {
    const generatedLogin = parts[0][0] + "." + parts[parts.length - 1];
    for (const [telegramUser, mapping] of Object.entries(jiraUserMappings)) {
      if ((mapping[source] || "").trim().toLowerCase() === generatedLogin) {
        return usernameMappings[telegramUser] || displayName;
      }
    }
  }
  return displayName;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
 * –í —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Ç–∞–∫–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –õ–æ–≥–∏–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è,
 * –°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏, –õ–æ–≥–∏–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ –°—Ç–∞—Ç—É—Å.
 */

bot.callbackQuery('refresh_tunnel', async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    const currentTunnel = process.env.PUBLIC_BASE_URL || '–°—Å—ã–ª–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
    await ctx.reply(`üîÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π URL —Ç—É–Ω–Ω–µ–ª—è:\n${currentTunnel}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É–Ω–Ω–µ–ª—è:', error);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL —Ç—É–Ω–Ω–µ–ª—è.');
  }
});



async function sendTelegramMessage(combinedId, source, issue, lastComment, authorName, department, isOurComment) {
  // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ"
  const keyboard = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(source, combinedId));

  // –ú–∞–ø–ø–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  const assigneeObj = issue.fields.assignee || null;
  let assigneeText = '–ù–∏–∫—Ç–æ';
  if (assigneeObj) {
    assigneeText = getHumanReadableName(assigneeObj.name, assigneeObj.displayName || assigneeObj.name, source);
  }

  // –ú–∞–ø–ø–∏–Ω–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
  const reporterObj = issue.fields.reporter || issue.fields.creator || null;
  let reporterText = '–ù–µ —É–∫–∞–∑–∞–Ω';
  if (reporterObj) {
    reporterText = getHumanReadableName(reporterObj.name, reporterObj.displayName || reporterObj.name, source);
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
  const priority = issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';
  const taskType = issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';
  const summary = issue.fields.summary || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
  const statusName = issue.fields.status?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –º–∞–ø–ø–∏–Ω–≥–æ–º
  const commentAuthorRaw = lastComment.author?.name || authorName;
  const commentDisplayRaw = lastComment.author?.displayName || authorName;
  const commentAuthor = getHumanReadableName(commentAuthorRaw, commentDisplayRaw, source);

  // –ü–∞—Ä—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (Markdown ‚Üí HTML)
  let fullCommentHtml = parseCustomMarkdown(lastComment.body || '');
  // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –º–∏–Ω–∏–∞—Ç—é—Ä—ã, —É–¥–∞–ª—è–µ–º –µ–≥–æ (–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –ø—É—Å—Ç—ã–º)
  fullCommentHtml = fullCommentHtml.replace(/!([^!]+)\|thumbnail!/gi, '');

  const MAX_LEN = 300;
  const shortCommentHtml = safeTruncateHtml(fullCommentHtml, MAX_LEN);

  // –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –ò–õ–ò –µ—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
  if (fullCommentHtml.length > MAX_LEN || (lastComment.attachments && lastComment.attachments.length > 0)) {
    keyboard.text('–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å', `expand_comment:${combinedId}:${lastComment.id}`);
  }

  // –ï—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å—Ç—å attachments ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è
  if (lastComment.attachments && Array.isArray(lastComment.attachments) && lastComment.attachments.length > 0) {
    let attachmentCounter = 1;
    const currentTunnelUrl = process.env.PUBLIC_BASE_URL;
    for (const att of lastComment.attachments) {
      try {
        const fileResp = await axios.get(att.content, {
          responseType: 'arraybuffer',
          headers: {
            'Authorization': `Bearer ${source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE}`
          }
        });
        const originalFilename = att.filename.replace(/[^\w.\-]/g, '_').substring(0, 100);
        const finalName = `${uuidv4()}_${originalFilename}`;
        const filePath = path.join(ATTACHMENTS_DIR, finalName);
        fs.writeFileSync(filePath, fileResp.data);
        const publicUrl = `${currentTunnelUrl}/attachments/${finalName}`;
        keyboard.row().url(`–í–ª–æ–∂–µ–Ω–∏–µ #${attachmentCounter++}`, publicUrl);
      } catch (errAttach) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', errAttach);
      }
    }
  }

  const prefix = isOurComment
    ? '–í –∑–∞–¥–∞—á–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n'
    : '–í –∑–∞–¥–∞—á–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n';

  const header =
    `<b>–ó–∞–¥–∞—á–∞:</b> ${combinedId}\n` +
    `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
    `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${getPriorityEmoji(priority)}\n` +
    `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${escapeHtml(taskType)}\n` +
    `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${escapeHtml(summary)}\n` +
    `<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${escapeHtml(assigneeText)}\n` +
    `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏:</b> ${escapeHtml(reporterText)}\n` +
    `<b>–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:</b> ${escapeHtml(commentAuthor)}\n` +
    `<b>–°—Ç–∞—Ç—É—Å:</b> ${escapeHtml(statusName)}\n` +
    `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n`;

  const cacheKey = `${combinedId}:${lastComment.id}`;
  commentCache[cacheKey] = {
    header: prefix + header,
    shortHtml: shortCommentHtml,
    fullHtml: fullCommentHtml,
    source: source
  };

  let finalText = commentCache[cacheKey].header + shortCommentHtml;
  finalText = finalText.replace(/<span>/gi, '<tg-spoiler>').replace(/<\/span>/gi, '</tg-spoiler>');
  console.log('[DEBUG] Final message text to send:', finalText);

  sendMessageWithLimiter(process.env.ADMIN_CHAT_ID, finalText, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  }).catch(e => console.error('Error sending message to Telegram:', e));
}

// ----------------------------------------------------------------------------------
// Callback –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"/"–°–≤–µ—Ä–Ω—É—Ç—å"
// ----------------------------------------------------------------------------------
bot.callbackQuery(/^expand_comment:(.+):(.+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    const combinedId = ctx.match[1];
    const commentId = ctx.match[2];
    const cacheKey = `${combinedId}:${commentId}`;
    const data = commentCache[cacheKey];
    if (!data) {
      return ctx.reply('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω?)');
    }
    const newText = data.header + data.fullHtml;
    const keyboard = new InlineKeyboard()
      .text('–°–≤–µ—Ä–Ω—É—Ç—å', `collapse_comment:${combinedId}:${commentId}`)
      .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(data.source, combinedId));
    console.log('[DEBUG] Expand comment newText:', newText);
    await ctx.editMessageText(newText, { parse_mode: 'HTML', reply_markup: keyboard });
  } catch (err) {
    console.error('expand_comment error:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.');
  }
});

bot.callbackQuery(/^collapse_comment:(.+):(.+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    const combinedId = ctx.match[1];
    const commentId = ctx.match[2];
    const cacheKey = `${combinedId}:${commentId}`;
    const data = commentCache[cacheKey];
    if (!data) {
      return ctx.reply('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ.');
    }
    const newText = data.header + data.shortHtml;
    const keyboard = new InlineKeyboard()
      .text('–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å', `expand_comment:${combinedId}:${commentId}`)
      .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(data.source, combinedId));
    console.log('[DEBUG] Collapse comment newText:', newText);
    await ctx.editMessageText(newText, { parse_mode: 'HTML', reply_markup: keyboard });
  } catch (err) {
    console.error('collapse_comment error:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.');
  }
});

// ----------------------------------------------------------------------------------
// 7) –ö–ù–û–ü–ö–ê "–í–ó–Ø–¢–¨ –í –†–ê–ë–û–¢–£"
// ----------------------------------------------------------------------------------
async function reassignIssueToRealUser(source, realJiraKey, telegramUsername) {
  try {
    const jiraUsername = jiraUserMappings[telegramUsername]?.[source];
    if (!jiraUsername) {
      console.log(`[reassignIssueToRealUser] –ù–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è ${telegramUsername} ‚Üí Jira (source=${source})`);
      return false;
    }
    const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;
    const assigneeUrl = `https://jira.${source}.team/rest/api/2/issue/${realJiraKey}/assignee`;
    const r = await axios.put(assigneeUrl, { name: jiraUsername }, {
      headers: { 'Authorization': `Bearer ${pat}`, 'Content-Type': 'application/json' }
    });
    if (r.status === 204) {
      console.log(`[reassignIssueToRealUser] –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ ${realJiraKey} –Ω–∞ ${jiraUsername}`);
      return true;
    } else {
      console.warn(`[reassignIssueToRealUser] –°—Ç–∞—Ç—É—Å=${r.status}, –Ω–µ —É–¥–∞–ª–æ—Å—å`);
      return false;
    }
  } catch (err) {
    console.error(`[reassignIssueToRealUser] –û—à–∏–±–∫–∞:`, err);
    return false;
  }
}

bot.callbackQuery(/^take_task:(.+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    const combinedId = ctx.match[1];
    const telegramUsername = ctx.from.username;
    
    db.get('SELECT * FROM tasks WHERE id = ?', [combinedId], async (err, task) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
      }
      if (!task) return ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.');
      if (task.department !== "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
        return ctx.reply('–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –¥–ª—è –¢–ü; –Ω–µ–ª—å–∑—è –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞.');
      }
      
      let success = false;
      try {
        success = await updateJiraTaskStatus(task.source, combinedId, telegramUsername);
      } catch (errUpd) {
        console.error('–û—à–∏–±–∫–∞ updateJiraTaskStatus:', errUpd);
      }
      
      if (success) {
        db.run(
          `INSERT INTO user_actions (username, taskId, action, timestamp)
           VALUES (?, ?, ?, ?)`,
          [telegramUsername, combinedId, 'take_task', getMoscowTimestamp()]
        );
        const displayName = usernameMappings[telegramUsername] || telegramUsername;
        await ctx.reply(`OK, –∑–∞–¥–∞—á—É ${combinedId} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: ${displayName}.`);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Jira
        const updatedIssue = await getJiraTaskDetails(task.source, combinedId);
        if (!updatedIssue) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Jira.');
          return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ updatedIssue
        const newMessageText =
          `–ó–∞–¥–∞—á–∞: ${combinedId}\n` +
          `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n` +
          `–°—Å—ã–ª–∫–∞: ${getTaskUrl(task.source, task.id)}\n` +
          `–û–ø–∏—Å–∞–Ω–∏–µ: ${updatedIssue.fields.summary || task.title}\n` +
          `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(updatedIssue.fields.priority?.name || task.priority)}\n` +
          `–¢–∏–ø –∑–∞–¥–∞—á–∏: ${updatedIssue.fields.issuetype?.name || task.issueType}\n` +
          `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${updatedIssue.fields.assignee ? getHumanReadableName(
              updatedIssue.fields.assignee.name,
              updatedIssue.fields.assignee.displayName || updatedIssue.fields.assignee.name,
              task.source
            ) : '–ù–∏–∫—Ç–æ'}\n` +
          `–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏: ${task.reporter}\n` +
          `–°—Ç–∞—Ç—É—Å: ${updatedIssue.fields.status?.name || task.status}`;
        
        // –ï—Å–ª–∏ —É –Ω–∞—Å —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è message_id –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        const messageId = messageIdCache[combinedId];
        if (messageId) {
          try {
            await bot.api.editMessageText(process.env.ADMIN_CHAT_ID, messageId, {
              text: newMessageText,
              parse_mode: 'HTML'
            });
          } catch (errEdit) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errEdit);
          }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å reassignIssueToRealUser —á–µ—Ä–µ–∑ 30 —Å–µ–∫, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        setTimeout(async () => {
          const realKey = extractRealJiraKey(combinedId);
          const reassignOk = await reassignIssueToRealUser(task.source, realKey, telegramUsername);
          if (reassignOk) {
            console.log(`–ó–∞–¥–∞—á–∞ ${combinedId} (—Ä–µ–∞–ª—å–Ω–æ) –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ ${telegramUsername}`);
          }
        }, 30000);
      } else {
        await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É ${combinedId} –≤ –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å (updateJiraTaskStatus failed)`);
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ take_task:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
});



async function updateJiraTaskStatus(source, combinedId, telegramUsername) {
  try {
    const realKey = extractRealJiraKey(combinedId);
    let transitionId = source === 'sxl' ? '221' : '201';
    const jiraUsername = jiraUserMappings[telegramUsername]?.[source];
    if (!jiraUsername) {
      console.error(`No Jira username for telegram user: ${telegramUsername}`);
      return false;
    }
    const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;
    const assigneeUrl = `https://jira.${source}.team/rest/api/2/issue/${realKey}/assignee`;
    const r1 = await axios.put(assigneeUrl, { name: jiraUsername }, {
      headers: { 'Authorization': `Bearer ${pat}`, 'Content-Type': 'application/json' }
    });
    if (r1.status !== 204) {
      console.error('Assignee error:', r1.status);
      return false;
    }
    const transitionUrl = `https://jira.${source}.team/rest/api/2/issue/${realKey}/transitions`;
    const r2 = await axios.post(transitionUrl, { transition: { id: transitionId } }, {
      headers: { 'Authorization': `Bearer ${pat}`, 'Content-Type': 'application/json' }
    });
    return (r2.status === 204);
  } catch (error) {
    console.error(`Error updating Jira task:`, error);
    return false;
  }
}

// ----------------------------------------------------------------------------------
// 8) –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è (Markdown ‚Üí HTML)
// ----------------------------------------------------------------------------------
function escapeHtml(text) {
  if (!text) return '';
  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

function convertCodeBlocks(input) {
  let output = input;
  output = output.replace(/\{code:([\w\-]+)\}([\s\S]*?)\{code\}/g, (match, lang, code) => {
    return `<pre><code class="language-${lang}">${escapeHtml(code.trim())}</code></pre>`;
  });
  output = output.replace(/\{code\}([\s\S]*?)\{code\}/g, (match, code) => {
    return `<pre><code>${escapeHtml(code.trim())}</code></pre>`;
  });
  return output;
}

function convertNoformatBlocks(text) {
  return text.replace(/\{noformat\}([\s\S]*?)\{noformat\}/g, (match, content) => {
    return `<pre>${escapeHtml(content.trim())}</pre>`;
  });
}

function convertSquareBracketLinks(text) {
  return text.replace(/\[([^\|\]]+)\|([^\]]+)\]/g, (match, linkText, linkUrl) => {
    const safeText = escapeHtml(linkText.trim());
    const safeUrl = escapeHtml(linkUrl.trim());
    return `<a href="${safeUrl}">${safeText}</a>`;
  });
}

function safeTruncateHtml(html, maxLength) {
  if (html.length <= maxLength) return html;
  let truncated = html.slice(0, maxLength);
  const lastOpenIndex = truncated.lastIndexOf('<');
  const lastCloseIndex = truncated.lastIndexOf('>');
  if (lastOpenIndex > lastCloseIndex) {
    truncated = truncated.slice(0, lastOpenIndex);
  }
  return truncated + '...';
}

function convertHashLinesToNumbered(text) {
  let lines = text.split('\n');
  let result = [];
  let counter = 1;
  console.log('[DEBUG] Lines before processing:');
  for (let i = 0; i < lines.length; i++) {
    console.log(i, JSON.stringify(lines[i]), lines[i].split('').map(c => c.charCodeAt(0)));
  }
  for (let i = 0; i < lines.length; i++) {
    let line = lines[i].replace(/\u00A0/g, ' ');
    let trimmed = line.trim();
    if (trimmed === '#' || trimmed === '#') {
      let nextIndex = i + 1;
      let foundText = null;
      while (nextIndex < lines.length) {
        let candidate = lines[nextIndex].replace(/\u00A0/g, ' ').trim();
        if (candidate) { foundText = candidate; break; }
        nextIndex++;
      }
      if (foundText) { result.push(`${counter++}) ${foundText}`); i = nextIndex; }
      else { result.push(`${counter++})`); }
    } else if (trimmed.startsWith('# ')) {
      const content = trimmed.slice(2);
      result.push(`${counter++}) ${content}`);
    } else { result.push(line); }
  }
  return result.join('\n');
}

function formatTables(text) {
  return text.replace(/\|(.+?)\|/g, match => {
    return `<pre>${escapeHtml(match.trim())}</pre>`;
  });
}

function parseCustomMarkdown(text) {
  if (!text) return '';
  text = convertNoformatBlocks(text);
  text = convertCodeBlocks(text);
  text = formatTables(text);
  text = convertSquareBracketLinks(text);
  text = convertHashLinesToNumbered(text);
  text = text
    .replace(/\*(.*?)\*/g, '<b>$1</b>')
    .replace(/_(.*?)_/g, '<i>$1</i>')
    .replace(/\+(.*?)\+/g, '<u>$1</u>')
    .replace(/~~(.*?)~~/g, '<s>$1</s>')
    .replace(/(^|\s)`([^`]+)`(\s|$)/g, '$1<code>$2</code>$3')
    .replace(/^\-\s(.*)/gm, '‚Ä¢ $1')
    .replace(/^\*\s(.*)/gm, '‚Ä¢ $1')
    .replace(/^\d+\.\s(.*)/gm, 'üîπ $1')
    .replace(/\n{3,}/g, '\n\n');
  return text;
}

function formatDescriptionAsHtml(rawDescription) {
  return parseCustomMarkdown(rawDescription || '');
}

// ----------------------------------------------------------------------------------
// 8) Callback "toggle_description" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
// ----------------------------------------------------------------------------------
bot.callbackQuery(/^toggle_description:(.+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    const combinedId = ctx.match[1];
    let rowFromDb = await new Promise(resolve => {
      db.get('SELECT * FROM tasks WHERE id = ?', [combinedId], (err, row) => resolve(row));
    });
    let source = rowFromDb?.source;
    if (!source) {
      const txt = ctx.callbackQuery.message?.text || "";
      const match = txt.match(/–ò—Å—Ç–æ—á–Ω–∏–∫:\s*([^\n]+)/i);
      source = match ? match[1].trim() : combinedId.split('-')[0];
    }
    const issue = await getJiraTaskDetails(source, combinedId);
    if (!issue) {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Jira.');
    }
    const summary = issue.fields.summary || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const description = issue.fields.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
    const statusName = issue.fields.status?.name || '‚Äî';
    const priority = issue.fields.priority?.name || 'None';
    const taskType = issue.fields.issuetype?.name || '‚Äî';
    const assigneeObj = issue.fields.assignee || null;
    const priorityEmoji = getPriorityEmoji(priority);
    let assigneeText = '–ù–∏–∫—Ç–æ';
    if (assigneeObj) {
      assigneeText = getHumanReadableName(assigneeObj.name, assigneeObj.displayName || assigneeObj.name, source);
    }
    const reporterObj = issue.fields.reporter || null;
    let reporterText = '–ù–µ —É–∫–∞–∑–∞–Ω';
    if (reporterObj) {
      reporterText = getHumanReadableName(reporterObj.name, reporterObj.displayName || reporterObj.name, source);
    }
    const currentText = ctx.callbackQuery.message?.text.trimEnd() || "";
    const isExpanded = currentText.endsWith("...");
    const keyboard = new InlineKeyboard();
    if ((rowFromDb?.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") && (statusName === "Open")) {
      keyboard.text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${combinedId}`);
    }
    keyboard
      .text(isExpanded ? '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' : '–°–∫—Ä—ã—Ç—å', `toggle_description:${combinedId}`)
      .url('–û—Ç–∫—Ä—ã—Ç—å –≤ Jira', `https://jira.${source}.team/browse/${extractRealJiraKey(combinedId)}`);
    
    if (!isExpanded) {
      const safeDesc = formatDescriptionAsHtml(description);
      // --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π ---
      if (issue.fields.attachment && Array.isArray(issue.fields.attachment) && issue.fields.attachment.length > 0) {
        let counter = 1;
        for (const att of issue.fields.attachment) {
          try {
            const fileResp = await axios.get(att.content, {
              responseType: 'arraybuffer',
              headers: {
                'Authorization': `Bearer ${source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE}`
              }
            });
            const originalFilename = att.filename.replace(/[^\w.\-]/g, '_').substring(0, 100);
            const finalName = `${uuidv4()}_${originalFilename}`;
            const filePath = path.join(ATTACHMENTS_DIR, finalName);
            fs.writeFileSync(filePath, fileResp.data);
            const publicUrl = `${process.env.PUBLIC_BASE_URL}/attachments/${finalName}`;
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.row().url(`–í–ª–æ–∂–µ–Ω–∏–µ #${counter++}`, publicUrl);
          } catch (errAttach) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏—è:', errAttach);
          }
        }
      }
      // --- –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ ---
      
      await ctx.editMessageText(
        `<b>–ó–∞–¥–∞—á–∞:</b> ${combinedId}\n` +
        `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
        `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priorityEmoji}\n` +
        `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${escapeHtml(taskType)}\n` +
        `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${escapeHtml(summary)}\n` +
        `<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${escapeHtml(assigneeText)}\n` +
        `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏:</b> ${escapeHtml(reporterText)}\n` +
        `<b>–°—Ç–∞—Ç—É—Å:</b> ${escapeHtml(statusName)}\n\n` +
        `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${safeDesc}\n\n...`,
        { parse_mode: 'HTML', reply_markup: keyboard }
      );
    } else {
      await ctx.editMessageText(
        `<b>–ó–∞–¥–∞—á–∞:</b> ${combinedId}\n` +
        `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
        `<b>–°—Å—ã–ª–∫–∞:</b> <a href="https://jira.${source}.team/browse/${extractRealJiraKey(combinedId)}">–û—Ç–∫—Ä—ã—Ç—å –≤ Jira</a>\n` +
        `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${escapeHtml(summary)}\n` +
        `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priorityEmoji}\n` +
        `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${taskType}\n` +
        `<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${escapeHtml(assigneeText)}\n` +
        `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏:</b> ${escapeHtml(reporterText)}\n` +
        `<b>–°—Ç–∞—Ç—É—Å:</b> ${escapeHtml(statusName)}\n`,
        { parse_mode: 'HTML', reply_markup: keyboard }
      );
    }
  } catch (err) {
    console.error('toggle_description error:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ toggle_description');
  }
});



// ----------------------------------------------------------------------------------
// 7) –ö–ù–û–ü–ö–ê "–í–ó–Ø–¢–¨ –í –†–ê–ë–û–¢–£"
// ----------------------------------------------------------------------------------
async function reassignIssueToRealUser(source, realJiraKey, telegramUsername) {
  try {
    const jiraUsername = jiraUserMappings[telegramUsername]?.[source];
    if (!jiraUsername) {
      console.log(`[reassignIssueToRealUser] –ù–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è ${telegramUsername} ‚Üí Jira (source=${source})`);
      return false;
    }
    const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;
    const assigneeUrl = `https://jira.${source}.team/rest/api/2/issue/${realJiraKey}/assignee`;
    const r = await axios.put(assigneeUrl, { name: jiraUsername }, {
      headers: { 'Authorization': `Bearer ${pat}`, 'Content-Type': 'application/json' }
    });
    if (r.status === 204) {
      console.log(`[reassignIssueToRealUser] –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ ${realJiraKey} –Ω–∞ ${jiraUsername}`);
      return true;
    } else {
      console.warn(`[reassignIssueToRealUser] –°—Ç–∞—Ç—É—Å=${r.status}, –Ω–µ —É–¥–∞–ª–æ—Å—å`);
      return false;
    }
  } catch (err) {
    console.error(`[reassignIssueToRealUser] –û—à–∏–±–∫–∞:`, err);
    return false;
  }
}

bot.callbackQuery(/^take_task:(.+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    const combinedId = ctx.match[1];
    const telegramUsername = ctx.from.username;

    db.get('SELECT * FROM tasks WHERE id = ?', [combinedId], async (err, task) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
      }
      if (!task) return ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.');
      if (task.department !== "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
        return ctx.reply('–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –¥–ª—è –¢–ü; –Ω–µ–ª—å–∑—è –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞.');
      }

      let success = false;
      try {
        success = await updateJiraTaskStatus(task.source, combinedId, telegramUsername);
      } catch (errUpd) {
        console.error('–û—à–∏–±–∫–∞ updateJiraTaskStatus:', errUpd);
      }

      if (success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db.run(
          `INSERT INTO user_actions (username, taskId, action, timestamp)
           VALUES (?, ?, ?, ?)`,
          [telegramUsername, combinedId, 'take_task', getMoscowTimestamp()]
        );
        const displayName = usernameMappings[telegramUsername] || telegramUsername;
        await ctx.reply(`OK, –∑–∞–¥–∞—á—É ${escapeHtml(combinedId)} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: ${escapeHtml(displayName)}.`);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Jira
        const updatedIssue = await getJiraTaskDetails(task.source, combinedId);
        if (!updatedIssue) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Jira.');
          return;
        }
        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º escapeHtml
        const newMessageText =
          `<b>–ó–∞–¥–∞—á–∞:</b> ${escapeHtml(combinedId)}\n` +
          `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${escapeHtml(task.source)}\n` +
          `<b>–°—Å—ã–ª–∫–∞:</b> <a href="${escapeHtml(getTaskUrl(task.source, task.id))}">${escapeHtml(getTaskUrl(task.source, task.id))}</a>\n` +
          `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${escapeHtml(updatedIssue.fields.summary || task.title)}\n` +
          `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${getPriorityEmoji(updatedIssue.fields.priority?.name || task.priority)}\n` +
          `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${escapeHtml(updatedIssue.fields.issuetype?.name || task.issueType)}\n` +
          `<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${updatedIssue.fields.assignee 
             ? escapeHtml(getHumanReadableName(
                   updatedIssue.fields.assignee.name,
                   updatedIssue.fields.assignee.displayName || updatedIssue.fields.assignee.name,
                   task.source
                 ))
             : '–ù–∏–∫—Ç–æ'}\n` +
          `<b>–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏:</b> ${escapeHtml(task.reporter)}\n` +
          `<b>–°—Ç–∞—Ç—É—Å:</b> ${escapeHtml(updatedIssue.fields.status?.name || task.status)}`;

        // –ï—Å–ª–∏ —É –Ω–∞—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω message_id –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        const messageId = messageIdCache[combinedId];
        if (messageId) {
          try {
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤: —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É undefined –∏ –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ (chat_id, message_id, text, extra)
            await bot.api.editMessageText(process.env.ADMIN_CHAT_ID, messageId, {
              text: newMessageText,
              parse_mode: 'HTML',
            });
          } catch (errEdit) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errEdit);
          }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –≤—ã–∑—ã–≤–∞–µ–º reassignIssueToRealUser (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        setTimeout(async () => {
          const realKey = extractRealJiraKey(combinedId);
          const reassignOk = await reassignIssueToRealUser(task.source, realKey, telegramUsername);
          if (reassignOk) {
            console.log(`–ó–∞–¥–∞—á–∞ ${combinedId} (—Ä–µ–∞–ª—å–Ω–æ) –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ ${telegramUsername}`);
          }
        }, 30000);
      } else {
        await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É ${escapeHtml(combinedId)} –≤ –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å (updateJiraTaskStatus failed)`);
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ take_task:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
});


async function updateJiraTaskStatus(source, combinedId, telegramUsername) {
  try {
    const realKey = extractRealJiraKey(combinedId);
    let transitionId = source === 'sxl' ? '221' : '201';
    const jiraUsername = jiraUserMappings[telegramUsername]?.[source];
    if (!jiraUsername) {
      console.error(`No Jira username for telegram user: ${telegramUsername}`);
      return false;
    }
    const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;
    const assigneeUrl = `https://jira.${source}.team/rest/api/2/issue/${realKey}/assignee`;
    const r1 = await axios.put(assigneeUrl, { name: jiraUsername }, {
      headers: { 'Authorization': `Bearer ${pat}`, 'Content-Type': 'application/json' }
    });
    if (r1.status !== 204) {
      console.error('Assignee error:', r1.status);
      return false;
    }
    const transitionUrl = `https://jira.${source}.team/rest/api/2/issue/${realKey}/transitions`;
    const r2 = await axios.post(transitionUrl, { transition: { id: transitionId } }, {
      headers: { 'Authorization': `Bearer ${pat}`, 'Content-Type': 'application/json' }
    });
    return (r2.status === 204);
  } catch (error) {
    console.error(`Error updating Jira task:`, error);
    return false;
  }
}

// ----------------------------------------------------------------------------------
// 8) –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è (Markdown ‚Üí HTML)
// ----------------------------------------------------------------------------------
function escapeHtml(text) {
  if (!text) return '';
  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

function convertCodeBlocks(input) {
  let output = input;
  output = output.replace(/\{code:([\w\-]+)\}([\s\S]*?)\{code\}/g, (match, lang, code) => {
    return `<pre><code class="language-${lang}">${escapeHtml(code.trim())}</code></pre>`;
  });
  output = output.replace(/\{code\}([\s\S]*?)\{code\}/g, (match, code) => {
    return `<pre><code>${escapeHtml(code.trim())}</code></pre>`;
  });
  return output;
}

function convertNoformatBlocks(text) {
  return text.replace(/\{noformat\}([\s\S]*?)\{noformat\}/g, (match, content) => {
    return `<pre>${escapeHtml(content.trim())}</pre>`;
  });
}

function convertSquareBracketLinks(text) {
  return text.replace(/\[([^\|\]]+)\|([^\]]+)\]/g, (match, linkText, linkUrl) => {
    const safeText = escapeHtml(linkText.trim());
    const safeUrl = escapeHtml(linkUrl.trim());
    return `<a href="${safeUrl}">${safeText}</a>`;
  });
}

function safeTruncateHtml(html, maxLength) {
  if (html.length <= maxLength) return html;
  let truncated = html.slice(0, maxLength);
  const lastOpenIndex = truncated.lastIndexOf('<');
  const lastCloseIndex = truncated.lastIndexOf('>');
  if (lastOpenIndex > lastCloseIndex) {
    truncated = truncated.slice(0, lastOpenIndex);
  }
  return truncated + '...';
}

function convertHashLinesToNumbered(text) {
  let lines = text.split('\n');
  let result = [];
  let counter = 1;
  console.log('[DEBUG] Lines before processing:');
  for (let i = 0; i < lines.length; i++) {
    console.log(i, JSON.stringify(lines[i]), lines[i].split('').map(c => c.charCodeAt(0)));
  }
  for (let i = 0; i < lines.length; i++) {
    let line = lines[i].replace(/\u00A0/g, ' ');
    let trimmed = line.trim();
    if (trimmed === '#' || trimmed === '#') {
      let nextIndex = i + 1;
      let foundText = null;
      while (nextIndex < lines.length) {
        let candidate = lines[nextIndex].replace(/\u00A0/g, ' ').trim();
        if (candidate) { foundText = candidate; break; }
        nextIndex++;
      }
      if (foundText) { result.push(`${counter++}) ${foundText}`); i = nextIndex; }
      else { result.push(`${counter++})`); }
    } else if (trimmed.startsWith('# ')) {
      const content = trimmed.slice(2);
      result.push(`${counter++}) ${content}`);
    } else { result.push(line); }
  }
  return result.join('\n');
}

function formatTables(text) {
  return text.replace(/\|(.+?)\|/g, match => {
    return `<pre>${escapeHtml(match.trim())}</pre>`;
  });
}

function parseCustomMarkdown(text) {
  if (!text) return '';
  text = convertNoformatBlocks(text);
  text = convertCodeBlocks(text);
  text = formatTables(text);
  text = convertSquareBracketLinks(text);
  text = convertHashLinesToNumbered(text);
  text = text
    .replace(/\*(.*?)\*/g, '<b>$1</b>')
    .replace(/_(.*?)_/g, '<i>$1</i>')
    .replace(/\+(.*?)\+/g, '<u>$1</u>')
    .replace(/~~(.*?)~~/g, '<s>$1</s>')
    .replace(/(^|\s)`([^`]+)`(\s|$)/g, '$1<code>$2</code>$3')
    .replace(/^\-\s(.*)/gm, '‚Ä¢ $1')
    .replace(/^\*\s(.*)/gm, '‚Ä¢ $1')
    .replace(/^\d+\.\s(.*)/gm, 'üîπ $1')
    .replace(/\n{3,}/g, '\n\n');
  return text;
}

function formatDescriptionAsHtml(rawDescription) {
  return parseCustomMarkdown(rawDescription || '');
}

// ----------------------------------------------------------------------------------
// 10) Cron-–∑–∞–¥–∞—á–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
// ----------------------------------------------------------------------------------
async function getDayMessageText() {
  const now = getMoscowDateTime();
  const daySchedule = await getScheduleForDate(now);
  const engineer = await fetchDutyEngineer();
  if (!daySchedule) {
    return `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${now.toFormat("dd.MM.yyyy")}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n<b>–î–µ–∂—É—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç DevOPS:</b> ${engineer}`;
  }
  const arr9_21 = daySchedule["9-21"] || [];
  const arr10_19 = daySchedule["10-19"] || [];
  const arr21_9 = daySchedule["21-9"] || [];
  return `üîî <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, ${now.toFormat("dd.MM.yyyy")} (10:00)</b>\n` +
         `\n<b>–î–Ω–µ–≤–Ω–∞—è (9-21):</b> ${arr9_21.join(", ") || "‚Äî"}\n` +
         `<b>–î–Ω–µ–≤–Ω–∞—è 5/2 (10-19):</b> ${arr10_19.join(", ") || "‚Äî"}\n` +
         `<b>–°–µ–≥–æ–¥–Ω—è –≤ –Ω–æ—á—å (21-9):</b> ${arr21_9.join(", ") || "‚Äî"}\n` +
         `\n<b>–î–µ–∂—É—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç DevOPS:</b> ${engineer}`;
}

async function getNightMessageText() {
  const now = getMoscowDateTime();
  const todaySchedule = await getScheduleForDate(now) || {};
  const tomorrow = now.plus({ days: 1 });
  const tomorrowSchedule = await getScheduleForDate(tomorrow) || {};
  const arr21_9_today = todaySchedule["21-9"] || [];
  const arr9_21_tomorrow = tomorrowSchedule["9-21"] || [];
  const arr10_19_tomorrow = tomorrowSchedule["10-19"] || [];
  const engineer = await fetchDutyEngineer();
  return `üåô <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–µ—á–µ—Ä, ${now.toFormat("dd.MM.yyyy")} (21:00)</b>\n` +
         `\n<b>–°–µ–≥–æ–¥–Ω—è –≤ –Ω–æ—á—å (21-9):</b> ${arr21_9_today.join(", ") || "‚Äî"}\n` +
         `<b>–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ (9-21):</b> ${arr9_21_tomorrow.join(", ") || "‚Äî"}\n` +
         `<b>–ó–∞–≤—Ç—Ä–∞ 5/2 (10-19):</b> ${arr10_19_tomorrow.join(", ") || "‚Äî"}\n` +
         `\n<b>–î–µ–∂—É—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç DevOPS:</b> ${engineer}`;
}

cron.schedule('* * * * *', async () => {
  try {
    console.log('[CRON] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ Jira...');
    await fetchAndStoreJiraTasks();
    const ctx = { reply: (text, opts) => bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, opts) };
    await sendJiraTasks(ctx);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ CRON fetchAndStoreJiraTasks/sendJiraTasks:', err);
  }
}, { timezone: 'Europe/Moscow' });

cron.schedule('*/5 * * * *', async () => {
  try {
    console.log('[CRON] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
    await checkForNewComments();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ CRON checkForNewComments:', err);
  }
}, { timezone: 'Europe/Moscow' });

cron.schedule('0 10 * * *', async () => {
  try {
    const text = await getDayMessageText();
    await bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, { parse_mode: 'HTML' });
  } catch (err) {
    console.error('[CRON 10:00] –û—à–∏–±–∫–∞:', err);
  }
}, { timezone: 'Europe/Moscow' });

cron.schedule('0 21 * * *', async () => {
  try {
    const text = await getNightMessageText();
    await bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, { parse_mode: 'HTML' });
  } catch (err) {
    console.error('[CRON 21:00] –û—à–∏–±–∫–∞:', err);
  }
}, { timezone: 'Europe/Moscow' });

cron.schedule('0 11 * * *', async () => {
  try {
    const now = getMoscowDateTime();
    const daysInMonth = now.daysInMonth;
    const today = now.day;
    if (today === daysInMonth) {
      const nextMonth = now.plus({ months: 1 });
      await bot.api.sendMessage(process.env.ADMIN_CHAT_ID,
        `–°–µ–≥–æ–¥–Ω—è ${now.toFormat("dd.MM.yyyy")} ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞.\n–ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü (${nextMonth.toFormat("LLLL yyyy")})...`
      );
      await buildPageMapForSchedules();
      await loadScheduleForMonthYear(nextMonth.year, nextMonth.month);
      await bot.api.sendMessage(process.env.ADMIN_CHAT_ID, '‚úÖ –ì–æ—Ç–æ–≤–æ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.');
    }
  } catch (err) {
    console.error('[CRON LAST DAY] –û—à–∏–±–∫–∞:', err);
    bot.api.sendMessage(process.env.ADMIN_CHAT_ID, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü');
  }
}, { timezone: 'Europe/Moscow' });

// ----------------------------------------------------------------------------------
// 11) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /test_day, /test_night, /duty, /forcestart
// ----------------------------------------------------------------------------------
bot.command('test_day', async (ctx) => {
  try {
    const text = await getDayMessageText();
    await ctx.reply(text, { parse_mode: 'HTML' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /test_day:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});

bot.command('test_night', async (ctx) => {
  try {
    const text = await getNightMessageText();
    await ctx.reply(text, { parse_mode: 'HTML' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ /test_night:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
});

bot.command('duty', async (ctx) => {
  try {
    const engineer = await fetchDutyEngineer();
    await ctx.reply(`–î–µ–∂—É—Ä–Ω—ã–π: ${engineer}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ duty:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ.');
  }
});

bot.command('forcestart', async (ctx) => {
  await initializeBotTasks();
  await ctx.reply('‚ôªÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã (–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Ç–∞–Ω–æ).');
});

// ----------------------------------------------------------------------------------
// 12) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
// ----------------------------------------------------------------------------------
async function initializeBotTasks() {
  try {
    console.log('[BOT INIT] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á...');
    await buildPageMapForSchedules();
    const now = getMoscowDateTime();
    await loadScheduleForMonthYear(now.year, now.month);
    await fetchAndStoreJiraTasks();
    const ctx = { reply: (text, opts) => bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, opts) };
    await sendJiraTasks(ctx);
    await checkForNewComments();
    db.all('SELECT taskId FROM task_comments', [], (err, rows) => {
      if (err) console.error('Error fetching task_comments:', err);
      else console.log(`Total task_comments in DB: ${rows.length}`);
    });
    console.log('[BOT INIT] –í—Å—ë –≥–æ—Ç–æ–≤–æ.');
  } catch (err) {
    console.error('[BOT INIT] –û—à–∏–±–∫–∞:', err);
  }
}

bot.command('start', async (ctx) => {
  await ctx.reply('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—Å–µ –∑–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç. (/forcestart –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)');
});

bot.start({
  onStart: (botInfo) => {
    console.log(`‚úÖ Bot ${botInfo.username} is running`);
    initializeBotTasks();
  }
});