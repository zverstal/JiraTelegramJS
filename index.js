require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const { DateTime } = require('luxon');
const cron = require('node-cron');
const Bottleneck = require('bottleneck');


// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);
// –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('tasks.db');


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ú–æ—Å–∫–≤—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'yyyy-MM-dd HH:mm:ss'
function getMoscowTimestamp() {
    const moscowTime = DateTime.now().setZone('Europe/Moscow');
    return moscowTime.toFormat('yyyy-MM-dd HH:mm:ss');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS tasks (
        id TEXT PRIMARY KEY,
        title TEXT,
        priority TEXT,
        department TEXT,
        issueType TEXT,
        dateAdded DATETIME,
        lastSent DATETIME,
        source TEXT
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS user_actions (
        username TEXT,
        taskId TEXT,
        action TEXT,
        timestamp DATETIME,
        FOREIGN KEY(taskId) REFERENCES tasks(id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–¥–∞—á
    db.run(`CREATE TABLE IF NOT EXISTS task_comments (
        taskId TEXT PRIMARY KEY,
        lastCommentId TEXT,
        assignee TEXT,
        FOREIGN KEY(taskId) REFERENCES tasks(id)
    )`);
});

// –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–¥–∞—á –≤ —ç–º–æ–¥–∑–∏
function getPriorityEmoji(priority) {
    const emojis = {
        Blocker: 'üö®',
        High: 'üî¥',
        Medium: 'üü°',
        Low: 'üü¢'
    };
    return emojis[priority] || '';
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è Jira –∑–∞–¥–∞—á–∏
function getTaskUrl(source, taskId) {
    return `https://jira.${source}.team/browse/${taskId}`;
}

// –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ Telegram username ‚Üí –§–ò–û
const usernameMappings = {
    "lipchinski": "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
    "pr0spal": "–ï–≤–≥–µ–Ω–∏–π –®—É—à–∫–æ–≤",
    "fdhsudgjdgkdfg": "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
    "EuroKaufman": "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤",
    "Nikolay_Gonchar": "–ù–∏–∫–æ–ª–∞–π –ì–æ–Ω—á–∞—Ä",
    "KIRILlKxX": "–ö–∏—Ä–∏–ª–ª –ê—Ç–∞–Ω–∏–∑—è–æ–≤",
    "marysh353": "–î–∞–Ω–∏–∏–ª –ú–∞—Ä—ã—à–µ–≤"
};

// –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ Telegram username ‚Üí Jira username (–ø–æ —Ä–∞–∑–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º)
const jiraUserMappings = {
    "lipchinski": { "sxl": "d.selivanov", "betone": "dms" },
    "pr0spal": { "sxl": "e.shushkov", "betone": "es" },
    "fdhsudgjdgkdfg": { "sxl": "d.maslov", "betone": "dam" },
    "EuroKaufman": { "sxl": "d.baratov", "betone": "db" },
    "Nikolay_Gonchar": { "sxl": "n.gonchar", "betone": "ng" },
    "KIRILlKxX": { "sxl": "k.ataniyazov", "betone": "ka" },
    "marysh353": { "sxl": "d.maryshev", "betone": "dma" }
};

//---------------------------------------------------------------------
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Jira
//---------------------------------------------------------------------

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ —Å—Ä–∞–∑—É –∏–∑ 2-—Ö JIRA (sxl –∏ betone)
async function fetchAndStoreJiraTasks() {
    await fetchAndStoreTasksFromJira('sxl', 'https://jira.sxl.team/rest/api/2/search', process.env.JIRA_PAT_SXL, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
    await fetchAndStoreTasksFromJira('betone', 'https://jira.betone.team/rest/api/2/search', process.env.JIRA_PAT_BETONE, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ JIRA –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
async function fetchAndStoreTasksFromJira(source, url, pat, ...departments) {
    try {
        console.log(`Fetching tasks from ${source} Jira...`);
        // –§–æ—Ä–º–∏—Ä—É–µ–º JQL
        const departmentQuery = departments.map(dep => `"${dep}"`).join(" OR –û—Ç–¥–µ–ª = ");
        let jql;

        if (source === 'sxl') {
            // JQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–¥–∞—á DevOps –∏ Support
            jql = `\n                project = SUPPORT AND (\n                    (issuetype = Infra AND status = "Open") OR\n                    (issuetype = Office AND status = "Under review") OR\n                    (issuetype = Office AND status = "Waiting for support") OR\n                    (issuetype = Prod AND status = "Waiting for Developers approval") OR\n                    (–û—Ç–¥–µ–ª = ${departmentQuery} AND status = "Open")\n                )\n            `;
        } else {
            // –ó–∞–ø—Ä–æ—Å –¥–ª—è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (betone)
            jql = `project = SUPPORT AND (–û—Ç–¥–µ–ª = ${departmentQuery}) AND status = "Open"`;
        }

        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Jira
        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            },
            params: { jql }
        });
        console.log(`${source} Jira API response:`, response.data);

        const fetchedTaskIds = response.data.issues.map(issue => issue.key);

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ JIRA
        await new Promise((resolve, reject) => {
            const placeholders = fetchedTaskIds.map(() => '?').join(',');
            db.run(
                `DELETE FROM tasks WHERE id NOT IN (${placeholders}) AND source = ?`,
                [...fetchedTaskIds, source],
                function(err) {
                    if (err) {
                        reject(err);
                        console.error(`Error deleting tasks from ${source} Jira:`, err);
                    } else {
                        resolve();
                    }
                }
            );
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Jira
        for (const issue of response.data.issues) {
            const task = {
                id: issue.key,
                title: issue.fields.summary,
                priority: issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                issueType: issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                department: (
                    (source === 'betone' && issue.fields.customfield_10504)
                        ? issue.fields.customfield_10504.value
                        : (
                            (source === 'sxl' && issue.fields.customfield_10500)
                                ? issue.fields.customfield_10500.value
                                : '–ù–µ —É–∫–∞–∑–∞–Ω'
                        )
                ),
                dateAdded: getMoscowTimestamp(),
                source: source
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            const existingTask = await new Promise((resolve, reject) => {
                db.get('SELECT * FROM tasks WHERE id = ?', [task.id], (err, row) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(row);
                    }
                });
            });

            if (existingTask) {
                // –û–±–Ω–æ–≤–∏–º
                db.run(
                    'UPDATE tasks SET title = ?, priority = ?, issueType = ?, department = ?, source = ? WHERE id = ?',
                    [task.title, task.priority, task.issueType, task.department, task.source, task.id]
                );
            } else {
                // –í—Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é
                db.run(
                    'INSERT INTO tasks (id, title, priority, issueType, department, dateAdded, lastSent, source) VALUES (?, ?, ?, ?, ?, ?, NULL, ?)',
                    [task.id, task.title, task.priority, task.issueType, task.department, task.dateAdded, task.source]
                );
            }
        }
    } catch (error) {
        console.error(`Error fetching and storing tasks from ${source} Jira:`, error);
    }
}

async function getJiraTaskDetails(source, taskId) {
    try {
        const url = `https://jira.${source}.team/rest/api/2/issue/${taskId}?fields=summary,description,attachment`;
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            }
        });

        return response.data;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ ${taskId} –∏–∑ Jira (${source}):`, error);
        return null;
    }
}

//---------------------------------------------------------------------
// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –≤ Telegram
//---------------------------------------------------------------------
async function sendJiraTasks(ctx) {
    // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞—Ç—É ("2025-03-10" –Ω–∞–ø—Ä–∏–º–µ—Ä)
    const today = getMoscowTimestamp().split(' ')[0];
    // –ó–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–¥–∞—á
    const query = `\n        SELECT * FROM tasks WHERE \n        (department = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" AND (lastSent IS NULL OR lastSent < date('${today}')))\n        OR\n        (issueType IN ('Infra', 'Office', 'Prod') AND (lastSent IS NULL OR lastSent < datetime('now', '-3 days')))\n        ORDER BY CASE \n            WHEN department = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' THEN 1 \n            ELSE 2 \n        END\n    `;

    db.all(query, [], async (err, rows) => {
        if (err) {
            console.error('Error fetching tasks:', err);
            return;
        }

        // –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        for (const task of rows) {
            const keyboard = new InlineKeyboard();

            if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                keyboard.text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`);
                keyboard.url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id));
                keyboard.text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
            } else if (['Infra', 'Office', 'Prod'].includes(task.issueType)) {
                keyboard.url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id));
                keyboard.text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
            }            

            const messageText = `–ó–∞–¥–∞—á–∞: ${task.id}\n` +
                `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n` +
                `–°—Å—ã–ª–∫–∞: ${getTaskUrl(task.source, task.id)}\n` +
                `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n` +
                `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n` +
                `–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.issueType}`;

            console.log('Sending message to Telegram:', messageText);

            await ctx.reply(messageText, { reply_markup: keyboard });

            // –û–±–Ω–æ–≤–ª—è–µ–º lastSent
            const moscowTimestamp = getMoscowTimestamp();
            console.log(`Updating lastSent for task ${task.id} to: ${moscowTimestamp}`);
            db.run('UPDATE tasks SET lastSent = ? WHERE id = ?', [moscowTimestamp, task.id]);
        }
    });
}

//---------------------------------------------------------------------
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
//---------------------------------------------------------------------
async function checkForNewComments() {
    try {
        // JQL
        const jql = `project = SUPPORT AND –û—Ç–¥–µ–ª = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" AND status in (Done, Awaiting, "Awaiting implementation") AND updated >= -2d`;
        const sources = ['sxl', 'betone'];

        // Jira usernames, –∫–æ—Ç–æ—Ä—ã—Ö –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        const excludedAuthors = Object.values(jiraUserMappings)
            .flatMap(mapping => Object.values(mapping));

        for (const source of sources) {
            const url = `https://jira.${source}.team/rest/api/2/search`;
            const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

            let startAt = 0;
            let total = 0;

            do {
                const response = await axios.get(url, {
                    headers: {
                        'Authorization': `Bearer ${pat}`,
                        'Accept': 'application/json'
                    },
                    params: {
                        jql,
                        maxResults: 50,
                        startAt,
                        fields: 'comment,assignee,summary,priority,issuetype'
                    }
                });

                const issues = response.data.issues;
                total = response.data.total;

                for (const issue of issues) {
                    const taskId = issue.key;
                    const comments = issue.fields.comment.comments;
                    if (comments.length === 0) continue;

                    const lastComment = comments[comments.length - 1];
                    const lastCommentId = lastComment.id;
                    const author = lastComment.author?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';

                    db.get('SELECT lastCommentId FROM task_comments WHERE taskId = ?', [taskId], (err, row) => {
                        if (err) {
                            console.error('Error fetching last comment from DB:', err);
                            return;
                        }

                        // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ task_comments
                        if (!row) {
                            // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –Ω–µ –≤ excluded
                            if (!excludedAuthors.includes(author)) {
                                sendTelegramMessage(taskId, source, issue, lastComment, author);
                            }

                            db.run(
                                'INSERT INTO task_comments (taskId, lastCommentId, assignee) VALUES (?, ?, ?)',
                                [taskId, lastCommentId, issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω']
                            );
                        } else if (row.lastCommentId !== lastCommentId) {
                            // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π
                            if (!excludedAuthors.includes(author)) {
                                sendTelegramMessage(taskId, source, issue, lastComment, author);
                            }

                            db.run(
                                'UPDATE task_comments SET lastCommentId = ?, assignee = ? WHERE taskId = ?',
                                [lastCommentId, issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω', taskId]
                            );
                        }
                    });
                }

                startAt += 50;
            } while (startAt < total);
        }
    } catch (error) {
        console.error('Error checking for new comments:', error);
    }
}

//---------------------------------------------------------------------
// –õ–∏–º–∏—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ø–∞–º–∞)
//---------------------------------------------------------------------
const limiter = new Bottleneck({
    minTime: 2000,     // –ú–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    maxConcurrent: 1   // –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
});

const sendMessageWithLimiter = limiter.wrap(async (chatId, messageText, options) => {
    try {
        console.log(`Sending message to Telegram: ${messageText}`);
        await bot.api.sendMessage(chatId, messageText, options);
    } catch (error) {
        console.error('Error in sendMessageWithLimiter:', error);
        throw error;
    }
});

//---------------------------------------------------------------------
// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
//---------------------------------------------------------------------
function sendTelegramMessage(taskId, source, issue, lastComment, author) {
    const keyboard = new InlineKeyboard();
    keyboard.url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(source, taskId));

    const messageText = `–í –∑–∞–¥–∞—á–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n` +
        `–ó–∞–¥–∞—á–∞: ${taskId}\n` +
        `–ò—Å—Ç–æ—á–Ω–∏–∫: ${source}\n` +
        `–°—Å—ã–ª–∫–∞: ${getTaskUrl(source, taskId)}\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${issue.fields.summary}\n` +
        `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω')}\n` +
        `–¢–∏–ø –∑–∞–¥–∞—á–∏: ${issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${author}\n` +
        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${lastComment.body}`;

    sendMessageWithLimiter(process.env.ADMIN_CHAT_ID, messageText, {
        reply_markup: keyboard
    }).catch(err => {
        console.error('Error sending message to Telegram:', err);
    });
}

//---------------------------------------------------------------------
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
//---------------------------------------------------------------------
cron.schedule('*/5 * * * *', () => {
    console.log('Checking for new comments...');
    checkForNewComments();
});

//---------------------------------------------------------------------
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
//---------------------------------------------------------------------
bot.callbackQuery(/^take_task:(.+)$/, async (ctx) => {
    try {
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫
        await ctx.answerCallbackQuery();

        console.log('–ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É":', ctx.match[1]);
        const taskId = ctx.match[1];
        const username = ctx.from.username;

        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], async (err, task) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
                return;
            }

            if (!task) {
                try {
                    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫:', e);
                }
                await ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }

            if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                let success = false;
                try {
                    success = await updateJiraTaskStatus(task.source, taskId, username);
                } catch (errUpdate) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ updateJiraTaskStatus:', errUpdate);
                }

                console.log('updateJiraTaskStatus –≤–µ—Ä–Ω—É–ª:', success);

                if (success) {
                    const displayName = usernameMappings[ctx.from.username] || ctx.from.username;
                    const messageText = `–ó–∞–¥–∞—á–∞: ${task.id}\n` +
                        `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n` +
                        `–°—Å—ã–ª–∫–∞: ${getTaskUrl(task.source, task.id)}\n` +
                        `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n` +
                        `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n` +
                        `–û—Ç–¥–µ–ª: ${task.department}\n` +
                        `–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: ${displayName}`;

                    // –£–±–∏—Ä–∞–µ–º InlineKeyboard
                    try {
                        await ctx.editMessageText(messageText);
                    } catch (editErr) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', editErr);
                    }

                    db.run('INSERT INTO user_actions (username, taskId, action, timestamp) VALUES (?, ?, ?, ?)',
                        [ctx.from.username, taskId, 'take_task', getMoscowTimestamp()]);
                } else {
                    await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${taskId}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
                }
            } else {
                await ctx.reply('–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –¥–ª—è –æ—Ç–¥–µ–ª–∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç.');
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ take_task:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
    }
});

bot.callbackQuery(/^toggle_description:(.+)$/, async (ctx) => {
    try {
        await ctx.answerCallbackQuery();
        const taskId = ctx.match[1];

        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], async (err, task) => {
            if (err || !task) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ Jira
            const issue = await getJiraTaskDetails(task.source, task.id);
            if (!issue) {
                await ctx.reply('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Jira.');
                return;
            }

            const fullDescription = issue.fields.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
            const priorityEmoji = getPriorityEmoji(task.priority);
            const taskUrl = getTaskUrl(task.source, task.id);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ

            console.log("CTX OBJECT:", ctx);
            console.log("CTX MESSAGE:", ctx.message);
            console.log("CTX MESSAGE TEXT:", ctx.message?.text);

            const isExpanded = ctx.message.text.includes(fullDescription.substring(0, 20));

            if (!isExpanded) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ)
                const attachments = issue.fields.attachment.map(att => ({
                    type: att.mimeType.startsWith('image/') ? 'photo' : 'video',
                    media: att.content
                }));

                const expandedText = `üìå *–ó–∞–¥–∞—á–∞:* [${task.id}](${taskUrl})\n` +
                    `üìç *–ò—Å—Ç–æ—á–Ω–∏–∫:* ${task.source}\n` +
                    `üîπ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${priorityEmoji} ${task.priority}\n` +
                    `üìñ *–¢–∏–ø:* ${task.issueType}\n\n` +
                    `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${fullDescription}`;

                const keyboard = new InlineKeyboard()
                    .text('‚¨Ü –°–∫—Ä—ã—Ç—å', `toggle_description:${task.id}`)
                    .url('üìå –û—Ç–∫—Ä—ã—Ç—å –≤ Jira', taskUrl);

                if (attachments.length > 0) {
                    await ctx.replyWithMediaGroup(attachments);
                }

                await ctx.editMessageText(expandedText, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });

            } else {
                // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                const collapsedText = `üìå *–ó–∞–¥–∞—á–∞:* [${task.id}](${taskUrl})\n` +
                    `üìç *–ò—Å—Ç–æ—á–Ω–∏–∫:* ${task.source}\n` +
                    `üîπ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${priorityEmoji} ${task.priority}\n`;

                const keyboard = new InlineKeyboard()
                    .text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`)
                    .url('üìå –û—Ç–∫—Ä—ã—Ç—å –≤ Jira', taskUrl);

                await ctx.editMessageText(collapsedText, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ/–°–∫—Ä—ã—Ç—å":', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});

//---------------------------------------------------------------------
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Jira
//---------------------------------------------------------------------
async function updateJiraTaskStatus(source, taskId, telegramUsername) {
    try {
        let transitionId;
        if (source === 'sxl') {
            transitionId = '221'; // –¢—Ä–∞–Ω–∑–∏—à–µ–Ω –¥–ª—è sxl
        } else if (source === 'betone') {
            transitionId = '201'; // –¢—Ä–∞–Ω–∑–∏—à–µ–Ω –¥–ª—è betone
        } else {
            console.error('Invalid source specified');
            return false;
        }

        const jiraUsername = jiraUserMappings[telegramUsername]?.[source];
        if (!jiraUsername) {
            console.error(`No Jira username mapping found for Telegram username: ${telegramUsername}`);
            return false;
        }

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const assigneeUrl = `https://jira.${source}.team/rest/api/2/issue/${taskId}/assignee`;
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        const assigneeResponse = await axios.put(
            assigneeUrl,
            { name: jiraUsername },
            {
                headers: {
                    'Authorization': `Bearer ${pat}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (assigneeResponse.status !== 204) {
            console.error(`Error assigning Jira task: ${assigneeResponse.status}`);
            return false;
        }

        // –î–µ–ª–∞–µ–º —Ç—Ä–∞–Ω–∑–∏—à–µ–Ω
        const transitionUrl = `https://jira.${source}.team/rest/api/2/issue/${taskId}/transitions`;
        const transitionResponse = await axios.post(
            transitionUrl,
            {
                transition: {
                    id: transitionId
                }
            },
            {
                headers: {
                    'Authorization': `Bearer ${pat}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        return transitionResponse.status === 204;
    } catch (error) {
        console.error(`Error updating ${source} Jira task:`, error);
        return false;
    }
}

//---------------------------------------------------------------------
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Confluence –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
//---------------------------------------------------------------------
// –î–æ–ø—É—Å—Ç–∏–º, —á—Ç–æ ID –∏–ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —É—Å–ª–æ–≤–Ω–æ–µ (–Ω–∞–¥–æ —É—Ç–æ—á–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π)
// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —Å–≤–µ—Ä—è—è —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω
async function fetchDutyEngineer() {
    try {
      const pageId = '3539406'; // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π pageId
      const token = process.env.CONFLUENCE_API_TOKEN; // Bearer-—Ç–æ–∫–µ–Ω –∏–∑ .env
  
      // 1) –î–µ–ª–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ Confluence —Å expand=body.view
      const resp = await axios.get(`https://wiki.sxl.team/rest/api/content/${pageId}?expand=body.view`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json'
        }
      });
  
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤
      const html = resp.data?.body?.view?.value;
      if (!html) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –∏–∑ body.view.value');
        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
      }
  
      // 2) –ü–∞—Ä—Å–∏–º HTML, –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞:
      // <tr><td>1</td><td>06.01-12.01</td><td>–ò–≤–∞–Ω–æ–≤</td></tr>
      const rowRegex = /<(?:tr|TR)[^>]*>\s*<td[^>]*>(\d+)<\/td>\s*<td[^>]*>(\d{2}\.\d{2}-\d{2}\.\d{2})<\/td>\s*<td[^>]*>([^<]+)<\/td>/g;
      const schedule = [];
      let match;
  
      while ((match = rowRegex.exec(html)) !== null) {
        schedule.push({
          index: match[1],   // "1", "2", ...
          range: match[2],   // "06.01-12.01"
          name: match[3].trim()
        });
      }
  
      if (schedule.length === 0) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –∏–∑ HTML.');
        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
      }
  
      // 3) –ü–æ–ª—É—á–∞–µ–º "—Å–µ–≥–æ–¥–Ω—è" –ø–æ –ú–æ—Å–∫–≤–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'yyyy-MM-dd HH:mm:ss'
      const nowStr = getMoscowTimestamp(); // –Ω–∞–ø—Ä–∏–º–µ—Ä "2025-03-10 13:45:00"
      // –ü–∞—Ä—Å–∏–º –µ–≥–æ –≤ Luxon DateTime
      const today = DateTime.fromFormat(nowStr, 'yyyy-MM-dd HH:mm:ss');
  
      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      for (const item of schedule) {
        const [startStr, endStr] = item.range.split('-'); // "06.01" / "12.01"
        const [startDay, startMonth] = startStr.split('.');
        const [endDay, endMonth] = endStr.split('.');
        const year = 2025; // –≤ —Ç–∞–±–ª–∏—Ü–µ —É–∫–∞–∑–∞–Ω 2025
  
        // startDate / endDate —Ç–æ–∂–µ –¥–µ–ª–∞–µ–º DateTime –±–µ–∑ zone
        // (–º—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å today, –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–∫–∂–µ –ª–æ–∫–∞–ª—å–Ω—ã–π)
        const startDate = DateTime.fromObject({
          year,
          month: Number(startMonth),
          day: Number(startDay)
        });
        const endDate = DateTime.fromObject({
          year,
          month: Number(endMonth),
          day: Number(endDay)
        });
  
        // –ï—Å–ª–∏ today –≤—Ö–æ–¥–∏—Ç –≤ [startDate..endDate], –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
        if (today >= startDate && today <= endDate) {
          return item.name;
        }
      }
  
      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –ø–æ–¥–æ—à—ë–ª
      return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
  
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Confluence:', error);
      throw error; // –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—à–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ª–æ–≤–∏—Ç—å –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
    }
  }
  

// –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã /duty
bot.command('duty', async (ctx) => {
  try {
    const engineer = await fetchDutyEngineer();
    await ctx.reply(`–î–µ–∂—É—Ä–Ω—ã–π: ${engineer}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–∂—É—Ä–Ω–æ–≥–æ:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ.');
  }
});
      

//---------------------------------------------------------------------
// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–æ—á–Ω–æ–π –∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–º–µ–Ω—ã
//---------------------------------------------------------------------
let interval = null;
let nightShiftCron = null;
let morningShiftCron = null;

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
bot.command('start', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...');

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ Jira-–∑–∞–¥–∞—á
    if (!interval) {
        interval = setInterval(async () => {
            console.log('Interval triggered. Fetching + Sending Jira tasks...');
            await fetchAndStoreJiraTasks();
            await sendJiraTasks(ctx);
            console.log('Jira tasks sent.');
        }, 60000);
    } else {
        await ctx.reply('–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω.');
    }

    // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–æ—á–Ω–æ–π –∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–º–µ–Ω—ã
    if (!nightShiftCron) {
        // –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ - –≤ 01:00
        nightShiftCron = cron.schedule('0 1 * * *', async () => {
            await bot.api.sendMessage(process.env.ADMIN_CHAT_ID, '–î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ó–∞–ø–æ–ª–Ω–∏ —Ç–∏–∫–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω—ã.');
        }, {
            scheduled: true,
            timezone: 'Europe/Moscow'
        });
    
        // –£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ - –≤ 10:00
        if (!morningShiftCron) {
            morningShiftCron = cron.schedule('0 10 * * *', async () => {
                try {
                    const engineer = await fetchDutyEngineer();
                    await bot.api.sendMessage(
                        process.env.ADMIN_CHAT_ID,
                        `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –∑–∞–ø–æ–ª–Ω–∏ —Ç–∏–∫–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —Å–º–µ–Ω—ã.\n–î–µ–∂—É—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${engineer}`
                    );
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–∂—É—Ä–Ω–æ–≥–æ:', err);
                }
            }, {
                scheduled: true,
                timezone: 'Europe/Moscow'
            });
        }  // <-- –í–û–¢ —ç—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    
        nightShiftCron.start();
        morningShiftCron.start();
    }

    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ task_comments
    db.all('SELECT taskId FROM task_comments', [], async (err, rows) => {
        if (err) {
            console.error('Error fetching task comments:', err);
            return;
        }
        console.log(`Total task_comments in database: ${rows.length}`);
    });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();