require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const { DateTime } = require('luxon');
const cron = require('node-cron');
const Bottleneck = require('bottleneck');
const express = require('express');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const xlsx = require('xlsx'); // –î–ª—è —á—Ç–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–æ–≤ (–∏–∑ –±—É—Ñ–µ—Ä–∞)

// ----------------------------------------------------------------------------------
// 1) –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê, –ë–ê–ó–´, –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ----------------------------------------------------------------------------------

const bot = new Bot(process.env.BOT_API_KEY);
const db = new sqlite3.Database('tasks.db');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ "yyyy-MM-dd HH:mm:ss"
function getMoscowTimestamp() {
    return DateTime.now().setZone('Europe/Moscow').toFormat('yyyy-MM-dd HH:mm:ss');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ Luxon‚ÄêDateTime (–ú–æ—Å–∫–≤–∞)
function getMoscowDateTime() {
    return DateTime.now().setZone('Europe/Moscow');
}

// –°–æ–∑–¥–∞—ë–º –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ SQLite (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã)
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS tasks (
        id TEXT PRIMARY KEY,
        title TEXT,
        priority TEXT,
        department TEXT,
        issueType TEXT,
        dateAdded DATETIME,
        lastSent DATETIME,
        source TEXT
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS user_actions (
        username TEXT,
        taskId TEXT,
        action TEXT,
        timestamp DATETIME,
        FOREIGN KEY(taskId) REFERENCES tasks(id)
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS task_comments (
        taskId TEXT PRIMARY KEY,
        lastCommentId TEXT,
        assignee TEXT,
        FOREIGN KEY(taskId) REFERENCES tasks(id)
    )`);
});

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Jira ‚Üí —ç–º–æ–¥–∑–∏
function getPriorityEmoji(priority) {
    const emojis = {
        Blocker: 'üö®',
        High: 'üî¥',
        Medium: 'üü°',
        Low: 'üü¢'
    };
    return emojis[priority] || '';
}

// –§—É–Ω–∫—Ü–∏—è, –æ—Ç–¥–µ–ª—è—é—â–∞—è "sxl-" –∏–ª–∏ "betone-" –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
function extractRealJiraKey(fullId) {
    if (fullId.startsWith('sxl-') || fullId.startsWith('betone-')) {
        const parts = fullId.split('-');
        parts.shift();
        return parts.join('-');
    }
    return fullId;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è Jira
function getTaskUrl(source, combinedId) {
    const realKey = extractRealJiraKey(combinedId);
    return `https://jira.${source}.team/browse/${realKey}`;
}

// –ú–∞–ø–ø–∏–Ω–≥ Telegram username ‚Üí –§–ò–û
const usernameMappings = {
    "lipchinski": "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
    "pr0spal": "–ï–≤–≥–µ–Ω–∏–π –®—É—à–∫–æ–≤",
    "fdhsudgjdgkdfg": "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
    "EuroKaufman": "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤",
    "Nikolay_Gonchar": "–ù–∏–∫–æ–ª–∞–π –ì–æ–Ω—á–∞—Ä",
    "KIRILlKxX": "–ö–∏—Ä–∏–ª–ª –ê—Ç–∞–Ω–∏–∑—è–æ–≤",
    "marysh353": "–î–∞–Ω–∏–∏–ª –ú–∞—Ä—ã—à–µ–≤"
};

// –ú–∞–ø–ø–∏–Ω–≥ Telegram username ‚Üí Jira username
const jiraUserMappings = {
    "lipchinski": { "sxl": "d.selivanov", "betone": "dms" },
    "pr0spal": { "sxl": "e.shushkov", "betone": "es" },
    "fdhsudgjdgkdfg": { "sxl": "d.maslov", "betone": "dam" },
    "EuroKaufman": { "sxl": "d.baratov", "betone": "db" },
    "Nikolay_Gonchar": { "sxl": "n.gonchar", "betone": "ng" },
    "KIRILlKxX": { "sxl": "k.ataniyazov", "betone": "ka" },
    "marysh353": { "sxl": "d.maryshev", "betone": "dma" }
};

// ----------------------------------------------------------------------------------
// 2) EXPRESS (—Ä–∞–∑–¥–∞—á–∞ –≤–ª–æ–∂–µ–Ω–∏–π Jira) –∏ –æ—á–∏—Å—Ç–∫–∞
// ----------------------------------------------------------------------------------

const app = express();
const ATTACHMENTS_DIR = path.join(__dirname, 'attachments');

if (!fs.existsSync(ATTACHMENTS_DIR)) {
    fs.mkdirSync(ATTACHMENTS_DIR);
}
app.use('/attachments', express.static(ATTACHMENTS_DIR));

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Express server listening on port ${PORT}`);
});

// –ö—Ä–æ–Ω –Ω–∞ 3:00 ‚Äî —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã –∏–∑ attachments —Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫
cron.schedule('0 3 * * *', () => {
    console.log('[CRON] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ attachments...');
    const now = Date.now();
    const cutoff = now - 24 * 60 * 60 * 1000;

    fs.readdir(ATTACHMENTS_DIR, (err, files) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ attachments:', err);
            return;
        }
        files.forEach(file => {
            const filePath = path.join(ATTACHMENTS_DIR, file);
            fs.stat(filePath, (statErr, stats) => {
                if (statErr) {
                    console.error('–û—à–∏–±–∫–∞ fs.stat:', statErr);
                    return;
                }
                if (stats.mtimeMs < cutoff) {
                    fs.unlink(filePath, delErr => {
                        if (delErr) {
                            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', delErr);
                        } else {
                            console.log(`–§–∞–π–ª ${file} —É–¥–∞–ª—ë–Ω (—Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫)`);
                        }
                    });
                }
            });
        });
    });
}, {
    timezone: 'Europe/Moscow'
});

// ----------------------------------------------------------------------------------
// 3) –°–ë–û–† –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û –í–°–ï–ú –ü–û–î–°–¢–†–ê–ù–ò–¶–ê–ú ("–ì—Ä–∞—Ñ–∏–∫ ... 2025") –ò –ü–ê–†–°–ò–ù–ì EXCEL
// ----------------------------------------------------------------------------------

// –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ ‚Üí –Ω–æ–º–µ—Ä (1..12)
const monthNamesRu = {
    '—è–Ω–≤–∞—Ä—å': 1,
    '—Ñ–µ–≤—Ä–∞–ª—å': 2,
    '–º–∞—Ä—Ç': 3,
    '–∞–ø—Ä–µ–ª—å': 4,
    '–º–∞–π': 5,
    '–∏—é–Ω—å': 6,
    '–∏—é–ª—å': 7,
    '–∞–≤–≥—É—Å—Ç': 8,
    '—Å–µ–Ω—Ç—è–±—Ä—å': 9,
    '–æ–∫—Ç—è–±—Ä—å': 10,
    '–Ω–æ—è–±—Ä—å': 11,
    '–¥–µ–∫–∞–±—Ä—å': 12
};

// –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≥–¥–µ –ª–µ–∂–∞—Ç –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∏–¥–∞ ¬´–ì—Ä–∞—Ñ–∏–∫ —è–Ω–≤–∞—Ä—å 2025¬ª
const PARENT_PAGE_ID = '55414233'; 

// –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ "2025-4" ‚Üí childPageId (–Ω–∞–ø—Ä–∏–º–µ—Ä, 96732191)
let pageMap = {}; 

// –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º –≥–æ—Ç–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: schedulesByKey["2025-4"] = {...}
const schedulesByKey = {};

/**
 * 3.1) –°—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö child pages —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π (PARENT_PAGE_ID),
 *      –∏–∑–≤–ª–µ—á—å –∏—Ö ID –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫. –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∏–ø–∞ ¬´–ì—Ä–∞—Ñ–∏–∫ —è–Ω–≤–∞—Ä—å 2025¬ª
 *      –ø–∞—Ä—Å–∏–º (–º–µ—Å—è—Ü, –≥–æ–¥) –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º "YYYY-M" ‚Üí pageId.
 */
async function buildPageMapForSchedules() {
    const baseUrl = 'https://wiki.sxl.team';
    const confluenceToken = process.env.CONFLUENCE_API_TOKEN;

    const url = `${baseUrl}/rest/api/content/${PARENT_PAGE_ID}/child/page?limit=200`;
    const resp = await axios.get(url, {
        headers: {
            'Authorization': `Bearer ${confluenceToken}`,
            'Accept': 'application/json'
        }
    });

    if (!resp.data || !resp.data.results) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è ${PARENT_PAGE_ID}`);
    }

    const pages = resp.data.results; // –º–∞—Å—Å–∏–≤
    const newMap = {};

    for (const p of pages) {
        const title = (p.title || "").toLowerCase().trim(); // "–≥—Ä–∞—Ñ–∏–∫ –∞–ø—Ä–µ–ª—å 2025"
        const matches = title.match(/–≥—Ä–∞—Ñ–∏–∫\s+([–∞-—è—ë]+)\s+(\d{4})/);
        if (matches) {
            const monthWord = matches[1]; // "–∞–ø—Ä–µ–ª—å"
            const yearStr = matches[2];    // "2025"

            const year = parseInt(yearStr, 10);
            const month = monthNamesRu[monthWord]; // 4

            if (year && month) {
                // –ö–ª—é—á –≤–∏–¥–∞ "2025-4"
                const key = `${year}-${month}`;
                newMap[key] = p.id; // p.id = pageId –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü—ã
            }
        }
    }

    pageMap = newMap;
    console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∫–∞—Ä—Ç—É –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü:', pageMap);
}

/**
 * 3.2) –°–∫–∞—á–∏–≤–∞–µ–º Excel‚Äê—Ñ–∞–π–ª (attachment) —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function fetchExcelFromConfluence(pageId) {
    const confluenceToken = process.env.CONFLUENCE_API_TOKEN;
    const baseUrl = 'https://wiki.sxl.team';

    // —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π
    const attachmentsUrl = `${baseUrl}/rest/api/content/${pageId}/child/attachment`;
    const resp = await axios.get(attachmentsUrl, {
        headers: {
            'Authorization': `Bearer ${confluenceToken}`,
            'Accept': 'application/json'
        }
    });

    if (!resp.data || !resp.data.results || resp.data.results.length === 0) {
        throw new Error(`–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageId} –≤–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`);
    }

    // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ .xlsx
    let attachment = resp.data.results.find(a =>
        a.metadata?.mediaType === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    );
    if (!attachment) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —á—ë—Ç–∫–æ–≥–æ .xlsx ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ
        attachment = resp.data.results[0];
    }

    const downloadUrl = attachment._links?.download;
    if (!downloadUrl) {
        throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ download —É –≤–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageId}`);
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª (arraybuffer)
    const fileResp = await axios.get('https://wiki.sxl.team' + downloadUrl, {
        headers: { 'Authorization': `Bearer ${confluenceToken}` },
        responseType: 'arraybuffer'
    });

    return Buffer.from(fileResp.data);
}

/**
 * 3.3) –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel:
 *      –í–æ–∑–≤—Ä–∞—â–∞–µ–º schedule[ dayNum ] = { "9-21": [...], "10-19": [...], "21-9": [...] }
 */
function parseScheduleFromBuffer(xlsxBuffer) {
    const workbook = xlsx.read(xlsxBuffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];

    const raw = xlsx.utils.sheet_to_json(sheet, {
        header: 1, // –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤
        defval: ""
    });

    // –∏—â–µ–º —Å—Ç—Ä–æ–∫—É "–§–ò–û"
    let headerRowIndex = -1;
    for (let i = 0; i < raw.length; i++) {
        const firstCell = String(raw[i][0] || "").trim().toLowerCase();
        if (firstCell === "—Ñ–∏–æ") {
            headerRowIndex = i;
            break;
        }
    }
    if (headerRowIndex < 0) {
        throw new Error("–í Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –≥–¥–µ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ = '–§–ò–û'");
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–Ω–µ–π (1..31)
    const dayColumnMap = {};
    const headerRow = raw[headerRowIndex];
    for (let col = 1; col < headerRow.length; col++) {
        const val = String(headerRow[col] || "").trim();
        const dayNum = parseInt(val, 10);
        if (!isNaN(dayNum) && dayNum >= 1 && dayNum <= 31) {
            dayColumnMap[dayNum] = col;
        }
    }

    // –ó–∞–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const schedule = {};
    for (let d = 1; d <= 31; d++) {
        schedule[d] = {
            "9-21": [],
            "10-19": [],
            "21-9": []
        };
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å "–≤—Ç, —Å—Ä, —á—Ç" –∏ —Ç.–¥.
    let rowIndex = headerRowIndex + 2;

    for (; rowIndex < raw.length; rowIndex++) {
        const row = raw[rowIndex];
        if (!row || row.length === 0) break;

        const fioCell = String(row[0] || "").trim();
        if (!fioCell) break;

        const lowFio = fioCell.toLowerCase();
        if (
            lowFio.startsWith("–∏—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫")
            || lowFio.startsWith("–∏—Ç–æ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            || lowFio.startsWith("—Å –≥—Ä–∞—Ñ–∏–∫–æ–º")
            || lowFio.startsWith("–∏—Ç–æ–≥–æ –≤ –¥–µ–Ω—å")
            || lowFio === "—Ñ–∏–æ"
        ) {
            // –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º
            break;
        }

        for (const dStr in dayColumnMap) {
            const d = parseInt(dStr, 10);
            const colIndex = dayColumnMap[d];
            const cellVal = String(row[colIndex] || "").trim().toLowerCase().replace(/‚Äì/g, '-');

            if (cellVal === "9-21") {
                schedule[d]["9-21"].push(fioCell);
            } else if (cellVal === "10-19") {
                schedule[d]["10-19"].push(fioCell);
            } else if (cellVal === "21-9") {
                schedule[d]["21-9"].push(fioCell);
            }
            // –æ—Ç–ø—É—Å–∫/–ø—É—Å—Ç–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        }
    }

    return schedule;
}

/**
 * 3.4) –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ (year, month) –∏–∑ Confluence –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ schedulesByKey
 */
async function loadScheduleForMonthYear(year, month) {
    const key = `${year}-${month}`;
    if (!pageMap[key]) {
        // –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ pageMap
        console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω pageId –¥–ª—è "${year}-${month}". –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ì—Ä–∞—Ñ–∏–∫ ..."?`);
        schedulesByKey[key] = {}; // –ø—É—Å—Ç–æ–µ
        return;
    }

    const pageId = pageMap[key];
    const buffer = await fetchExcelFromConfluence(pageId);
    const scheduleObj = parseScheduleFromBuffer(buffer);
    schedulesByKey[key] = scheduleObj;
    console.log(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${key} (pageId=${pageId}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.`);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è.
 * –ï—Å–ª–∏ –≤ –∫—ç—à–µ (schedulesByKey) –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ—Å—è—Ü–∞ ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º.
 */
async function getScheduleForDate(dt) {
    const y = dt.year;
    const m = dt.month;
    const key = `${y}-${m}`;

    // –ï—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
    if (!schedulesByKey[key]) {
        console.log(`[getScheduleForDate] –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ${key}, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å...`);
        await loadScheduleForMonthYear(y, m); 
    }

    const scheduleObj = schedulesByKey[key] || {};
    const daySchedule = scheduleObj[dt.day];
    if (!daySchedule) {
        // –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        return null;
    }
    return daySchedule;
}

// ----------------------------------------------------------------------------------
// 4) –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–ñ–£–†–ù–û–ì–û (fetchDutyEngineer) ‚Äî –ü–û–õ–ù–û–°–¢–¨–Æ
// ----------------------------------------------------------------------------------

async function fetchDutyEngineer() {
    try {
        const pageId = '3539406'; // ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≥–¥–µ –ª–µ–∂–∏—Ç —Ç–∞–±–ª–∏—Ü–∞
        const token = process.env.CONFLUENCE_API_TOKEN;

        // –ó–∞–±–∏—Ä–∞–µ–º HTML
        const resp = await axios.get(`https://wiki.sxl.team/rest/api/content/${pageId}?expand=body.view`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        let html = resp.data?.body?.view?.value;
        if (!html) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –∏–∑ body.view.value');
            return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
        }

        // –ß—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 2024 –≥–æ–¥–∞, –æ–±—Ä–µ–∑–∞–µ–º HTML –¥–æ —Å–ª–æ–≤–∞ "2024"
        const marker = '<span class="expand-control-text conf-macro-render">2024</span>';
        const markerIndex = html.indexOf(marker);
        if (markerIndex !== -1) {
            html = html.slice(0, markerIndex);
        }

        // –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞:
        // <tr><td>1</td><td>02.01-08.01</td><td>–ò–≤–∞–Ω–æ–≤ –ò.–ò.</td></tr>
        // –ò —Ç.–¥.

        const rowRegex = /<(?:tr|TR)[^>]*>\s*<td[^>]*>(\d+)<\/td>\s*<td[^>]*>(\d{2}\.\d{2}-\d{2}\.\d{2})<\/td>\s*<td[^>]*>([^<]+)<\/td>/g;
        const schedule = [];
        let match;
        while ((match = rowRegex.exec(html)) !== null) {
            schedule.push({
                index: match[1],      // "1"
                range: match[2],     // "02.01-08.01"
                name: match[3].trim() // "–ò–≤–∞–Ω–æ–≤ –ò.–ò."
            });
        }

        if (schedule.length === 0) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤ –∏–∑ HTML');
            return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
        }

        // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞)
        const now = DateTime.now().setZone('Europe/Moscow');

        // –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) –∏ –∫–æ–Ω–µ—Ü
        const startOfWeek = now.startOf('week'); // Luxon –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: startOf('week') = –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        const endOfWeek = startOfWeek.plus({ days: 6 });
        const currentYear = startOfWeek.year;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –ø—É–Ω–∫—Ç schedule —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ–π
        for (const item of schedule) {
            const [startStr, endStr] = item.range.split('-');
            const [startDay, startMonth] = startStr.split('.');
            const [endDay, endMonth] = endStr.split('.');

            const scheduleStart = DateTime.fromObject({
                year: currentYear,
                month: parseInt(startMonth, 10),
                day: parseInt(startDay, 10)
            });
            const scheduleEnd = DateTime.fromObject({
                year: currentYear,
                month: parseInt(endMonth, 10),
                day: parseInt(endDay, 10)
            });

            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            if (
                scheduleStart.hasSame(startOfWeek, 'day') &&
                scheduleStart.hasSame(startOfWeek, 'month') &&
                scheduleEnd.hasSame(endOfWeek, 'day') &&
                scheduleEnd.hasSame(endOfWeek, 'month')
            ) {
                return item.name;
            }
        }

        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Confluence (–¥–µ–∂—É—Ä–Ω—ã–π):', error);
        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
    }
}

// ----------------------------------------------------------------------------------
// 5) JIRA: –ü–û–õ–£–ß–ï–ù–ò–ï –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–î–ê–ß, –û–¢–ü–†–ê–í–ö–ê –í –¢–ì
// ----------------------------------------------------------------------------------

async function fetchAndStoreJiraTasks() {
    await fetchAndStoreTasksFromJira('sxl', 'https://jira.sxl.team/rest/api/2/search', process.env.JIRA_PAT_SXL, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
    await fetchAndStoreTasksFromJira('betone', 'https://jira.betone.team/rest/api/2/search', process.env.JIRA_PAT_BETONE, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
}

async function fetchAndStoreTasksFromJira(source, url, pat, ...departments) {
    try {
        console.log(`Fetching tasks from ${source} Jira...`);
        const departmentQuery = departments.map(dep => `"${dep}"`).join(" OR –û—Ç–¥–µ–ª = ");
        let jql;

        if (source === 'sxl') {
            jql = `
                project = SUPPORT AND (
                    (issuetype = Infra AND status = "Open") OR
                    (issuetype = Office AND status = "Under review") OR
                    (issuetype = Office AND status = "Waiting for support") OR
                    (issuetype = Prod AND status = "Waiting for Developers approval") OR
                    (–û—Ç–¥–µ–ª = ${departmentQuery} AND status = "Open")
                )
            `;
        } else {
            // betone
            jql = `project = SUPPORT AND (–û—Ç–¥–µ–ª = ${departmentQuery}) AND status = "Open"`;
        }

        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            },
            params: { jql }
        });
        console.log(`${source} Jira API response:`, response.data);

        const fetchedTaskIds = response.data.issues.map(issue => `${source}-${issue.key}`);

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–≤–µ–∂–µ–º —Å–ø–∏—Å–∫–µ
        await new Promise((resolve, reject) => {
            const placeholders = fetchedTaskIds.map(() => '?').join(',');
            db.run(
                `DELETE FROM tasks
                 WHERE id NOT IN (${placeholders})
                   AND source = ?`,
                [...fetchedTaskIds, source],
                function(err) {
                    if (err) reject(err);
                    else resolve();
                }
            );
        });

        // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º
        for (const issue of response.data.issues) {
            const uniqueId = `${source}-${issue.key}`;
            const task = {
                id: uniqueId,
                title: issue.fields.summary,
                priority: issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                issueType: issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω',
                department: (
                    (source === 'betone' && issue.fields.customfield_10504)
                        ? issue.fields.customfield_10504.value
                        : (
                            (source === 'sxl' && issue.fields.customfield_10500)
                                ? issue.fields.customfield_10500.value
                                : '–ù–µ —É–∫–∞–∑–∞–Ω'
                        )
                ),
                dateAdded: getMoscowTimestamp(),
                source
            };

            const existingTask = await new Promise((resolve, reject) => {
                db.get('SELECT * FROM tasks WHERE id = ?', [uniqueId], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });

            if (existingTask) {
                db.run(
                    `UPDATE tasks SET
                        title = ?,
                        priority = ?,
                        issueType = ?,
                        department = ?,
                        source = ?
                      WHERE id = ?`,
                    [task.title, task.priority, task.issueType, task.department, task.source, task.id]
                );
            } else {
                db.run(
                    `INSERT OR REPLACE INTO tasks (id, title, priority, issueType, department, dateAdded, lastSent, source)
                     VALUES (?, ?, ?, ?, ?, ?, NULL, ?)`,
                    [task.id, task.title, task.priority, task.issueType, task.department, task.dateAdded, task.source]
                );
            }
        }
    } catch (error) {
        console.error(`Error fetching and storing tasks from ${source} Jira:`, error);
    }
}

async function getJiraTaskDetails(source, combinedId) {
    try {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "betone-" –∏–ª–∏ "sxl-" –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
        const realKey = extractRealJiraKey(combinedId); // –ù–∞–ø—Ä–∏–º–µ—Ä, "SUPPORT-574"
        const url = `https://jira.${source}.team/rest/api/2/issue/${realKey}?fields=summary,description,attachment,priority,issuetype,status,assignee`;
        const pat = (source === 'sxl') ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        console.log(`[getJiraTaskDetails] GET ${url}`);
        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Accept': 'application/json'
            }
        });
        return response.data; // –æ–±—ä–µ–∫—Ç issue –æ—Ç Jira
    } catch (error) {
        console.error(`[getJiraTaskDetails] –û—à–∏–±–∫–∞ GET ${source}-${combinedId}:`, error);
        return null;
    }
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –¢–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Ä–∞–∑ –≤ 3 –¥–Ω—è –¥–ª—è Infra/Office/Prod)
async function sendJiraTasks(ctx) {
    const today = getMoscowTimestamp().split(' ')[0];
    const query = `
        SELECT * FROM tasks WHERE
        (department = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" AND (lastSent IS NULL OR lastSent < date('${today}')))
        OR
        (issueType IN ('Infra', 'Office', 'Prod') AND (lastSent IS NULL OR lastSent < datetime('now', '-3 days')))
        ORDER BY CASE
            WHEN department = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' THEN 1
            ELSE 2
        END
    `;

    db.all(query, [], async (err, rows) => {
        if (err) {
            console.error('Error fetching tasks:', err);
            return;
        }

        for (const task of rows) {
            const keyboard = new InlineKeyboard();
            if (task.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                keyboard
                    .text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`)
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id))
                    .text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
            } else if (['Infra', 'Office', 'Prod'].includes(task.issueType)) {
                keyboard
                    .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(task.source, task.id))
                    .text('‚¨á –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `toggle_description:${task.id}`);
            }

            const messageText =
                `–ó–∞–¥–∞—á–∞: ${task.id}\n` +
                `–ò—Å—Ç–æ—á–Ω–∏–∫: ${task.source}\n` +
                `–°—Å—ã–ª–∫–∞: ${getTaskUrl(task.source, task.id)}\n` +
                `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n` +
                `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n` +
                `–¢–∏–ø –∑–∞–¥–∞—á–∏: ${task.issueType}`;

            await ctx.reply(messageText, { reply_markup: keyboard });

            const moscowTimestamp = getMoscowTimestamp();
            db.run('UPDATE tasks SET lastSent = ? WHERE id = ?', [moscowTimestamp, task.id]);
        }
    });
}

// ----------------------------------------------------------------------------------
// 6) –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
// ----------------------------------------------------------------------------------

async function checkForNewComments() {
    try {
        const jql = `project = SUPPORT AND updated >= -7d`;
        const sources = ['sxl', 'betone'];
        const excludedAuthors = Object.values(jiraUserMappings).flatMap(mapping => Object.values(mapping));

        for (const source of sources) {
            const url = `https://jira.${source}.team/rest/api/2/search`;
            const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

            let startAt = 0;
            let total = 0;

            do {
                const response = await axios.get(url, {
                    headers: {
                        'Authorization': `Bearer ${pat}`,
                        'Accept': 'application/json'
                    },
                    params: {
                        jql,
                        maxResults: 50,
                        startAt,
                        fields: 'comment,assignee,summary,priority,issuetype,customfield_10500,customfield_10504'
                    }
                });

                total = response.data.total;
                const issues = response.data.issues;

                for (const issue of issues) {
                    const taskId = `${source}-${issue.key}`;
                    let department = '–ù–µ —É–∫–∞–∑–∞–Ω';

                    if (source === 'sxl') {
                        department = issue.fields.customfield_10500?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
                    } else {
                        department = issue.fields.customfield_10504?.value || '–ù–µ —É–∫–∞–∑–∞–Ω';
                    }

                    const comments = issue.fields.comment?.comments;
                    if (!comments || comments.length === 0) continue;

                    const lastComment = comments[comments.length - 1];
                    const lastCommentId = lastComment.id;
                    const author = lastComment.author?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';

                    const isTechSupportDept = (department === '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
                    const isOurComment = excludedAuthors.includes(author);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–¥–µ–ª ‚Äî –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∏–ª–∏ –∞–≤—Ç–æ—Ä ‚Äî –∫—Ç–æ‚Äê—Ç–æ –∏–∑ –Ω–∞—Å
                    if (!isTechSupportDept && !isOurComment) {
                        continue;
                    }

                    db.get(
                        'SELECT lastCommentId FROM task_comments WHERE taskId = ?',
                        [taskId],
                        (err, row) => {
                            if (err) {
                                console.error('Error fetching last comment from DB:', err);
                                return;
                            }

                            if (!row) {
                                // –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤–∏–¥–∏–º
                                sendTelegramMessage(taskId, source, issue, lastComment, author, department, isOurComment);
                                db.run(
                                    `INSERT INTO task_comments (taskId, lastCommentId, assignee)
                                     VALUES (?, ?, ?)`,
                                    [taskId, lastCommentId, issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω']
                                );
                            } else if (row.lastCommentId !== lastCommentId) {
                                // –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç
                                sendTelegramMessage(taskId, source, issue, lastComment, author, department, isOurComment);
                                db.run(
                                    `UPDATE task_comments
                                     SET lastCommentId = ?, assignee = ?
                                     WHERE taskId = ?`,
                                    [lastCommentId, issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω', taskId]
                                );
                            }
                        }
                    );
                }

                startAt += 50;
            } while (startAt < total);
        }
    } catch (error) {
        console.error('Error checking for new comments:', error);
    }
}

// –ß—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å ‚Äî –ª–∏–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
const limiter = new Bottleneck({
    minTime: 5000,
    maxConcurrent: 1
});
const sendMessageWithLimiter = limiter.wrap(async (chatId, text, opts) => {
    await bot.api.sendMessage(chatId, text, opts);
});

const commentCache = {};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
 */
function sendTelegramMessage(combinedId, source, issue, lastComment, authorName, department, isOurComment) {
    const keyboard = new InlineKeyboard().url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(source, combinedId));
  
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥
    let displayAuthor = authorName;
    const mappedAuthor = getHumanReadableName(authorName, source);
    if (mappedAuthor) {
      displayAuthor = mappedAuthor;
    }
  
    // –ü–æ–ª—É—á–∞–µ–º HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
    const fullCommentHtml = parseCustomMarkdown(lastComment.body || '');
  
    // –û–±—Ä–µ–∑–∞–µ–º HTML –±–µ–∑–æ–ø–∞—Å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞—Ç—å —Ç–µ–≥ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
    const MAX_LEN = 300; // –ø–æ—Ä–æ–≥–æ–≤–∞—è –¥–ª–∏–Ω–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
    let shortCommentHtml = safeTruncateHtml(fullCommentHtml, MAX_LEN);
  
    // –ï—Å–ª–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
    if (fullCommentHtml.length > MAX_LEN) {
      keyboard.text('–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å', `expand_comment:${combinedId}:${lastComment.id}`);
    }
  
    // –ü—Ä–µ—Ñ–∏–∫—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const prefix = isOurComment
      ? '–í –∑–∞–¥–∞—á–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n'
      : '–í –∑–∞–¥–∞—á–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n';
  
    // –§–æ—Ä–º–∏—Ä—É–µ–º ¬´–∑–∞–≥–æ–ª–æ–≤–æ–∫¬ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–æ –±–ª–æ–∫–∞ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    const header =
      `<b>–ó–∞–¥–∞—á–∞:</b> ${combinedId}\n` +
      `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
      `<b>–û—Ç–¥–µ–ª:</b> ${department}\n` +
      `<b>–°—Å—ã–ª–∫–∞:</b> ${getTaskUrl(source, combinedId)}\n` +
      `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${escapeHtml(issue.fields.summary || '')}\n` +
      `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${getPriorityEmoji(issue.fields.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω')}\n` +
      `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${escapeHtml(issue.fields.issuetype?.name || '–ù–µ —É–∫–∞–∑–∞–Ω')}\n` +
      `<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${escapeHtml(issue.fields.assignee?.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω')}\n` +
      `<b>–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:</b> ${escapeHtml(displayAuthor)}\n` +
      `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n`;
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à–µ header, –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ source –¥–ª—è callback'–æ–≤
    const cacheKey = `${combinedId}:${lastComment.id}`;
    commentCache[cacheKey] = {
      header: prefix + header,
      shortHtml: shortCommentHtml,
      fullHtml: fullCommentHtml,
      source: source
    };
  
    const finalText = commentCache[cacheKey].header + shortCommentHtml;
  
    console.log('[DEBUG] Final message text to send:', finalText);
  
    sendMessageWithLimiter(process.env.ADMIN_CHAT_ID, finalText, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    }).catch(e => console.error('Error sending message to Telegram:', e));
  }
  
  
// Callback –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
bot.callbackQuery(/^expand_comment:(.+):(.+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    const combinedId = ctx.match[1];
    const commentId = ctx.match[2];
    const cacheKey = `${combinedId}:${commentId}`;
  
    const data = commentCache[cacheKey];
    if (!data) {
      return ctx.reply('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω?)');
    }
  
    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç: header + –ø–æ–ª–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const newText = data.header + data.fullHtml;
    const keyboard = new InlineKeyboard()
      .text('–°–≤–µ—Ä–Ω—É—Ç—å', `collapse_comment:${combinedId}:${commentId}`)
      .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(data.source, combinedId));
  
    // –í—ã–≤–æ–¥–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥)
    console.log('[DEBUG] Expand comment newText:', newText);
  
    await ctx.editMessageText(newText, {
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (err) {
    console.error('expand_comment error:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.');
  }
});
  
// Callback –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
bot.callbackQuery(/^collapse_comment:(.+):(.+)$/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    const combinedId = ctx.match[1];
    const commentId = ctx.match[2];
    const cacheKey = `${combinedId}:${commentId}`;
  
    const data = commentCache[cacheKey];
    if (!data) {
      return ctx.reply('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ.');
    }
  
    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç: header + –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const newText = data.header + data.shortHtml;
    const keyboard = new InlineKeyboard()
      .text('–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å', `expand_comment:${combinedId}:${commentId}`)
      .url('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', getTaskUrl(data.source, combinedId));
  
    console.log('[DEBUG] Collapse comment newText:', newText);
  
    await ctx.editMessageText(newText, {
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (err) {
    console.error('collapse_comment error:', err);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.');
  }
});

  

// ----------------------------------------------------------------------------------
// 7) –ö–ù–û–ü–ö–ê ¬´–í–ó–Ø–¢–¨ –í –†–ê–ë–û–¢–£¬ª
// ----------------------------------------------------------------------------------
async function reassignIssueToRealUser(source, realJiraKey, telegramUsername) {
    try {
        // –ù–∞—Ö–æ–¥–∏–º Jira-–ª–æ–≥–∏–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        const jiraUsername = jiraUserMappings[telegramUsername]?.[source];
        if (!jiraUsername) {
            console.log(`[reassignIssueToRealUser] –ù–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è ${telegramUsername} ‚Üí Jira (source=${source})`);
            return false;
        }

        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;
        const assigneeUrl = `https://jira.${source}.team/rest/api/2/issue/${realJiraKey}/assignee`;

        const r = await axios.put(
            assigneeUrl,
            { name: jiraUsername },
            {
                headers: {
                    'Authorization': `Bearer ${pat}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        if (r.status === 204) {
            console.log(`[reassignIssueToRealUser] –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ ${realJiraKey} –Ω–∞ ${jiraUsername}`);
            return true;
        } else {
            console.warn(`[reassignIssueToRealUser] –°—Ç–∞—Ç—É—Å=${r.status}, –Ω–µ —É–¥–∞–ª–æ—Å—å`);
            return false;
        }
    } catch (err) {
        console.error(`[reassignIssueToRealUser] –û—à–∏–±–∫–∞:`, err);
        return false;
    }
}

bot.callbackQuery(/^take_task:(.+)$/, async (ctx) => {
    try {
        await ctx.answerCallbackQuery();
        const combinedId = ctx.match[1];
        const telegramUsername = ctx.from.username;

        db.get('SELECT * FROM tasks WHERE id = ?', [combinedId], async (err, task) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
                return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
            }
            if (!task) {
                return ctx.reply('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.');
            }
            if (task.department !== "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                return ctx.reply('–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –¥–ª—è –¢–ü; –Ω–µ–ª—å–∑—è –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞.');
            }

            // 1) –î–µ–ª–∞–µ–º transition –≤ Jira (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            let success = false;
            try {
                success = await updateJiraTaskStatus(task.source, combinedId, telegramUsername);
            } catch (errUpd) {
                console.error('–û—à–∏–±–∫–∞ updateJiraTaskStatus:', errUpd);
            }

            // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ user_actions, —á—Ç–æ–±—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å, –∫—Ç–æ –≤–∑—è–ª
            if (success) {
                db.run(
                    `INSERT INTO user_actions (username, taskId, action, timestamp)
                     VALUES (?, ?, ?, ?)`,
                    [telegramUsername, combinedId, 'take_task', getMoscowTimestamp()]
                );

                // –°–æ–æ–±—â–∏–º –≤ —á–∞—Ç
                const displayName = usernameMappings[telegramUsername] || telegramUsername;
                await ctx.reply(`OK, –∑–∞–¥–∞—á—É ${combinedId} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É: ${displayName}.`);

                // 2) –ß–µ—Ä–µ–∑ 30 —Å–µ–∫ –¥–µ–ª–∞–µ–º *–ø–æ–≤—Ç–æ—Ä–Ω—É—é* —É—Å—Ç–∞–Ω–æ–≤–∫—É Assignee –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                setTimeout(async () => {
                    const realKey = extractRealJiraKey(combinedId);
                    const reassignOk = await reassignIssueToRealUser(task.source, realKey, telegramUsername);
                    if (reassignOk) {
                        console.log(`–ó–∞–¥–∞—á–∞ ${combinedId} (—Ä–µ–∞–ª—å–Ω–æ) –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ ${telegramUsername}`);
                    }
                }, 30_000);

            } else {
                await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É ${combinedId} –≤ –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å (updateJiraTaskStatus failed)`);
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ take_task:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});



async function updateJiraTaskStatus(source, combinedId, telegramUsername) {
    try {
        const realKey = extractRealJiraKey(combinedId);
        let transitionId = source === 'sxl' ? '221' : '201';
        const jiraUsername = jiraUserMappings[telegramUsername]?.[source];
        if (!jiraUsername) {
            console.error(`No Jira username for telegram user: ${telegramUsername}`);
            return false;
        }
        const pat = source === 'sxl' ? process.env.JIRA_PAT_SXL : process.env.JIRA_PAT_BETONE;

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const assigneeUrl = `https://jira.${source}.team/rest/api/2/issue/${realKey}/assignee`;
        const r1 = await axios.put(assigneeUrl, { name: jiraUsername }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json'
            }
        });
        if (r1.status !== 204) {
            console.error('Assignee error:', r1.status);
            return false;
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        const transitionUrl = `https://jira.${source}.team/rest/api/2/issue/${realKey}/transitions`;
        const r2 = await axios.post(transitionUrl, {
            transition: { id: transitionId }
        }, {
            headers: {
                'Authorization': `Bearer ${pat}`,
                'Content-Type': 'application/json'
            }
        });
        return (r2.status === 204);
    } catch (error) {
        console.error(`Error updating Jira task:`, error);
        return false;
    }
}

// ----------------------------------------------------------------------------------
// 8) –ö–ù–û–ü–ö–ê "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" (toggle_description)
// ----------------------------------------------------------------------------------

// 1. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function escapeHtml(text) {
    if (!text) return '';
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  }
  
  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–ª–æ–∫–∏:
   *   {code:java}...{code}
   *   {code}...{code}
   * –≤ <pre><code class="language-...">...</code></pre>.
   */
  function convertCodeBlocks(input) {
    let output = input;
    // 1) {code:lang} ... {code}
    output = output.replace(/\{code:([\w\-]+)\}([\s\S]*?)\{code\}/g, (match, lang, code) => {
      return `<pre><code class="language-${lang}">${escapeHtml(code.trim())}</code></pre>`;
    });
  
    // 2) {code} ... {code}
    output = output.replace(/\{code\}([\s\S]*?)\{code\}/g, (match, code) => {
      return `<pre><code>${escapeHtml(code.trim())}</code></pre>`;
    });
    return output;
  }
  
  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç {noformat}...{noformat} ‚Üí <pre>...</pre>.
   */
  function convertNoformatBlocks(text) {
    return text.replace(/\{noformat\}([\s\S]*?)\{noformat\}/g, (match, content) => {
      return `<pre>${escapeHtml(content.trim())}</pre>`;
    });
  }
  
  /**
   * –ò—â–µ—Ç [Link Text|URL] –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤ <a href="URL">Link Text</a>.
   */
  function convertSquareBracketLinks(text) {
    // –ü—Ä–∏–º–µ—Ä: [View alert rule|https://example.com]
    return text.replace(/\[([^\|\]]+)\|([^\]]+)\]/g, (match, linkText, linkUrl) => {
      const safeText = escapeHtml(linkText.trim());
      const safeUrl = escapeHtml(linkUrl.trim());
      return `<a href="${safeUrl}">${safeText}</a>`;
    });
  }

  function safeTruncateHtml(html, maxLength) {
    if (html.length <= maxLength) return html;
    
    let truncated = html.slice(0, maxLength);
    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤ <a –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö </a>
    const openA = (truncated.match(/<a\b/gi) || []).length;
    const closeA = (truncated.match(/<\/a>/gi) || []).length;
    if (openA > closeA) {
      // –ï—Å–ª–∏ —Ç–µ–≥ <a> –Ω–µ –∑–∞–∫—Ä—ã—Ç, —É–¥–∞–ª—è–µ–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ –∫–æ–Ω—Ü–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
      const lastOpenIdx = truncated.lastIndexOf('<a');
      if (lastOpenIdx !== -1) {
        truncated = truncated.slice(0, lastOpenIdx);
      }
    }
    return truncated + '...';
  }
  
  
  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "# ", –≤ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:
   * # item => "1) item", # another => "2) another", –∏ —Ç.–¥.
   */
  function convertHashLinesToNumbered(text) {
    let lines = text.split('\n');
  
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
    let result = [];
    let counter = 1;
  
    console.log('[DEBUG] Lines before processing:');
    for (let i = 0; i < lines.length; i++) {
      console.log(i, JSON.stringify(lines[i]), lines[i].split('').map(c => c.charCodeAt(0)));
    }
  
    for (let i = 0; i < lines.length; i++) {
      // –£–±–∏—Ä–∞–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã \u00A0 ‚Üí –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      let line = lines[i].replace(/\u00A0/g, ' ');
      let trimmed = line.trim();
  
      // --- 1) –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ‚Äì —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ "#" (–∏–ª–∏ "# ")
      if (trimmed === '#' || trimmed === '#') {
        let nextIndex = i + 1;
        let foundText = null;
  
        while (nextIndex < lines.length) {
          let candidate = lines[nextIndex].replace(/\u00A0/g, ' ').trim();
          if (candidate) {
            foundText = candidate;
            break;
          }
          nextIndex++;
        }
  
        if (foundText) {
          // –°–∫–ª–µ–∏–≤–∞–µ–º
          result.push(`${counter++}) ${foundText}`);
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ —Å—Ç—Ä–æ–∫–∏ nextIndex
          i = nextIndex;
        } else {
          result.push(`${counter++})`);
        }
      }
  
      // --- 2) –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "# " (–≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º)
      else if (trimmed.startsWith('# ')) {
        const content = trimmed.slice(2);
        result.push(`${counter++}) ${content}`);
      }
  
      // --- 3) –ò–Ω–∞—á–µ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      else {
        result.push(line);
      }
    }
  
    return result.join('\n');
  }
  
  
  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç "|col1|col2|" –≤ <pre>|col1|col2|</pre>.
   * (–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –¥–æ–ø–∏—Å—ã–≤–∞–µ–º.)
   */
  function formatTables(text) {
    return text.replace(/\|(.+?)\|/g, match => {
      return `<pre>${escapeHtml(match.trim())}</pre>`;
    });
  }
  
  // 2. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è "parseCustomMarkdown"
  // -----------------------------------------
  function parseCustomMarkdown(text) {
    if (!text) return '';
  
    // 1) {noformat}...{noformat}
    text = convertNoformatBlocks(text);
  
    // 2) {code}, {code:lang}
    text = convertCodeBlocks(text);
  
    // 3) "—Ç–∞–±–ª–∏—Ü—ã" |...|
    text = formatTables(text);
  
    // 4) [Text|URL]
    text = convertSquareBracketLinks(text);
  
    // 5) # lines => numbered
    text = convertHashLinesToNumbered(text);
  
    // 6) Markdown-like –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (*bold*, _italics_, +underline+, ~~strike~~, `inline code`)
    text = text
      // –∂–∏—Ä–Ω—ã–π
      .replace(/\*(.*?)\*/g, '<b>$1</b>')
      // –∫—É—Ä—Å–∏–≤
      .replace(/_(.*?)_/g, '<i>$1</i>')
      // –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π
      .replace(/\+(.*?)\+/g, '<u>$1</u>')
      // –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π
      .replace(/~~(.*?)~~/g, '<s>$1</s>')
      // inline code: `...`
      .replace(/(^|\s)`([^`]+)`(\s|$)/g, '$1<code>$2</code>$3')
      // —Å–ø–∏—Å–∫–∏ "- " –∏ "* "
      .replace(/^\-\s(.*)/gm, '‚Ä¢ $1')
      .replace(/^\*\s(.*)/gm, '‚Ä¢ $1')
      // –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π 1. => "üîπ "
      .replace(/^\d+\.\s(.*)/gm, 'üîπ $1')
      // –£–¥–∞–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã (3+ –ø–æ–¥—Ä—è–¥ -> 2)
      .replace(/\n{3,}/g, '\n\n');
  
    return text;
  }
  
  /**
   * 3. –í–∞—à "formatDescriptionAsHtml" –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç parseCustomMarkdown
   */
  function formatDescriptionAsHtml(rawDescription) {
    return parseCustomMarkdown(rawDescription || '');
  }
  
  // ---------------------------------------------------------------------------
  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  // ---------------------------------------------------------------------------
  // const originalText = `# Hello world\n{code:java}\nSystem.out.println("Hi");\n{code}\n[Click|http://google.com]`;
  // const html = parseCustomMarkdown(originalText);
  // bot.api.sendMessage(chatId, html, { parse_mode: "HTML" });


  function getHumanReadableName(jiraName, source) {
    if (!jiraName || !source) return null;
    // –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    const normalizedJiraName = jiraName.trim().toLowerCase();
    for (const [telegramUser, mapObj] of Object.entries(jiraUserMappings)) {
        // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∞–∫–∂–µ –∫–ª—é—á –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if ((mapObj[source] || "").trim().toLowerCase() === normalizedJiraName) {
            return usernameMappings[telegramUser] || jiraName;
        }
    }
    return null;
}


bot.callbackQuery(/^toggle_description:(.+)$/, async (ctx) => {
    try {
        await ctx.answerCallbackQuery();
        const combinedId = ctx.match[1];  // –Ω–∞–ø—Ä–∏–º–µ—Ä "betone-SUPPORT-574"

        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–∑–Ω–∞—Ç—å source (sxl/betone) –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        let rowFromDb = await new Promise(resolve => {
            db.get('SELECT * FROM tasks WHERE id = ?', [combinedId], (err, row) => resolve(row));
        });

        let source = rowFromDb?.source;
        if (!source) {
            // fallback: –ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            const txt = ctx.callbackQuery.message?.text || "";
            const match = txt.match(/–ò—Å—Ç–æ—á–Ω–∏–∫:\s*([^\n]+)/i);
            if (match) {
                source = match[1].trim();
            } else {
                // –∏–ª–∏ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 4-5 —Å–∏–º–≤–æ–ª–æ–≤
                source = combinedId.split('-')[0]; // "betone" / "sxl"
            }
        }

        // 1) –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ Jira, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        const issue = await getJiraTaskDetails(source, combinedId);
        if (!issue) {
            return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Jira.');
        }

        // 2) –°—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        const summary      = issue.fields.summary       || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const description  = issue.fields.description   || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
        const statusName   = issue.fields.status?.name  || '‚Äî';
        const priority     = issue.fields.priority?.name || 'None';
        const taskType     = issue.fields.issuetype?.name || '‚Äî';
        const assigneeObj  = issue.fields.assignee || null;
        
        // 3) –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ emoji (–µ—Å–ª–∏ –Ω–∞–¥–æ)
        const priorityEmoji = getPriorityEmoji(priority);

        // 4) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        let assigneeText = '–ù–∏–∫—Ç–æ';
        if (assigneeObj) {
            // –ù–∞–ø—Ä–∏–º–µ—Ä, assigneeObj.name = "d.baratov"
            const mappedName = getHumanReadableName(assigneeObj.name, source);
            if (mappedName) {
                assigneeText = mappedName;
            } else {
                // –ù–µ –∏–∑ –Ω–∞—à–µ–≥–æ –æ—Ç–¥–µ–ª–∞ => –±–µ—Ä—ë–º displayName
                assigneeText = assigneeObj.displayName || assigneeObj.name;
            }
        }

        // 5) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–µ—Ä–Ω—É—Ç–æ –ª–∏ —Å–µ–π—á–∞—Å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ
        const currentText = ctx.callbackQuery.message?.text.trimEnd() || "";
        const isExpanded = currentText.endsWith("..."); 
        // true, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —É–∂–µ "–¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ" –∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç–æ–∏—Ç "..."

        // 6) –ö–Ω–æ–ø–∫–∏
        const keyboard = new InlineKeyboard();
        if (rowFromDb?.department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" && statusName === "Open") {
            keyboard.text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${combinedId}`);
        }
        keyboard
            .text(isExpanded ? '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' : '–°–∫—Ä—ã—Ç—å', `toggle_description:${combinedId}`)
            .url('–û—Ç–∫—Ä—ã—Ç—å –≤ Jira', `https://jira.${source}.team/browse/${extractRealJiraKey(combinedId)}`);

        // 7) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        if (!isExpanded) {
            // –°–µ–π—á–∞—Å ¬´–∫–æ—Ä–æ—Ç–∫–æ¬ª ‚Äî –ø—Ä–∏ –∫–ª–∏–∫–µ –¥–µ–ª–∞–µ–º ¬´–ø–æ–¥—Ä–æ–±–Ω–µ–µ¬ª (–ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ)
            const safeDesc = formatDescriptionAsHtml(description);
            await ctx.editMessageText(
                `<b>–ó–∞–¥–∞—á–∞:</b> ${combinedId}\n` +
                `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
                `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priorityEmoji}\n` +
                `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${taskType}\n` +
                `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${escapeHtml(summary)}\n` +
                `<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${escapeHtml(assigneeText)}\n` +
                `<b>–°—Ç–∞—Ç—É—Å:</b> ${escapeHtml(statusName)}\n\n` +
                `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${safeDesc}\n\n...`,
                { parse_mode: 'HTML', reply_markup: keyboard }
            );
        } else {
            // –°–µ–π—á–∞—Å ¬´–ø–æ–¥—Ä–æ–±–Ω–æ¬ª ‚Äî –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            await ctx.editMessageText(
                `<b>–ó–∞–¥–∞—á–∞:</b> ${combinedId}\n` +
                `<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}\n` +
                `<b>–°—Å—ã–ª–∫–∞:</b> <a href="https://jira.${source}.team/browse/${extractRealJiraKey(combinedId)}">–û—Ç–∫—Ä—ã—Ç—å –≤ Jira</a>\n` +
                `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${escapeHtml(summary)}\n` +
                `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priorityEmoji}\n` +
                `<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> ${taskType}\n` +
                `<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${escapeHtml(assigneeText)}\n` +
                `<b>–°—Ç–∞—Ç—É—Å:</b> ${escapeHtml(statusName)}\n`,
                { parse_mode: 'HTML', reply_markup: keyboard }
            );
        }
    } catch (err) {
        console.error('toggle_description error:', err);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ toggle_description');
    }
});


// ----------------------------------------------------------------------------------
// 9) –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô –ù–ê 10:00 –ò 21:00, –ò –õ–û–ì–ò–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –ú–ï–°–Ø–¶–ï–í
// ----------------------------------------------------------------------------------

async function getDayMessageText() {
    const now = getMoscowDateTime();
    const daySchedule = await getScheduleForDate(now);
    const engineer = await fetchDutyEngineer();

    if (!daySchedule) {
        return `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${now.toFormat("dd.MM.yyyy")}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n<b>–î–µ–∂—É—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç DevOPS:</b> ${engineer}`;
    }

    const arr9_21 = daySchedule["9-21"] || [];
    const arr10_19 = daySchedule["10-19"] || [];
    const arr21_9 = daySchedule["21-9"] || [];

    return `üîî <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, ${now.toFormat("dd.MM.yyyy")} (10:00)</b>\n` +
           `\n<b>–î–Ω–µ–≤–Ω–∞—è (9-21):</b> ${arr9_21.join(", ") || "‚Äî"}\n` +
           `<b>–î–Ω–µ–≤–Ω–∞—è 5/2 (10-19):</b> ${arr10_19.join(", ") || "‚Äî"}\n` +
           `<b>–°–µ–≥–æ–¥–Ω—è –≤ –Ω–æ—á—å (21-9):</b> ${arr21_9.join(", ") || "‚Äî"}\n` +
           `\n<b>–î–µ–∂—É—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç DevOPS:</b> ${engineer}`;
}

async function getNightMessageText() {
    const now = getMoscowDateTime();

    const todaySchedule = await getScheduleForDate(now) || {};
    const tomorrow = now.plus({ days: 1 });
    const tomorrowSchedule = await getScheduleForDate(tomorrow) || {};

    const arr21_9_today = todaySchedule["21-9"] || [];
    const arr9_21_tomorrow = tomorrowSchedule["9-21"] || [];
    const arr10_19_tomorrow = tomorrowSchedule["10-19"] || [];

    const engineer = await fetchDutyEngineer();

    return `üåô <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–µ—á–µ—Ä, ${now.toFormat("dd.MM.yyyy")} (21:00)</b>\n` +
           `\n<b>–°–µ–≥–æ–¥–Ω—è –≤ –Ω–æ—á—å (21-9):</b> ${arr21_9_today.join(", ") || "‚Äî"}\n` +
           `<b>–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ (9-21):</b> ${arr9_21_tomorrow.join(", ") || "‚Äî"}\n` +
           `<b>–ó–∞–≤—Ç—Ä–∞ 5/2 (10-19):</b> ${arr10_19_tomorrow.join(", ") || "‚Äî"}\n` +
           `\n<b>–î–µ–∂—É—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç DevOPS:</b> ${engineer}`;
}

// ----------------------------------------------------------------------------------
// 10) –†–ê–°–ü–ò–°–ê–ù–ò–ï CRON
// ----------------------------------------------------------------------------------

// (A) –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Jira –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º
cron.schedule('* * * * *', async () => {
    try {
        console.log('[CRON] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ Jira...');
        await fetchAndStoreJiraTasks();

        const ctx = {
            reply: (text, opts) => bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, opts)
        };
        await sendJiraTasks(ctx);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ CRON fetchAndStoreJiraTasks/sendJiraTasks:', err);
    }
}, {
    timezone: 'Europe/Moscow'
});

// (B) –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
cron.schedule('*/5 * * * *', async () => {
    try {
        console.log('[CRON] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
        await checkForNewComments();
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ CRON checkForNewComments:', err);
    }
}, {
    timezone: 'Europe/Moscow'
});

// (C) 10:00 ‚Äî —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Excel
cron.schedule('0 10 * * *', async () => {
    try {
        const text = await getDayMessageText();
        await bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, { parse_mode: 'HTML' });
    } catch (err) {
        console.error('[CRON 10:00] –û—à–∏–±–∫–∞:', err);
    }
}, { timezone: 'Europe/Moscow' });

// (D) 21:00 ‚Äî –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
cron.schedule('0 21 * * *', async () => {
    try {
        const text = await getNightMessageText();
        await bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, { parse_mode: 'HTML' });
    } catch (err) {
        console.error('[CRON 21:00] –û—à–∏–±–∫–∞:', err);
    }
}, { timezone: 'Europe/Moscow' });

// (E) –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞, 11:00 ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
cron.schedule('0 11 * * *', async () => {
    try {
        const now = getMoscowDateTime();
        const daysInMonth = now.daysInMonth;
        const today = now.day;
        if (today === daysInMonth) {
            // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü +1
            const nextMonth = now.plus({ months: 1 });
            await bot.api.sendMessage(process.env.ADMIN_CHAT_ID,
                `–°–µ–≥–æ–¥–Ω—è ${now.toFormat("dd.MM.yyyy")} ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞.\n` +
                `–ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü (${nextMonth.toFormat("LLLL yyyy")})...`
            );

            // –ó–∞–≥—Ä—É–∑–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ÉMap –∑–∞–Ω–æ–≤–æ, –≤–¥—Ä—É–≥ –¥–æ–±–∞–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 
            await buildPageMapForSchedules();

            // –ì—Ä—É–∑–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è nextMonth
            await loadScheduleForMonthYear(nextMonth.year, nextMonth.month);

            await bot.api.sendMessage(process.env.ADMIN_CHAT_ID, '‚úÖ –ì–æ—Ç–æ–≤–æ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.');
        }
    } catch (err) {
        console.error('[CRON LAST DAY] –û—à–∏–±–∫–∞:', err);
        bot.api.sendMessage(process.env.ADMIN_CHAT_ID, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü');
    }
}, { timezone: 'Europe/Moscow' });

// ----------------------------------------------------------------------------------
// 11) –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´: /test_day, /test_night, /duty
// ----------------------------------------------------------------------------------

bot.command('test_day', async (ctx) => {
    try {
        const text = await getDayMessageText();
        await ctx.reply(text, { parse_mode: 'HTML' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ /test_day:', err);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
});

bot.command('test_night', async (ctx) => {
    try {
        const text = await getNightMessageText();
        await ctx.reply(text, { parse_mode: 'HTML' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ /test_night:', err);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
});

bot.command('duty', async (ctx) => {
    try {
        const engineer = await fetchDutyEngineer();
        await ctx.reply(`–î–µ–∂—É—Ä–Ω—ã–π: ${engineer}`);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ duty:', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ.');
    }
});

// ----------------------------------------------------------------------------------
// 12) –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –°–¢–ê–†–¢–ï
// ----------------------------------------------------------------------------------

async function initializeBotTasks() {
    console.log('[BOT INIT] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á...');

    // 1) –°—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É pageId (–ì—Ä–∞—Ñ–∏–∫ –∞–ø—Ä–µ–ª—å 2025 ‚Üí 96732191 –∏ —Ç.–ø.)
    await buildPageMapForSchedules();

    // 2) –ì—Ä—É–∑–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "—Ç–µ–∫—É—â–µ–≥–æ" –º–µ—Å—è—Ü–∞
    const now = getMoscowDateTime();
    await loadScheduleForMonthYear(now.year, now.month);

    // 3) –ü–æ–¥–≥—Ä—É–∂–∞–µ–º Jira
    await fetchAndStoreJiraTasks();

    // 4) –†–∞—Å—Å—ã–ª–∞–µ–º –∑–∞–¥–∞—á–∏
    const ctx = { reply: (text, opts) => bot.api.sendMessage(process.env.ADMIN_CHAT_ID, text, opts) };
    await sendJiraTasks(ctx);

    // 5) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    await checkForNewComments();

    db.all('SELECT taskId FROM task_comments', [], (err, rows) => {
        if (err) console.error('Error fetching task_comments:', err);
        else console.log(`Total task_comments in DB: ${rows.length}`);
    });

    console.log('[BOT INIT] –í—Å—ë –≥–æ—Ç–æ–≤–æ.');
}

// –ö–æ–º–∞–Ω–¥—ã /start –∏ /forcestart
bot.command('start', async (ctx) => {
    await ctx.reply('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—Å–µ –∑–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç. (/forcestart –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)');
});

bot.command('forcestart', async (ctx) => {
    await initializeBotTasks();
    await ctx.reply('‚ôªÔ∏è –í—Å–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã (–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Ç–∞–Ω–æ).');
});

// –°—Ç–∞—Ä—Ç—É–µ–º
bot.start({
    onStart: (botInfo) => {
        console.log(`‚úÖ Bot ${botInfo.username} is running`);
        initializeBotTasks();
    }
});
