require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');

const bot = new Bot(process.env.BOT_API_KEY);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∑–∞–¥–∞—á–∏
function getPriorityEmoji(priority) {
    const emojis = {
        Blocker: 'üö®',
        High: 'üî¥',
        Medium: 'üü°',
        Low: 'üü¢'
    };
    return emojis[priority] || '';
}

async function fetchJiraTasks() {
    try {
        const response = await axios.get('https://jira.sxl.team/rest/api/2/search', {
            headers: {
                'Authorization': `Bearer ${process.env.JIRA_PAT}`,
                'Accept': 'application/json'
            },
            params: {
                jql: 'project = SUPPORT AND (–û—Ç–¥–µ–ª = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" or –û—Ç–¥–µ–ª = "QA" or –û—Ç–¥–µ–ª = "Sportsbook") and status = "Open"'
            }
        });

        return response.data.issues.map(issue => ({
            id: issue.key, // 'key' –∑–∞–¥–∞—á–∏
            title: issue.fields.summary,
            priority: issue.fields.priority.name,
        }));
    } catch (error) {
        console.error('Error fetching Jira tasks:', error);
        return [];
    }
}

async function getTaskDetails(taskId) {
    try {
        const response = await axios.get(`https://jira.sxl.team/rest/api/2/issue/${taskId}`, {
            headers: {
                'Authorization': `Bearer ${process.env.JIRA_PAT}`,
                'Accept': 'application/json'
            }
        });

        return response.data; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
    } catch (error) {
        console.error('Error fetching Jira task details:', error);
        return null;
    }
}



const sentTasks = new Map();

async function sendJiraTasks(ctx) {
    const tasks = await fetchJiraTasks();
    const now = new Date();

    for (const task of tasks) {
        const lastSentTime = sentTasks.get(task.id);
        const timeDiff = now - lastSentTime;

        if (!lastSentTime || timeDiff > 86400000) {
            const taskDetails = await getTaskDetails(task.id);

            if (taskDetails) {
                const department = taskDetails.fields.customfield_10500 ? taskDetails.fields.customfield_10500.value : '–ù–µ —É–∫–∞–∑–∞–Ω';
                const keyboard = new InlineKeyboard();

                if (department === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
                    keyboard.text('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task.id}`);
                } else if (department === "QA") {
                    keyboard.text('–í –∫—É—Ä—Å–µ', `aware_task:${task.id}`);
                }
                else if (department === "Sportsbook") {
                    keyboard.text('–í –∫—É—Ä—Å–µ', `aware_task:${task.id}`);
                }

                const messageText = `–ó–∞–¥–∞—á–∞: ${task.id}\n–°—Å—ã–ª–∫–∞: https://jira.sxl.team/browse/${task.id}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.title}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)}\n–û—Ç–¥–µ–ª: ${department}`;
                ctx.reply(messageText, { reply_markup: keyboard });
                sentTasks.set(task.id, now);
            }
        }
    }
}




async function updateJiraTaskStatus(taskId) {
    try {
        const transitionId = '221'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID

        const transitionResponse = await axios.post(`https://jira.sxl.team/rest/api/2/issue/${taskId}/transitions`, {
            transition: {
                id: transitionId
            }
        }, {
            headers: {
                'Authorization': `Bearer ${process.env.JIRA_PAT}`,
                'Content-Type': 'application/json'
            }
        });

        return transitionResponse.status === 204;
    } catch (error) {
        console.error('Error updating Jira task:', error);
        return false;
    }
}

const usernameMappings = {
    "lipchinski": "–î–º–∏—Ç—Ä–∏–π –°–µ–ª–∏–≤–∞–Ω–æ–≤",
    "YurkovOfficial": "–ü—ë—Ç—Ä –Æ—Ä–∫–æ–≤",
    "Jlufi": "–î–∞–Ω–∏–∏–ª –ú–∞—Å–ª–æ–≤",
    "EuroKaufman": "–î–∞–Ω–∏–∏–ª –ë–∞—Ä–∞—Ç–æ–≤"
};



bot.callbackQuery(/^take_task:(.+)$/, async (ctx) => {
    const taskId = ctx.match[1];
    const task = await getTaskDetails(taskId);

    if (task && task.fields.customfield_10500 && task.fields.customfield_10500.value === "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") {
        const success = await updateJiraTaskStatus(taskId);
        if (success) {
            const displayName = usernameMappings[ctx.from.username] || ctx.from.username;
            await ctx.editMessageText(`–ó–∞–¥–∞—á–∞ ${taskId} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${displayName}\n–°—Å—ã–ª–∫–∞: https://jira.sxl.team/browse/${task.key}.`, { reply_markup: { inline_keyboard: [] } });
        } else {
            await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${taskId}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
        }
    } else {
        await ctx.editMessageText(`–ó–∞–¥–∞—á–∞ ${taskId} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç. –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–¥–µ–ª–∞ QA`, { reply_markup: { inline_keyboard: [] } });
    }
});

const awareTaskCounts = new Map();

bot.callbackQuery(/^aware_task:(.+)$/, async (ctx) => {
    const taskId = ctx.match[1];
    const username = ctx.from.username;

    if (!awareTaskCounts.has(taskId)) {
        awareTaskCounts.set(taskId, new Set());
    }

    const usersAware = awareTaskCounts.get(taskId);

    if (usersAware.has(username)) {
        return; // User already acknowledged
    }

    usersAware.add(username);

    const task = await getTaskDetails(taskId);
    const department = task.fields.customfield_10500 ? task.fields.customfield_10500.value : '–ù–µ —É–∫–∞–∑–∞–Ω';

    let messageText = `–ó–∞–¥–∞—á–∞: ${task.key}\n–°—Å—ã–ª–∫–∞: https://jira.sxl.team/browse/${task.key}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.fields.summary}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.fields.priority.name)}\n–û—Ç–¥–µ–ª: ${department}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫—É—Ä—Å–µ –∑–∞–¥–∞—á–∏: `;
    messageText += Array.from(usersAware).map(username => usernameMappings[username] || username).join(', ');

    if (usersAware.size >= 3) {
        await ctx.editMessageText(messageText, { reply_markup: { inline_keyboard: [] } });
    } else {
        await ctx.editMessageText(messageText, { reply_markup: ctx.callbackQuery.message.reply_markup });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
bot.command('start', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.\n–í–∞–∂–Ω–æ: –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª–æ–≤ QA –∏ Sportsbook –≤ —Ä–∞–±–æ—Ç—É –ø–æ–∫–∞ –±—Ä–∞—Ç—å –Ω–µ–ª—å–∑—è, —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å');
    await sendJiraTasks(ctx);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á
    setInterval(async () => {
        await sendJiraTasks(ctx);
    }, 60000);  // 60000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
});


bot.start();
